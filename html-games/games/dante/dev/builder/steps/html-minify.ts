import { minify as htmlMinifier } from "html-minifier-terser";

import type { Options as HtmlMinifierOptions } from "html-minifier-terser";
import { devLog } from "@balsamic/dev";
import { sizeDifference } from "../lib/logging";
import { htmlFinalise, stripUtf8BOM } from "../lib/code-utils";
import { JSDOM } from "jsdom";

export async function htmlMinify(
  input: string,
  options: { prependUtf8BOM?: boolean; timed?: boolean; type: "page" | "fragment" },
) {
  const timed = options.timed ?? true;
  return devLog.timed(
    async function html_minify() {
      const dom = new JSDOM(
        options.type === "page"
          ? stripUtf8BOM(input)
          : `<!doctype html>\n<html><head></head><body>${stripUtf8BOM(input)}</body></html>`,
      );

      // Remove <meta charset="utf8" />, we are going to prepend UTF8 BOM in any case.

      Array.from(dom.window.document.querySelectorAll("meta"))
        .filter((tag) => (tag.getAttribute("charset") || "").toLowerCase() === "utf8")
        .forEach((tag) => tag.remove());

      let html: string;
      if (options.type === "page") {
        html = dom.serialize();
      } else {
        html = dom.window.document.body.innerHTML;
      }

      let result = (await htmlMinifier(html, getHtmlMinifierOptions())) || html;

      if (options.type === "page") {
        result = htmlFinalise(result);
      }

      if (options.prependUtf8BOM) {
        if (!result.startsWith("\ufeff")) {
          result = `\ufeff${result}`;
        }
      } else {
        result = stripUtf8BOM(result);
      }
      if (timed) {
        this.setSuccessText(sizeDifference(input, result));
      }
      return result;
    },
    { spinner: timed, timed },
  );
}

export { HtmlMinifierOptions };

export interface HtmlMinifierSettings {
  timed?: boolean | undefined;
}

export function getHtmlMinifierOptions(): HtmlMinifierOptions {
  const result: HtmlMinifierOptions = {
    /** Treat attributes in case sensitive manner (useful for custom HTML tags) */
    caseSensitive: false,

    /* Omit attribute values from boolean attributes */
    collapseBooleanAttributes: true,

    // Don't leave any spaces between display:inline; elements when collapsing. Must be used in conjunction with collapseWhitespace=true
    collapseInlineTagWhitespace: false,

    /**
     * Collapse white space that contributes to text nodes in a document tree
     * @see http://perfectionkills.com/experimenting-with-html-minifier/#collapse_whitespace
     */
    collapseWhitespace: true,

    // Always collapse to 1 space (never remove it entirely). Must be used in conjunction with collapseWhitespace=true
    conservativeCollapse: false,

    /** Handle parse errors instead of aborting */
    continueOnParseError: true,

    // Use direct Unicode characters whenever possible
    decodeEntities: true,

    // Parse input according to HTML5 specifications
    html5: true,

    // Insert tags generated by HTML parser
    includeAutoGeneratedTags: false,

    // Keep the trailing slash on singleton elements
    keepClosingSlash: false,

    // Minify CSS in style elements and style attributes (uses clean-css or function specified)
    minifyCSS: false,

    // Minify JavaScript in script elements and event attributes (uses UglifyJS or function specified)
    minifyJS: false,

    // Minify URLs in various attributes (uses relateurl or function specified)
    minifyURLs: false,

    // Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a line break. Must be used in conjunction with collapseWhitespace=true
    preserveLineBreaks: false,

    // Prevents the escaping of the values of attributes
    preventAttributesEscaping: false,

    // Type of quote to use for attribute values (' or ")
    quoteCharacter: '"',

    /**
     * Remove quotes around attributes when possible
     * @see http://perfectionkills.com/experimenting-with-html-minifier/#remove_attribute_quotes
     */
    removeAttributeQuotes: true,

    /**
     * Strip HTML comments
     * @see http://perfectionkills.com/experimenting-with-html-minifier/#remove_comments
     */
    removeComments: true,

    /**
     * Remove all attributes with whitespace-only values
     * @see http://perfectionkills.com/experimenting-with-html-minifier/#remove_empty_or_blank_attributes
     */
    removeEmptyAttributes: true,

    /**
     * Remove all elements with empty contents
     * @see http://perfectionkills.com/experimenting-with-html-minifier/#remove_empty_elements
     */
    removeEmptyElements: false,

    /**
     * Remove optional tags
     * @see http://perfectionkills.com/experimenting-with-html-minifier/#remove_optional_tags
     */
    removeOptionalTags: false,

    /**
     * Remove attributes when value matches default.
     * @see http://perfectionkills.com/experimenting-with-html-minifier/#remove_redundant_attributes
     */
    removeRedundantAttributes: true,

    // Remove type="text/javascript" from script tags. Other type attribute values are left intact
    removeScriptTypeAttributes: true,

    // Remove type="text/css" from style and link tags. Other type attribute values are left intact
    removeStyleLinkTypeAttributes: true,

    /**
     * Sort attributes by frequency
     *
     * Minifier options like sortAttributes and sortClassName won't impact the plain-text size
     * of the output. However, they form long repetitive chains of characters that should improve
     * compression ratio of gzip used in HTTP compression.
     *
     * @see https://github.com/kangax/html-minifier#sorting-attributes--style-classes
     */
    sortAttributes: true,

    /**
     * Sort style classes by frequency
     *
     * Minifier options like sortAttributes and sortClassName won't impact the plain-text size
     * of the output. However, they form long repetitive chains of characters that should improve
     * compression ratio of gzip used in HTTP compression.
     *
     * @see https://github.com/kangax/html-minifier#sorting-attributes--style-classes
     */
    sortClassName: true,

    /**
     * Replaces the doctype with the short (HTML5) doctype
     * @see http://perfectionkills.com/experimenting-with-html-minifier/#use_short_doctype
     */
    useShortDoctype: true,
  };

  return result;
}
