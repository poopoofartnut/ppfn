let $$$$0,
  $$$$1,
  $$$$2,
  $$$$3,
  $$$$4,
  $$$$5,
  $$$$6,
  $$$$7,
  $$$$8,
  $$$$9,
  $$$$10,
  $$$$11,
  $$$$12,
  $$$$13,
  $$$$14,
  $$$$15,
  $$$$16 = 0,
  $$$$17 = 0,
  $$$$18 = 0,
  $$$$19 = 0,
  $$$$20 = 0,
  $$$$21 = 0,
  $$$$22 = 0,
  $$$$23 = 0,
  $$$$24 = 14,
  $$$$25 = .1;
const $$$$26 = Math.PI / 180,
  $$$$27 = "data:image/svg+xml;base64,"
    + /* @__PURE__ */ btoa(
      "<svg color-interpolation-filters=\"sRGB\" height=\"1024\" width=\"1024\" xmlns=\"http://www.w3.org/2000/svg\"><filter filterUnits=\"userSpaceOnUse\" height=\"1026\" id=\"a\" width=\"1026\" x=\"0\" y=\"0\"><feTurbulence baseFrequency=\".007\" height=\"1025\" numOctaves=\"6\" stitchTiles=\"stitch\" width=\"1025\" result=\"z\" type=\"fractalNoise\" x=\"1\" y=\"1\"/><feTile height=\"1024\" width=\"1024\" x=\"-1\" y=\"-1\"/><feTile/><feDiffuseLighting diffuseConstant=\"4\" lighting-color=\"red\" surfaceScale=\"5\"><feDistantLight azimuth=\"270\" elevation=\"5\"/></feDiffuseLighting><feTile height=\"1024\" width=\"1024\" x=\"1\" y=\"1\"/><feTile result=\"x\"/><feColorMatrix values=\"0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\" in=\"z\"/><feTile height=\"1024\" width=\"1024\" x=\"1\" y=\"1\"/><feTile result=\"z\"/><feTurbulence baseFrequency=\".01\" height=\"1024\" numOctaves=\"5\" stitchTiles=\"stitch\" width=\"1024\"/><feColorMatrix values=\"0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1\"/><feBlend in2=\"x\" mode=\"screen\"/><feBlend in2=\"z\" mode=\"screen\"/></filter><rect filter=\"url(#a)\" height=\"100%\" width=\"100%\"/></svg>",
    ),
  $$$$28 = {
    x: 0,
    y: 180,
  },
  $$$$29 = {
    x: 0,
    y: 0,
    z: 0,
  },
  $$$$30 = [],
  $$$$31 = [],
  $$$$32 = [],
  $$$$33 = [{
    x: -1,
    z: 1,
  }, {
    x: 1,
    z: 1,
  }, {
    x: 1,
    z: -1,
  }, {
    x: -1,
    z: -1,
  }],
  $$$$34 = (
    $$$$0,
    $$$$1 = $$$$86,
    $$$$2 = 0,
  ) => ($$$$2 *= 16,
    $$$$1[$$$$2++] = $$$$0.m11,
    $$$$1[$$$$2++] = $$$$0.m12,
    $$$$1[$$$$2++] = $$$$0.m13,
    $$$$1[$$$$2++] = $$$$0.m14,
    $$$$1[$$$$2++] = $$$$0.m21,
    $$$$1[$$$$2++] = $$$$0.m22,
    $$$$1[$$$$2++] = $$$$0.m23,
    $$$$1[$$$$2++] = $$$$0.m24,
    $$$$1[$$$$2++] = $$$$0.m31,
    $$$$1[$$$$2++] = $$$$0.m32,
    $$$$1[$$$$2++] = $$$$0.m33,
    $$$$1[$$$$2++] = $$$$0.m34,
    $$$$1[$$$$2++] = $$$$0.m41,
    $$$$1[$$$$2++] = $$$$0.m42,
    $$$$1[$$$$2++] = $$$$0.m43,
    $$$$1[$$$$2] = $$$$0.m44,
    $$$$1),
  $$$$35 = (
    $$$$0 = $$$$84,
    $$$$1 = $$$$85,
  ) => ($$$$1.m11 = $$$$0.m11,
    $$$$1.m12 = $$$$0.m12,
    $$$$1.m13 = $$$$0.m13,
    $$$$1.m14 = $$$$0.m14,
    $$$$1.m21 = $$$$0.m21,
    $$$$1.m22 = $$$$0.m22,
    $$$$1.m23 = $$$$0.m23,
    $$$$1.m24 = $$$$0.m24,
    $$$$1.m31 = $$$$0.m31,
    $$$$1.m32 = $$$$0.m32,
    $$$$1.m33 = $$$$0.m33,
    $$$$1.m34 = $$$$0.m34,
    $$$$1.m41 = $$$$0.m41,
    $$$$1.m42 = $$$$0.m42,
    $$$$1.m43 = $$$$0.m43,
    $$$$1.m44 = $$$$0.m44,
    $$$$1),
  $$$$36 = ($$$$0 = 0, $$$$1 = 0, $$$$2 = 0, $$$$3 = 1) => {
    $$$$36.x = $$$$85.m11 * $$$$0 + $$$$85.m21 * $$$$1 + $$$$85.m31 * $$$$2 + $$$$85.m41 * $$$$3,
      $$$$36.y = $$$$85.m12 * $$$$0 + $$$$85.m22 * $$$$1 + $$$$85.m32 * $$$$2 + $$$$85.m42 * $$$$3,
      $$$$36.z = $$$$85.m13 * $$$$0 + $$$$85.m23 * $$$$1 + $$$$85.m33 * $$$$2 + $$$$85.m43 * $$$$3,
      $$$$36.w = $$$$85.m14 * $$$$0 + $$$$85.m24 * $$$$1 + $$$$85.m34 * $$$$2 + $$$$85.m44 * $$$$3;
  },
  $$$$37 = NO_INLINE(($$$$0, $$$$1, $$$$2) => $$$$84.translate($$$$0, $$$$1, $$$$2)),
  $$$$38 = ($$$$0, $$$$1) => Array.from(/* @__PURE__ */ Array($$$$0), ($$$$0, $$$$2) => $$$$1($$$$2)),
  $$$$39 = ($$$$0, $$$$1, $$$$2) => ($$$$0.g = $$$$2, $$$$0.h = $$$$1, $$$$0),
  $$$$40 = ($$$$0, $$$$1, $$$$2 = $$$$0.h) => ($$$$35($$$$1),
    $$$$39(
      $$$$0.map(({
        x: $$$$0,
        y: $$$$1,
        z: $$$$2,
      }) => ($$$$36($$$$0, $$$$1, $$$$2), {
        x: $$$$36.x,
        y: $$$$36.y,
        z: $$$$36.z,
      })),
      $$$$2,
      $$$$0.g,
    )),
  $$$$41 = ($$$$0, $$$$1, $$$$2) => $$$$0.map($$$$0 => $$$$40($$$$0, $$$$1, $$$$2)),
  $$$$42 = NO_INLINE($$$$0 => 0 > $$$$0 ? -$$$$0 : $$$$0),
  $$$$43 = NO_INLINE(($$$$0, $$$$1) => $$$$1 > $$$$0 ? $$$$0 : $$$$1),
  $$$$44 = NO_INLINE(($$$$0, $$$$1) => $$$$0 > $$$$1 ? $$$$0 : $$$$1),
  $$$$45 = ($$$$0, $$$$1) => $$$$42($$$$0) > $$$$1 ? $$$$0 : 0,
  $$$$46 = ($$$$0, $$$$1 = 0, $$$$2 = 1) => $$$$1 > $$$$0 ? $$$$1 : $$$$0 > $$$$2 ? $$$$2 : $$$$0,
  $$$$47 = $$$$0 =>
    /* @__PURE__ */ Math.atan2(/* @__PURE__ */ Math.sin($$$$0 * $$$$26), /* @__PURE__ */ Math.cos($$$$0 * $$$$26))
      / $$$$26,
  $$$$48 = ($$$$0, $$$$1, $$$$2) => $$$$0 + (2 * ($$$$1 = ($$$$1 - $$$$0) % 360) % 360 - $$$$1) * $$$$46($$$$2) || 0,
  $$$$49 = ($$$$0, $$$$1, $$$$2) => ($$$$2 > 0 ? 1 > $$$$2 ? $$$$0 + ($$$$1 - $$$$0) * $$$$2 : $$$$1 : $$$$0) || 0,
  $$$$50 = ($$$$0, $$$$1, $$$$2 = 0) => ($$$$0 * $$$$0 + $$$$1 * $$$$1 + $$$$2 * $$$$2) ** .5,
  $$$$51 = ($$$$0, $$$$1 = 0) =>
    $$$$38($$$$0, $$$$2 => {
      const $$$$3 = /* @__PURE__ */ Math.cos(2 * Math.PI * $$$$2 / $$$$0);
      return {
        x: /* @__PURE__ */ Math.sin(2 * Math.PI * $$$$2 / $$$$0),
        y: 0,
        z: .01 > $$$$42($$$$3) ? $$$$3 : 0 > $$$$3 ? $$$$3 - $$$$1 : $$$$3 + $$$$1,
      };
    }),
  $$$$52 = ($$$$0, $$$$1, $$$$2) =>
    $$$$0.map(($$$$3, $$$$4, {
      length: $$$$5,
    }) =>
      $$$$39(
        [$$$$3, $$$$1[$$$$5 - $$$$4 - 1], $$$$1[$$$$5 - ($$$$4 + 1) % $$$$5 - 1], $$$$0[($$$$4 + 1) % $$$$5]],
        $$$$0.h,
        $$$$2,
      )
    ),
  $$$$53 = (
    $$$$0,
    $$$$1,
    $$$$2 = 0,
    $$$$3,
  ) => ($$$$0 = $$$$0 ? $$$$51($$$$0, $$$$3) : $$$$33,
    $$$$3 = $$$$40($$$$0, $$$$37(0, 1).scale3d($$$$2 > 0 ? $$$$2 : 1)),
    $$$$0 = $$$$40($$$$0, $$$$37(0, -1).scale3d(0 > $$$$2 ? -$$$$2 : 1)).reverse(),
    [...$$$$52($$$$0, $$$$3, $$$$1), $$$$3, $$$$0]),
  $$$$54 = ($$$$0, $$$$1 = $$$$0, $$$$2 = ($$$$2, $$$$3) => ($$$$3 *= Math.PI / $$$$1, {
    x: /* @__PURE__ */ Math.cos($$$$2 *= 2 * Math.PI / $$$$0) * /* @__PURE__ */ Math.sin($$$$3),
    y: /* @__PURE__ */ Math.cos($$$$3),
    z: /* @__PURE__ */ Math.sin($$$$2) * /* @__PURE__ */ Math.sin($$$$3),
  })) => {
    const $$$$3 = [];
    for (let $$$$5 = 0; $$$$0 > $$$$5; $$$$5++) {
      for (let $$$$6 = 0; $$$$1 > $$$$6; $$$$6++) {
        var $$$$4 = ($$$$0, $$$$1) => $$$$7.push($$$$2($$$$0, $$$$1, $$$$7));
        const $$$$7 = $$$$39([], 0, 1);
        $$$$3.push($$$$7),
          $$$$4($$$$5, $$$$6),
          $$$$6 && $$$$4(($$$$5 + 1) % $$$$0, $$$$6),
          $$$$1 - 1 > $$$$6 && $$$$4(($$$$5 + 1) % $$$$0, $$$$6 + 1 % $$$$1),
          $$$$4($$$$5, $$$$6 + 1 % $$$$1);
      }
    }
    return $$$$3;
  },
  $$$$55 = NO_INLINE(($$$$0, $$$$1, $$$$2, $$$$3 = 0) =>
    255 * $$$$3 << 24 | 255 * $$$$2 << 16 | 255 * $$$$1 << 8 | 255 * $$$$0
  ),
  $$$$56 = $$$$0 => {
    let $$$$1,
      $$$$2 = 0,
      $$$$3 = 0,
      $$$$4 = 0,
      $$$$5 = $$$$0.at(-1);
    for ($$$$1 of $$$$0) {
      $$$$2 += ($$$$5.y - $$$$1.y) * ($$$$5.z + $$$$1.z),
        $$$$3 += ($$$$5.z - $$$$1.z) * ($$$$5.x + $$$$1.x),
        $$$$4 += ($$$$5.x - $$$$1.x) * ($$$$5.y + $$$$1.y),
        $$$$5 = $$$$1;
    }
    return $$$$1 = $$$$50($$$$2, $$$$3, $$$$4), $$$$2 /= $$$$1, $$$$3 /= $$$$1, $$$$4 /= $$$$1, {
      x: $$$$2,
      y: $$$$3,
      z: $$$$4,
      w: $$$$2 * $$$$5.x + $$$$3 * $$$$5.y + $$$$4 * $$$$5.z,
    };
  },
  $$$$57 = ({
    x: $$$$0,
    y: $$$$1,
    z: $$$$2,
  }, $$$$3) => $$$$0 * $$$$3.x + $$$$1 * $$$$3.y + $$$$2 * $$$$3.z,
  $$$$58 = ($$$$0, $$$$1) => {
    let $$$$2, $$$$3, $$$$4;
    const {
      i: $$$$5,
      j: $$$$6,
    } = $$$$1;
    for (let $$$$9 = 0; $$$$5.length > $$$$9; ++$$$$9) {
      if (
        -8e-5 > ($$$$2 = $$$$57($$$$0, $$$$5[$$$$9]) - $$$$0.w) ? $$$$4 = $$$$1 : $$$$2 > 8e-5 && ($$$$3 = $$$$1),
          $$$$4 && $$$$3
      ) {
        var $$$$7 = [],
          $$$$8 = [];
        let $$$$9 = $$$$5.at(-1),
          $$$$10 = $$$$57($$$$9, $$$$0) - $$$$0.w;
        for (const $$$$1 of $$$$5) {
          $$$$2 = $$$$57($$$$1, $$$$0) - $$$$0.w,
            8e-5 > $$$$10 && $$$$8.push($$$$9),
            $$$$10 > -8e-5 && $$$$7.push($$$$9),
            ($$$$10 > 8e-5 && -8e-5 > $$$$2 || -8e-5 > $$$$10 && $$$$2 > 8e-5) && ($$$$10 /= $$$$2 - $$$$10,
              $$$$9 = {
                x: $$$$9.x + ($$$$9.x - $$$$1.x) * $$$$10,
                y: $$$$9.y + ($$$$9.y - $$$$1.y) * $$$$10,
                z: $$$$9.z + ($$$$9.z - $$$$1.z) * $$$$10,
              },
              $$$$7.push($$$$9),
              $$$$8.push($$$$9)),
            $$$$9 = $$$$1,
            $$$$10 = $$$$2;
        }
        $$$$3 = $$$$7.length > 2 && {
          i: $$$$39($$$$7, $$$$5.h, $$$$5.g),
          j: $$$$6,
          k: $$$$1,
        },
          $$$$4 = $$$$8.length > 2 && {
            i: $$$$39($$$$8, $$$$5.h, $$$$5.g),
            j: $$$$6,
            k: $$$$1,
          };
        break;
      }
    }
    return {
      x: $$$$3,
      y: $$$$4,
    };
  },
  $$$$59 = ($$$$0, $$$$1, $$$$2 = $$$$56($$$$1.i)) => {
    let $$$$3, $$$$4;
    return $$$$0
      ? (({
        x: $$$$3,
        y: $$$$4,
      } = $$$$58($$$$0, $$$$1)),
        $$$$3 || $$$$4 || $$$$0.i.push($$$$1),
        $$$$3 && ($$$$0.l = $$$$59($$$$0.l, $$$$3, $$$$2)),
        $$$$4 && ($$$$0.m = $$$$59($$$$0.m, $$$$4, $$$$2)))
      : $$$$0 = {
        x: $$$$2.x,
        y: $$$$2.y,
        z: $$$$2.z,
        w: $$$$2.w,
        i: [$$$$1],
        l: 0,
        m: 0,
      },
      $$$$0;
  },
  $$$$60 = ($$$$0, $$$$1, $$$$2) => {
    const $$$$3 = [],
      $$$$4 = ($$$$0, $$$$5) => {
        let {
          x: $$$$6,
          y: $$$$7,
        } = $$$$58($$$$0, $$$$5);
        $$$$6 || $$$$7 || ($$$$2 * $$$$57($$$$0, $$$$1) > 0 ? $$$$6 = $$$$5 : $$$$7 = $$$$5),
          $$$$6 && ($$$$0.l ? $$$$4($$$$0.l, $$$$6) : $$$$3.push($$$$6)),
          $$$$7 && $$$$0.m && $$$$4($$$$0.m, $$$$7);
      };
    for (const $$$$2 of $$$$1.i) $$$$4($$$$0, $$$$2);
    return $$$$3;
  },
  $$$$61 = ($$$$0, $$$$1) => $$$$0 && ($$$$1($$$$0), $$$$61($$$$0.l, $$$$1), $$$$61($$$$0.m, $$$$1)),
  $$$$62 = $$$$0 => ($$$$61($$$$0, $$$$0 => {
    const $$$$1 = $$$$0.m;
    $$$$0.m = $$$$0.l, $$$$0.l = $$$$1, $$$$0.x *= -1, $$$$0.y *= -1, $$$$0.z *= -1, $$$$0.w *= -1;
    for (const $$$$1 of $$$$0.i) $$$$1.j = !$$$$1.j;
  }),
    $$$$0),
  $$$$63 = $$$$0 =>
    $$$$0.length
      ? $$$$0.reduce(($$$$0, $$$$1) =>
        $$$$59($$$$0, {
          i: $$$$1,
          j: 0,
          k: 0,
        }), 0)
      : $$$$0,
  $$$$64 = (...$$$$0) =>
    $$$$0.reduce(($$$$0, $$$$1) => {
      const $$$$2 = [];
      if ($$$$0 = $$$$63($$$$0), $$$$1) {
        $$$$1 = $$$$63($$$$1),
          $$$$61($$$$0, $$$$0 => $$$$0.i = $$$$60($$$$1, $$$$0, 1)),
          $$$$61($$$$1, $$$$1 => $$$$2.push([$$$$1, $$$$60($$$$0, $$$$1, -1)]));
        for (var [$$$$3, $$$$4] of $$$$2) for (const $$$$1 of $$$$4) $$$$59($$$$0, $$$$1, $$$$3);
      }
      return $$$$0;
    }),
  $$$$65 = ($$$$0, ...$$$$1) => {
    {
      const $$$$2 = $$$$0 => {
          let $$$$1;
          return $$$$0.k
            && (($$$$1 = $$$$4.get($$$$0.k))
              ? ($$$$3.delete($$$$1), $$$$0 = $$$$2($$$$0.k))
              : $$$$4.set($$$$0.k, $$$$0)),
            $$$$0;
        },
        $$$$3 = /* @__PURE__ */ new Map(),
        $$$$4 = /* @__PURE__ */ new Map();
      return $$$$0 = $$$$62($$$$64($$$$62($$$$63($$$$0)), ...$$$$1)),
        $$$$61($$$$0, $$$$0 => {
          for (const $$$$1 of $$$$0.i) $$$$3.set($$$$2($$$$1), $$$$1.j);
        }),
        Array.from($$$$3, ([{
          i: $$$$0,
        }, $$$$1]) => {
          const $$$$2 = $$$$0.map(({
            x: $$$$0,
            y: $$$$1,
            z: $$$$2,
          }) => ({
            x: $$$$0,
            y: $$$$1,
            z: $$$$2,
          }));
          return $$$$39($$$$1 ? $$$$2.reverse() : $$$$2, $$$$0.h, $$$$0.g);
        });
    }
  },
  $$$$66 = NO_INLINE($$$$0 => 1 - /* @__PURE__ */ Math.exp(-$$$$16 * $$$$0)),
  $$$$67 = NO_INLINE(($$$$0, $$$$1, $$$$2) => $$$$49($$$$0, $$$$1, $$$$66($$$$2))),
  $$$$68 = $$$$0 =>
    setTimeout(() => {
      h4.innerHTML += ".", $$$$0();
    }, 5),
  $$$$69 = NO_INLINE($$$$0 => {
    let $$$$1 = 0;
    const $$$$3 = (
        $$$$2,
        $$$$3,
        $$$$6,
        $$$$7,
        $$$$8,
        $$$$9,
        $$$$10,
        $$$$11,
        $$$$12,
        $$$$13,
        $$$$14,
        $$$$15,
        $$$$16,
        $$$$17,
        $$$$18,
        $$$$19,
        $$$$20,
        $$$$21,
        $$$$22,
        $$$$23,
        $$$$24,
        $$$$25 = $$$$1++,
      ) =>
        $$$$68(() => {
          let $$$$26 = 0;
          $$$$13 = $$$$13 ** 2 * 4,
            $$$$24 = $$$$24.split("+"),
            [5513, 4562, 3891].map($$$$0 => {
              var $$$$1, $$$$27, $$$$28, $$$$29;
              let $$$$30,
                $$$$31,
                $$$$32,
                $$$$33 = 0,
                $$$$34 = 0;
              const $$$$35 = [],
                $$$$36 = $$$$0 => /* @__PURE__ */ Math.sin($$$$0 * Math.PI * 2),
                $$$$37 = NO_INLINE($$$$1 => {
                  let $$$$4,
                    $$$$5,
                    $$$$15 = 0,
                    $$$$16 = 0;
                  const $$$$17 = new Int32Array($$$$11 + $$$$12 + $$$$13),
                    $$$$18 = 2 > $$$$25 ? $$$$0 => $$$$0 % 1 * 2 - 1 : $$$$36,
                    $$$$19 = 2 > $$$$25
                      ? 1 > $$$$25
                        ? $$$$0 => .5 > $$$$0 % 1 ? 1 : -1
                        : $$$$0 => 2 > ($$$$0 = $$$$0 % 1 * 4) ? $$$$0 - 1 : 3 - $$$$0
                      : $$$$36;
                  for (let $$$$20 = 0, $$$$21 = 0; $$$$11 + $$$$12 + $$$$13 > $$$$20; ++$$$$20, ++$$$$21) {
                    let $$$$22 = 1;
                    $$$$11 > $$$$20
                      ? $$$$22 = $$$$20 / $$$$11
                      : $$$$11 + $$$$12 > $$$$20
                        || ($$$$22 = (1 - ($$$$22 = ($$$$20 - $$$$11 - $$$$12) / $$$$13))
                          * 3 ** (-$$$$14 / 16 * $$$$22)),
                      0 > $$$$21
                      || ($$$$21 -= 4 * $$$$0,
                        $$$$4 = 0.00396 * 2 ** (($$$$1 + $$$$3 - 256) / 12),
                        $$$$5 = 0.00396 * 2 ** (($$$$1 + $$$$8 - 256) / 12) * ($$$$25 ? 1 : 1.0072)),
                      $$$$17[$$$$20] = 80
                          * ($$$$18($$$$15 += $$$$4 * $$$$22 ** ($$$$6 / 32)) * $$$$2
                            + $$$$19($$$$16 += $$$$5 * $$$$22 ** ($$$$9 / 32)) * $$$$7
                            + ($$$$10 && $$$$10 * (2 * /* @__PURE__ */ Math.random() - 1)))
                          * $$$$22 | 0;
                  }
                  return $$$$17;
                }),
                $$$$38 = new Int32Array(768 * $$$$0),
                $$$$39 = 2 ** ($$$$15 - 9) / $$$$0,
                $$$$40 = Math.PI * 2 ** ($$$$20 - 8) / $$$$0,
                $$$$41 = $$$$22 * $$$$0 & -2;
              for (let $$$$2 = 0; 11 >= $$$$2; ++$$$$2) {
                for (
                  let $$$$3 = 0,
                    $$$$6 = +"000001234556112341234556011111111112011111111112000001111112"[12 * $$$$25 + $$$$2];
                  32 > $$$$3;
                  ++$$$$3
                ) {
                  $$$$1 = (32 * $$$$2 + $$$$3) * $$$$0;
                  for (let $$$$0 = 0; 4 > $$$$0; ++$$$$0) {
                    if (
                      $$$$30 = 0,
                        $$$$6
                        && ($$$$30 = $$$$24[$$$$6 - 1].charCodeAt($$$$3 + 32 * $$$$0) - 40,
                          $$$$30 += $$$$30 > 0 ? 106 : 0),
                        $$$$30
                    ) {
                      $$$$27 = $$$$35[$$$$30] || ($$$$35[$$$$30] = $$$$37($$$$30));
                      for (
                        let $$$$0 = 0, $$$$2 = 2 * $$$$1;
                        $$$$27.length > $$$$0;
                        ++$$$$0, $$$$2 += 2
                      ) {
                        $$$$38[$$$$2] += $$$$27[$$$$0];
                      }
                    }
                  }
                  for (let $$$$2, $$$$3 = 0; $$$$0 > $$$$3; ++$$$$3) {
                    let $$$$0 = 0;
                    $$$$29 = ((($$$$2 = $$$$38[$$$$28 = 2 * ($$$$1 + $$$$3)]) || $$$$32)
                      && ($$$$31 = 0.00308 * $$$$16,
                        1 !== $$$$25 && 4 !== $$$$25 || ($$$$31 *= $$$$36($$$$39 * $$$$28) * $$$$23 / 512 + .5),
                        $$$$33 += ($$$$31 = 1.5 * /* @__PURE__ */ Math.sin($$$$31)) * $$$$34,
                        $$$$34 += $$$$31 * ($$$$29 = (1 - $$$$17 / 255) * ($$$$2 - $$$$34) - $$$$33),
                        $$$$2 = 4 === $$$$25 ? $$$$34 : 3 === $$$$25 ? $$$$29 : $$$$33,
                        $$$$25 || ($$$$2 = (1 > ($$$$2 *= 22e-5) ? $$$$2 > -1 ? $$$$36($$$$2 / 4) : -1 : 1) / 22e-5),
                        $$$$2 *= $$$$18 / 32,
                        $$$$32 = $$$$2 * $$$$2 > 1e-5,
                        $$$$0 = $$$$2
                          * (1 - ($$$$29 = /* @__PURE__ */ Math.sin($$$$40 * $$$$28) * $$$$19 / 512 + .5)),
                        $$$$2 *= $$$$29),
                      $$$$41 > $$$$28
                      || ($$$$0 += $$$$38[1 + $$$$28 - $$$$41] * $$$$21 / 255,
                        $$$$2 += $$$$38[$$$$28 - $$$$41] * $$$$21 / 255),
                      $$$$26 + $$$$28 >> 1);
                    $$$$4[$$$$29] += ($$$$38[$$$$28] = $$$$0) / 65536,
                      $$$$5[$$$$29] += ($$$$38[++$$$$28] = $$$$2) / 65536;
                  }
                }
              }
              $$$$26 += 768 * $$$$0;
            }),
            --$$$$1 || $$$$68($$$$0);
        }),
      $$$$4 = ($$$$2 = new AudioBuffer({
        numberOfChannels: 2,
        sampleRate: 44100,
        length: 5362944,
      })).getChannelData(0),
      $$$$5 = $$$$2.getChannelData(1);
    $$$$3(
      69,
      128,
      0,
      143,
      128,
      0,
      0,
      196,
      100,
      36,
      0,
      0,
      149,
      110,
      31,
      47,
      3,
      56,
      2,
      0,
      "(.15:15:=5:=A:=AF=AFIFIMRMRUY(Y(((((((((((((((((((((((((((((M(M(((((((((((((((((((((((((((((R(R(((((((((((((((((((((((((((((U(U+(059<59<A9<AE<AEHAEHMEHMQMQTY(Y+(5:>A:>AF>AFJAFJMFJMRJMRVMRVY(Y+(:?BFFKNRRWZ^(^((:=@FFILRRUX^(^+Q(M(M(O(Q(R(T(Q(T(R(W(U(T(R(Q(N(W((Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(X]+QN(M(N(M(N(M(N(M((((((((((((((((W(Y(Y(Y(Y(Y(Y(Y(Y(((((((((((((((]",
    ),
      $$$$3(
        100,
        128,
        0,
        201,
        128,
        0,
        0,
        100,
        144,
        35,
        0,
        6,
        135,
        0,
        32,
        147,
        6,
        0,
        6,
        195,
        ".(5(.(5(.(5(.(5(.(5(.(5(.(5(.(5+-(5(-(5(-(5(-(5(-(5(-(5(-(5(-(5+,(5(,(5(,(5(,(5(,(5(,(5(,(5(,(5+*(6(*(6(*(6(*(6(*(6(*(6(*(6(*(6+5(E(E(F(H(I(K(H(K(I(N(M(K(I(H(F(A(((((((((((((((((((((((((((((((5(((5(((5(((5(((5(((5(((5(((5+5(6(5(6(5(6(5(6(5((()(((((((((((A(B(A(B(A(B(A(B(A(((5",
      ),
      $$$$3(
        255,
        116,
        85,
        255,
        116,
        37,
        14,
        64,
        144,
        73,
        99,
        0,
        136,
        15,
        32,
        0,
        0,
        66,
        6,
        0,
        "9(((9(((9(((9(((9(((9(((9(((9+9(((Q(((Q(((Q",
      ),
      $$$$3(
        0,
        140,
        0,
        0,
        140,
        0,
        81,
        64,
        400,
        47,
        55,
        5,
        239,
        135,
        13,
        176,
        5,
        16,
        4,
        187,
        "9(9(9(9(9(9(9(999(9(9(9(999(9(9+9(9(9(9(9(999(9(((((Q",
      ),
      $$$$3(
        221,
        128,
        64,
        210,
        128,
        64,
        255,
        64,
        144,
        73,
        79,
        7,
        195,
        15,
        21,
        20,
        0,
        9,
        3,
        64,
        "((((Q(((((((Q(((((((Q(((((((Q+Q((Q((Q((Q((Q((Q((((Q",
      );
  }),
  $$$$70 = ($$$$0, $$$$1, $$$$2, $$$$3) =>
    new DOMMatrix([
      $$$$2,
      0,
      0,
      0,
      0,
      $$$$3,
      0,
      0,
      0,
      0,
      ($$$$1 + $$$$0) / ($$$$0 - $$$$1),
      -1,
      0,
      0,
      2 * $$$$1 * $$$$0 / ($$$$0 - $$$$1),
      0,
    ]);
let $$$$71 = () => {
  let $$$$0,
    $$$$7,
    $$$$8,
    $$$$9,
    $$$$10,
    $$$$11,
    $$$$12,
    $$$$13,
    $$$$14,
    $$$$15,
    $$$$17,
    $$$$21,
    $$$$22,
    $$$$23,
    $$$$24,
    $$$$25,
    $$$$26 = !0;
  const $$$$27 = [],
    $$$$29 = () => {
      b4.innerHTML = "Music: " + $$$$26,
        $$$$25 && ($$$$1 || !$$$$26 ? $$$$25.disconnect() : $$$$25.connect($$$$24.destination));
    },
    $$$$30 = () => {
      const $$$$0 = (hC.height = innerHeight) / (hC.width = innerWidth) * 1.732051;
      $$$$6 = $$$$70(.3, 181, $$$$0, 1.732051),
        $$$$5 = [$$$$70(.3, 55, $$$$0, 1.732051), $$$$70(55, 181, $$$$0, 1.732051)],
        $$$$9 = $$$$13 = void 0,
        $$$$27.length =
          $$$$3 =
          $$$$23 =
          $$$$21 =
          $$$$22 =
          $$$$19 =
          $$$$20 =
            0,
        document.hidden && $$$$31(!0);
    },
    $$$$31 = $$$$0 => {
      if ($$$$1 !== $$$$0 && ($$$$1 = $$$$0, $$$$30(), hB.className = $$$$0 ? "l m" : "l", $$$$29(), $$$$0)) {
        try {
          document.exitFullscreen().catch(() => !1), document.exitPointerLock();
        } catch {}
      }
    },
    $$$$32 = $$$$0 => {
      try {
        $$$$24
        || (($$$$25 = ($$$$24 = new AudioContext()).createBufferSource()).buffer = $$$$2,
          $$$$25.loop = !0,
          $$$$25.start()), hB.requestFullscreen().catch(() => !1);
      } catch {}
      $$$$31(!1), $$$$4 = $$$$0;
    },
    $$$$33 = ($$$$0, $$$$1) => $$$$0.buttons[$$$$1]?.pressed || $$$$0.buttons[$$$$1]?.value > 0 ? 1 : 0;
  oncontextmenu = () => !1,
    onclick = $$$$0 => {
      if (!$$$$1 && ($$$$0.target === hC && ($$$$3 = 1), $$$$4)) {
        try {
          hC.requestPointerLock();
        } catch {}
      }
    },
    b5.onclick = () => $$$$31(!0),
    b2.onclick = () => $$$$32(1),
    b1.onclick = () => $$$$32(),
    b4.onclick = () => {
      $$$$26 = !$$$$26, $$$$29();
    },
    b3.onclick = () => {
      confirm("Restart game?") && $$$$74();
    },
    onkeyup = onkeydown = $$$$0 => {
      let $$$$1;
      $$$$0.repeat || ($$$$1 = {
        "KeyE": 0,
        "Space": 0,
        "Enter": 0,
        "Escape": 1,
        "KeyA": 2,
        "ArrowLeft": 2,
        "KeyD": 3,
        "ArrowRight": 3,
        "KeyW": 4,
        "ArrowUp": 4,
        "KeyS": 5,
        "ArrowDown": 5,
      }[$$$$0.code],
        ($$$$27[$$$$1] = !!$$$$0.type[5]) && (0 === $$$$1 && ($$$$3 = 1), 1 === $$$$1) && $$$$31(!0));
    },
    onmousemove = $$$$0 => {
      $$$$4 && ($$$$28.y += .1 * $$$$0.movementX || 0, $$$$28.x += .1 * $$$$0.movementY || 0);
    },
    hC.ontouchstart = $$$$2 => {
      if (!$$$$1) {
        for (
          var {
            identifier: $$$$3,
            pageX: $$$$5,
            pageY: $$$$6,
          } of $$$$2.changedTouches
        ) {
          $$$$4 && $$$$5 > hC.clientWidth / 2
            ? void 0 === $$$$13
              && ($$$$14 = 0, $$$$11 = $$$$5, $$$$12 = $$$$6, $$$$13 = $$$$3, $$$$17 = $$$$28.x, $$$$15 = $$$$28.y)
            : void 0 === $$$$9 && ($$$$10 = 0, $$$$7 = $$$$5, $$$$8 = $$$$6, $$$$9 = $$$$3);
        }
        $$$$0 = $$$$18;
      }
    },
    hC.ontouchmove = $$$$0 => {
      var $$$$2, $$$$3, $$$$4, $$$$5;
      if (!$$$$1) {
        for (
          var {
            identifier: $$$$6,
            pageX: $$$$16,
            pageY: $$$$18,
          } of $$$$0.changedTouches
        ) {
          $$$$13 === $$$$6
          && ($$$$14 = 1, $$$$28.x = $$$$17 + ($$$$18 - $$$$12) / 2, $$$$28.y = $$$$15 + ($$$$16 - $$$$11) / 2),
            $$$$9 === $$$$6
            && ($$$$2 = $$$$42($$$$6 = ($$$$7 - $$$$16) / 19),
              $$$$4 = $$$$42($$$$3 = ($$$$8 - $$$$18) / 19),
              ($$$$5 = $$$$44($$$$2, $$$$4) > .3) && ($$$$10 = 1),
              $$$$21 = $$$$46($$$$6, -1) * ($$$$5 && $$$$2 > .2),
              $$$$22 = $$$$46($$$$3, -1) * ($$$$5 && $$$$4 > .2),
              $$$$2 > 2 && ($$$$7 = 19 * (0 > $$$$6 ? -1 : 1) + $$$$16),
              $$$$4 > 2)
            && ($$$$8 = 19 * (0 > $$$$3 ? -1 : 1) + $$$$18);
        }
      }
    },
    hC.ontouchend = $$$$1 => {
      let $$$$2;
      document.activeElement === hB && $$$$1.preventDefault();
      for (const $$$$0 of $$$$1.changedTouches) {$$$$0.identifier === $$$$13
          ? ($$$$13 = void 0, $$$$14 || ($$$$2 = 1), $$$$14 = 0)
          : $$$$0.identifier === $$$$9
          ? ($$$$9 = void 0, $$$$22 = $$$$21 = 0, $$$$10 || ($$$$2 = 1), $$$$10 = 0)
          : $$$$2 = 1;}
      $$$$1.target === hC && $$$$2 && $$$$0 && ($$$$1 = $$$$18 - $$$$0) > .02 && .7 > $$$$1 && ($$$$3 = 1);
    },
    $$$$71 = () => {
      $$$$19 = $$$$22 + ($$$$27[4] ? 1 : 0) - ($$$$27[5] ? 1 : 0),
        $$$$20 = $$$$21 + ($$$$27[2] ? 1 : 0) - ($$$$27[3] ? 1 : 0);
      let $$$$0 = navigator.getGamepads()[0];
      $$$$0
        && ($$$$4
          && ($$$$28.x += 80 * $$$$16 * $$$$45($$$$0.axes[3], .3), $$$$28.y += 80 * $$$$16 * $$$$45($$$$0.axes[2], .3)),
          $$$$19 += $$$$33($$$$0, 12) - $$$$33($$$$0, 13) - $$$$45($$$$0.axes[1], .2),
          $$$$20 += $$$$33($$$$0, 14) - $$$$33($$$$0, 15) - $$$$45($$$$0.axes[0], .2),
          $$$$33($$$$0, 9) && $$$$31(!0),
          ($$$$0 = $$$$33($$$$0, 3) || $$$$33($$$$0, 2) || $$$$33($$$$0, 1) || $$$$33($$$$0, 0)) && !$$$$23
          && ($$$$3 = 1),
          $$$$23 = $$$$0);
    },
    document.onpointerlockchange = () => {
      $$$$4 = !!document.pointerLockElement;
    },
    document.onvisibilitychange = onblur = onresize = $$$$30,
    $$$$31(!0);
};
const $$$$72 = ($$$$0, $$$$1) => {
    1 / 0 > $$$$25 && ($$$$25 = $$$$17 + $$$$1, h4.innerHTML = $$$$0);
  },
  $$$$73 = () => {
    h3.innerHTML = "Souls: "
      + [
        0,
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX",
        "X",
        "XI",
        "XII",
        "XIII",
      ][$$$$7 = $$$$32.reduce(($$$$0, $$$$1) => $$$$1.o + $$$$0, 0)] + " / XIII";
  },
  $$$$74 = () => {
    localStorage["Dante-22"] = "", location.reload();
  },
  $$$$75 = () => {
    localStorage["Dante-22"] = JSON.stringify([
      $$$$31.map($$$$0 => $$$$0.o),
      $$$$32.map($$$$0 => $$$$0.o),
      $$$$24,
      $$$$10,
      $$$$17,
    ]);
  },
  $$$$76 = $$$$0 => {
    $$$$24 = $$$$0, $$$$72("* click *", 1), $$$$75();
  },
  $$$$77 = () => ($$$$36(), $$$$50($$$$29.x - $$$$36.x, $$$$29.y - $$$$36.y, $$$$29.z - $$$$36.z)),
  $$$$78 = () => {
    $$$$30.push({
      p: $$$$11 = new DOMMatrix(),
      i: $$$$12 = [],
    });
  },
  $$$$79 = ($$$$0, $$$$1 = $$$$84, $$$$2) => $$$$12.push($$$$41($$$$0, $$$$1, $$$$2)),
  $$$$80 = ($$$$0, ...$$$$1) => {
    let $$$$2,
      $$$$3,
      $$$$4,
      $$$$5,
      $$$$6 = 0,
      $$$$8 = 0,
      $$$$9 = 1,
      $$$$10 = -1;
    const $$$$12 = () => {
      if ($$$$12.o) {
        $$$$35($$$$30[35].p).translateSelf(
          $$$$20 % 4 * 1.2 - 1.7 + /* @__PURE__ */ Math.sin($$$$17 + $$$$20) / 7,
          -2,
          1.7 * ($$$$20 >> 2) - 5.5 + $$$$42($$$$20 % 4 - 2) + /* @__PURE__ */ Math.cos($$$$17 / 1.5 + $$$$20) / 6,
        );
      } else {
        let $$$$20,
          $$$$22 = 1,
          $$$$23 = 1 / 0;
        for (let $$$$0 = 0; $$$$1.length > $$$$0; $$$$0++) {
          var $$$$11 = $$$$1[$$$$0],
            $$$$21 = $$$$50($$$$14 - $$$$11[0], $$$$15 - $$$$11[1]);
          $$$$22 = $$$$43($$$$22, $$$$21 / $$$$11[2]),
            0 > ($$$$21 -= $$$$11[2]) ? $$$$20 = 1 : $$$$23 > $$$$21 && ($$$$23 = $$$$21, $$$$13 = $$$$11);
        }
        let $$$$24, $$$$25, $$$$27, $$$$28;
        $$$$20
        || ($$$$24 = $$$$14 - $$$$13[0],
          $$$$25 = $$$$15 - $$$$13[1],
          $$$$27 = $$$$50($$$$24, $$$$25),
          $$$$28 = /* @__PURE__ */ Math.atan2(-$$$$25, $$$$24),
          $$$$9
          && ($$$$5 = $$$$46($$$$5 / (1 + /* @__PURE__ */ Math.random())),
            $$$$8 = /* @__PURE__ */ (Math.random() - .5) * Math.PI / 2),
          $$$$28 += $$$$8,
          $$$$10 = -/* @__PURE__ */ Math.cos($$$$28),
          $$$$6 = /* @__PURE__ */ Math.sin($$$$28),
          $$$$27 > .1
          && ($$$$27 = $$$$43($$$$27, $$$$13[2]) / $$$$27,
            $$$$14 = $$$$24 * $$$$27 + $$$$13[0],
            $$$$15 = $$$$25 * $$$$27 + $$$$13[1])),
          $$$$9 = $$$$20,
          $$$$5 = $$$$67($$$$5, 3 + 6 * (1 - $$$$22), 3 + $$$$22),
          $$$$16 = $$$$67($$$$16, $$$$14 = $$$$67($$$$14, $$$$14 + $$$$10, $$$$5), $$$$5),
          $$$$18 = $$$$67($$$$18, $$$$15 = $$$$67($$$$15, $$$$15 + $$$$6, $$$$5), $$$$5),
          $$$$2 = $$$$48($$$$2, /* @__PURE__ */ Math.atan2($$$$16 - $$$$3, $$$$18 - $$$$4) / $$$$26 - 180, $$$$66(3)),
          $$$$35($$$$19).multiplySelf($$$$0).translateSelf($$$$3 = $$$$16, 0, $$$$4 = $$$$18).rotateSelf(
            0,
            $$$$2,
            7 * /* @__PURE__ */ Math.sin(1.7 * $$$$17),
          ),
          1.6 > $$$$77()
          && ($$$$12.o = 1,
            $$$$72(
              [
                ,
                "Mark Zuckemberg<br>made the world worse",
                "Giorgia Meloni<br>fascist",
                "Andrzej Mazur<br>for the js13k competition",
                "Donald Trump<br>lies",
                "Kim Jong-un<br>Dictator, liked pineapple on pizza",
                "Maxime Euziere<br>forced me to finish this game",
                "She traded NFTs apes",
                ,
                "Vladimir Putin<br>evil war",
                "He was not a good person",
                ,
                "Salvatore Previti<br>made this evil game<br><br>Done. Go back to the boat",
              ][$$$$7] || "Catched a \"crypto bro\".<br>\"Web3\" is all scam, lies and grift",
              6,
            ),
            $$$$73(),
            $$$$75());
      }
      $$$$34($$$$85, $$$$88, 28 + $$$$20);
    };
    let $$$$13 = $$$$1[0],
      [$$$$14, $$$$15] = $$$$13,
      [$$$$16, $$$$18] = $$$$13;
    const $$$$19 = $$$$11,
      $$$$20 = $$$$32.length;
    $$$$32.push($$$$12);
  },
  $$$$81 = ($$$$0, $$$$1 = 0, $$$$2 = 0) => {
    const $$$$3 = $$$$35($$$$84, $$$$30[++$$$$13].p);
    return $$$$3.m41 = $$$$0, $$$$3.m42 = $$$$1, $$$$3.m43 = $$$$2, $$$$3;
  },
  $$$$82 = NO_INLINE(() => {
    let $$$$0,
      $$$$1,
      $$$$2,
      $$$$3,
      $$$$5,
      $$$$6,
      $$$$7,
      $$$$8,
      $$$$10,
      $$$$11,
      $$$$12,
      $$$$13,
      $$$$18,
      $$$$25,
      $$$$27,
      $$$$32,
      $$$$33 = 0,
      $$$$34 = 1,
      $$$$37 = 2,
      $$$$38 = 15;
    const $$$$39 = () => $$$$35(($$$$37 ? $$$$31[$$$$24] : $$$$30[28 !== $$$$33 ? $$$$33 : 0]).p),
      $$$$40 = $$$$0 => {
        $$$$37 > 1
          ? ($$$$35($$$$31[$$$$24].p).multiplySelf($$$$31[$$$$24].q), $$$$36(0, $$$$9 > .9 ? 15 : 1, -2.4))
          : ($$$$39(), $$$$36($$$$25, $$$$27, $$$$32)),
          $$$$0 && ($$$$5 = ($$$$36.x - $$$$29.x) / $$$$16, $$$$6 = ($$$$36.z - $$$$29.z) / $$$$16),
          $$$$29.x = $$$$36.x,
          $$$$29.y = $$$$36.y,
          $$$$29.z = $$$$36.z;
      },
      $$$$41 = NO_INLINE(($$$$0, $$$$1, $$$$2) => {
        $$$$39().invertSelf(),
          $$$$36($$$$0, $$$$1, $$$$2, 0),
          $$$$25 += $$$$36.x,
          $$$$27 += $$$$1,
          $$$$32 += $$$$36.z,
          $$$$40();
      }),
      $$$$51 = NO_INLINE(() => {
        let $$$$0 = 0,
          $$$$1 = 0,
          $$$$2 = 0,
          $$$$3 = 0,
          $$$$4 = 0,
          $$$$5 = 0,
          $$$$6 = -1;
        for (let $$$$4 = 0; 36 > $$$$4; ++$$$$4) {
          for (let $$$$5 = 96, $$$$8 = 512 * $$$$4; 416 > $$$$5; $$$$5 += 4) {
            for (let $$$$10 = 0; 2 > $$$$10; ++$$$$10) {
              var $$$$7 = $$$$87[$$$$8 + $$$$5 + $$$$10],
                $$$$9 = $$$$87[$$$$8 + $$$$5 + $$$$10 + 2];
              $$$$7 > $$$$3 && ($$$$3 = $$$$7),
                $$$$7 + $$$$9 && (0 > $$$$6 || $$$$6 === $$$$4)
                && ($$$$6 = $$$$4, $$$$9 === $$$$11 ? ++$$$$0 : $$$$1 && $$$$1 !== $$$$9 || ($$$$1 = $$$$9, ++$$$$2));
            }
          }
        }
        $$$$11 = 0 > $$$$6 ? 0 : $$$$2 > 2 * $$$$0 ? $$$$1 : $$$$11;
        for (let $$$$0 = 36, $$$$1 = 18432; 128 > $$$$0; ++$$$$0) {
          let $$$$0 = 0,
            $$$$2 = 0,
            $$$$3 = 0,
            $$$$6 = 0;
          for (let $$$$4 = 0; 128 > $$$$4; ++$$$$4) {
            let $$$$5 = $$$$87[$$$$1++];
            64 > $$$$4 ? $$$$5 > $$$$0 && ($$$$0 = $$$$5) : $$$$5 > $$$$2 && ($$$$2 = $$$$5),
              $$$$5 = $$$$87[$$$$1++],
              $$$$4 > 64 ? $$$$5 > $$$$0 && ($$$$0 = $$$$5) : $$$$5 > $$$$2 && ($$$$2 = $$$$5),
              ($$$$5 = $$$$87[$$$$1++]) > $$$$3 && ($$$$3 = $$$$5),
              ($$$$5 = $$$$87[$$$$1++]) > $$$$6 && ($$$$6 = $$$$5);
          }
          ($$$$2 -= $$$$0) * $$$$2 > $$$$4 * $$$$4 && ($$$$4 = $$$$2),
            ($$$$6 -= $$$$3) * $$$$6 > $$$$5 * $$$$5 && ($$$$5 = $$$$6);
        }
        $$$$8 = $$$$46(1 - .01 * $$$$44($$$$42($$$$4 *= .7), $$$$42($$$$5)), .3),
          $$$$41($$$$4 / 255, $$$$3 / 255, $$$$5 / 255);
      }),
      $$$$52 = ($$$$0, $$$$1, $$$$2, $$$$3) =>
        $$$$49($$$$0, $$$$1, $$$$34 || ($$$$46($$$$42($$$$1 - $$$$0) ** .5 - $$$$2) + 1 / 7) * $$$$66(1.5 * $$$$3));
    $$$$14 = () => {
      var $$$$9, $$$$14, $$$$24, $$$$53, $$$$54;
      $$$$40($$$$11),
        $$$$90["r9r"](0, 0, 128, 128, 6408, 5121, $$$$87),
        $$$$51(),
        $$$$37 || $$$$11 !== $$$$33
          ? ($$$$33 = $$$$11,
            $$$$39().invertSelf(),
            $$$$36($$$$29.x, $$$$29.y, $$$$29.z),
            $$$$25 = $$$$36.x,
            $$$$27 = $$$$36.y,
            $$$$32 = $$$$36.z,
            $$$$37 &&= $$$$11 ? 0 : 1)
          : (-20 > $$$$29.x || 109 > $$$$29.z ? -25 : -9) > $$$$29.y && ($$$$37 = 2),
        1 === $$$$11 && ($$$$31[15].o = -15 > $$$$29.x && 0 > $$$$29.z ? 1 : 0),
        $$$$3 = $$$$67($$$$3, $$$$15 * ($$$$11 > 30 && 35 > $$$$11), 2),
        $$$$12 = $$$$52($$$$12, $$$$29.x, .5, 1),
        $$$$13 = $$$$52(
          $$$$13,
          $$$$10 = $$$$49($$$$67($$$$10, $$$$29.y, 2), $$$$29.y, $$$$37 || 8 * $$$$42($$$$10 - $$$$29.y)),
          2,
          1,
        ),
        $$$$18 = $$$$52($$$$18, $$$$29.z, .5, 1),
        $$$$4
          ? ($$$$9 = $$$$37 + $$$$66(18),
            $$$$21 = $$$$49($$$$21, $$$$29.x, $$$$9),
            $$$$23 = $$$$49($$$$23, $$$$29.z, $$$$9),
            $$$$22 = $$$$49($$$$22, 1.6 + $$$$10, $$$$9),
            $$$$28.y = $$$$47($$$$28.y))
          : ($$$$21 = $$$$52($$$$21, $$$$12, 1, 2 + $$$$3),
            $$$$23 = $$$$52($$$$23, $$$$18 + -18 + 5 * $$$$3, 1, 2 + $$$$3),
            $$$$22 = $$$$52($$$$22, $$$$44($$$$13 + $$$$46((-60 - $$$$29.z) / 8, 0, 20) + 13 + 9 * $$$$3, 6), 4, 2),
            $$$$9 = $$$$43(-6, -$$$$42($$$$18 - $$$$23)),
            $$$$28.y = $$$$48(
              $$$$28.y,
              90 - $$$$47(/* @__PURE__ */ Math.atan2($$$$9, $$$$14 = $$$$12 - $$$$21) / $$$$26),
              $$$$34 + $$$$66(10),
            ),
            $$$$28.x = $$$$48(
              $$$$28.x,
              90 - /* @__PURE__ */ Math.atan2($$$$50($$$$9, $$$$14), $$$$22 - $$$$13) / $$$$26,
              $$$$34 + $$$$66(10),
            )),
        $$$$28.x = $$$$46($$$$28.x, -87, 87),
        $$$$34 = 0;
      $$$$9 = $$$$46($$$$19, -1),
        $$$$14 = $$$$46($$$$20, -1),
        $$$$24 = $$$$45($$$$50($$$$9, $$$$14) ** .5, .1),
        $$$$53 = /* @__PURE__ */ Math.atan2($$$$9, $$$$14);
      $$$$24 && ($$$$0 = 90 - $$$$53 / $$$$26),
        $$$$2 = $$$$67($$$$2, $$$$24, 10),
        $$$$81($$$$29.x, .06 * $$$$8 * $$$$2 * /* @__PURE__ */ Math.cos(18.2 * $$$$17) + $$$$10, $$$$29.z).rotateSelf(
          0,
          $$$$1 = $$$$48($$$$1, $$$$0, $$$$66(8)),
        );
      for (let $$$$0 = 0; 2 > $$$$0; ++$$$$0) {
        $$$$54 = 9.1 * $$$$17 - Math.PI * $$$$0;
        $$$$35($$$$30[53].p, $$$$81(0)).translateSelf(
          0,
          $$$$2 * $$$$46(.45 * /* @__PURE__ */ Math.sin($$$$54 - Math.PI / 2)),
        ).rotateSelf($$$$2 * /* @__PURE__ */ Math.sin($$$$54) * .25 / $$$$26, 0);
      }
      $$$$38 = $$$$11 ? 5 : $$$$67($$$$38, $$$$37 ? 13 : 19 - 2 * $$$$43(0, $$$$29.y + 10), 2.2),
        $$$$5 = $$$$11 || $$$$37 ? 0 : $$$$67($$$$5, 0, 3),
        $$$$6 = $$$$11 || $$$$37 ? 0 : $$$$67($$$$6, 0, 3),
        $$$$9 = ($$$$7 = $$$$37 ? 0 : $$$$67($$$$7, $$$$11 ? 7 * $$$$46(2 * $$$$24) * $$$$8 : 0, $$$$11 ? 9 : 1))
          * $$$$24 * $$$$42($$$$9) * /* @__PURE__ */ Math.sin($$$$53),
        $$$$14 = $$$$7 * $$$$24 * $$$$42($$$$14) * /* @__PURE__ */ Math.cos($$$$53),
        $$$$41(
          $$$$16
            * ($$$$5
              + (/* @__PURE__ */ Math.cos($$$$53 = $$$$4 ? (180 + $$$$28.y) * $$$$26 : 0) * $$$$14
                - /* @__PURE__ */ Math.sin($$$$53) * $$$$9)),
          -$$$$16 * $$$$38,
          $$$$16 * ($$$$6 + (/* @__PURE__ */ Math.sin($$$$53) * $$$$14 + /* @__PURE__ */ Math.cos($$$$53) * $$$$9)),
        );
    };
  });
let $$$$83 = () => {
  let $$$$0, $$$$1, $$$$2;
  const $$$$4 = ($$$$0, $$$$1) => ($$$$0 = $$$$46($$$$0), $$$$49($$$$0, 1 - $$$$0, $$$$1));
  ($$$$83 = () => {
    const $$$$5 = ($$$$0, $$$$1, $$$$2) =>
      $$$$81($$$$0 + /* @__PURE__ */ Math.sin($$$$17 + 2) / 5, $$$$1 + /* @__PURE__ */ Math.sin(.8 * $$$$17) / 5, $$$$2)
        .rotateSelf(
          2 * /* @__PURE__ */ Math.sin($$$$17),
          /* @__PURE__ */ Math.sin(.7 * $$$$17),
          /* @__PURE__ */ Math.sin(.9 * $$$$17),
        );
    $$$$13 = 1,
      $$$$2 = $$$$49($$$$67($$$$2, 0, 1), $$$$47($$$$2 + 60 * $$$$16), $$$$31[2].t - $$$$31[3].u),
      $$$$15 = $$$$4($$$$31[13].t, $$$$31[8].t),
      $$$$0 = $$$$49($$$$67($$$$0, 0, 5), $$$$47($$$$0 + 56 * $$$$16), $$$$15),
      $$$$1 = $$$$49($$$$67($$$$1, 0, 4), $$$$47($$$$1 + 48 * $$$$16), $$$$15),
      $$$$81(0, 270 * ($$$$31[1].t - 1) + (2 + 5 * /* @__PURE__ */ Math.cos(1.5 * $$$$17)) * (1 - $$$$31[10].t));
    let $$$$6 = $$$$43(1 - $$$$31[11].u, $$$$31[10].u);
    $$$$81($$$$6 * /* @__PURE__ */ Math.sin(.6 * $$$$17 + 1.2) * 12, 0, 35),
      $$$$81($$$$6 * /* @__PURE__ */ Math.sin(.6 * $$$$17 - 1.2) * 8.2, 0, 55),
      $$$$81($$$$6 * /* @__PURE__ */ Math.sin(.6 * $$$$17) * 12, 0, 45),
      $$$$81(9.8 * (1 - $$$$6)),
      $$$$6 = $$$$46(1 - 5 * $$$$6) * $$$$4($$$$31[11].t, $$$$31[2].t),
      $$$$81(0, $$$$6 * /* @__PURE__ */ Math.sin(1.35 * $$$$17) * 4),
      $$$$81(0, 0, $$$$6 * /* @__PURE__ */ Math.sin(.9 * $$$$17) * 8),
      $$$$81(0, -6.5 * $$$$31[11].u),
      $$$$6 = $$$$4($$$$31[4].u, $$$$31[3].u),
      $$$$81(0, $$$$6 * /* @__PURE__ */ Math.sin($$$$17) * 5 + 3.5 * (1 - $$$$44($$$$31[3].t, $$$$31[4].t))),
      $$$$81(
        0,
        $$$$6 * /* @__PURE__ */ Math.sin($$$$17 + 3) * 6,
        $$$$6 * /* @__PURE__ */ Math.sin(.6 * $$$$17 + 1) * 6,
      ),
      $$$$81(0, -7.3 * $$$$31[4].u),
      $$$$6 = $$$$4($$$$31[6].t, $$$$31[7].t),
      $$$$81(0, -2, 10 - 8.5 * $$$$6 * $$$$42(/* @__PURE__ */ Math.sin(1.1 * $$$$17))),
      $$$$81(0, -2, 10 - 8.5 * $$$$6 * $$$$42(/* @__PURE__ */ Math.sin(2.1 * $$$$17))),
      $$$$81(
        0,
        -2,
        10 - 8.5 * $$$$44($$$$6 * $$$$42(/* @__PURE__ */ Math.sin(1.5 * $$$$17)), (1 - $$$$31[6].t) * (1 - $$$$6)),
      );
    const $$$$11 = $$$$4($$$$31[5].u, $$$$31[13].u);
    for (let $$$$0 = 0; 4 > $$$$0; $$$$0++) {
      $$$$81(
        ($$$$0 > 2 ? 2 * (1 - $$$$11) + $$$$11 : 0) - 100,
        $$$$11 * /* @__PURE__ */ Math.sin(1.3 * $$$$17 + 1.7 * $$$$0) * (3 + $$$$0 / 3) + .7,
        115 - 7 * (1 - $$$$31[5].u) * (1 - $$$$31[13].u) * (1 & $$$$0 ? -1 : 1)
          + $$$$44(.05, $$$$11) * /* @__PURE__ */ Math.cos(1.3 * $$$$17 + 7 * $$$$0) * (4 - 2 * (1 - $$$$0 / 3)),
      );
    }
    $$$$6 = $$$$4($$$$31[8].u, $$$$31[9].u);
    for (let $$$$0 = 0; 3 > $$$$0; ++$$$$0) {
      $$$$81(
        0,
        $$$$6 * /* @__PURE__ */ Math.sin(1.5 * $$$$17 + 1.5 * $$$$0) * 4
          + ($$$$0 ? 0 : 3 * (1 - $$$$31[8].u) * (1 - $$$$31[9].u)),
      );
    }
    $$$$6 = $$$$4($$$$4(($$$$31[9].t + $$$$31[9].u) / 2, $$$$31[8].u), ($$$$31[12].t + $$$$31[12].u) / 2),
      $$$$81(0, 16 * $$$$6, 95 + 8.5 * $$$$46(2 * $$$$6 - 1)),
      $$$$81(0, -4.7 * $$$$31[0].t, -15),
      $$$$81(0, -4.7 * $$$$31[10].t, 15),
      $$$$81(-99.7, -1.9 - 5.5 * $$$$31[3].t, 63.5),
      $$$$81(-100, .6 - 5.8 * $$$$31[13].t, 96.5),
      $$$$81(-75, 3 * (1 - $$$$31[2].u) * (1 - $$$$31[3].t), 55).rotateSelf(180 * (1 - $$$$31[2].u) + $$$$2, 0),
      $$$$81(
        2.5 * (1 - $$$$11) - 139.7,
        -3 * (1 - $$$$31[5].t) - $$$$11 * /* @__PURE__ */ Math.sin(.8 * $$$$17) - 1.8,
        93.5,
      ).rotateSelf(/* @__PURE__ */ Math.cos(1.3 * $$$$17) * (3 + 3 * $$$$11), 0),
      $$$$81(-2 * /* @__PURE__ */ Math.sin($$$$17)).rotateSelf(25 * /* @__PURE__ */ Math.sin($$$$17)),
      $$$$81(-81, .6, 106).rotateSelf(0, 40 + $$$$0),
      $$$$81(-65.8, .8, 106).rotateSelf(0, $$$$1),
      $$$$81(-50.7, .8, 106).rotateSelf(0, 180 - $$$$1),
      $$$$81(-50.7, .8, 91).rotateSelf(0, 270 + $$$$1),
      $$$$5(-12, 4.2, 40 * $$$$9 - 66),
      $$$$5(-123, 1.4, 55 - 65 * $$$$10);
    for (let $$$$0 = 0; 16 > $$$$0; ++$$$$0) {
      var $$$$12 = $$$$31[$$$$0],
        $$$$18 = $$$$12.t = $$$$67($$$$12.t, $$$$12.o, 4);
      $$$$12.u = $$$$67($$$$12.u, $$$$12.o, 1),
        $$$$35($$$$35($$$$12.p).multiplySelf($$$$12.q), $$$$81(0)).rotateSelf(50 * $$$$18 - 25, 0).translateSelf(0, 1)
          .m44 = $$$$18,
        $$$$3 && 3 > $$$$77()
        && ($$$$12.o ? $$$$18 > .7 && ($$$$12.o = 0, $$$$76($$$$0)) : .3 > $$$$18 && ($$$$12.o = 1, $$$$76($$$$0))),
        14 === $$$$0 && $$$$12.o && $$$$18 > .8
        && ($$$$12.o = 0,
          13 > $$$$7
            ? $$$$72("Not leaving now, there are souls to catch!", 3)
            : $$$$8 || ($$$$8 = 1, $$$$72("Well done. They will be punished.<br>Thanks for playing", 1 / 0))),
        13 > $$$$0 && $$$$32[$$$$0]();
    }
    $$$$14();
    for (let $$$$0 = 0; 28 > $$$$0; ++$$$$0) $$$$34($$$$30[28 + $$$$0].p, $$$$88, $$$$0);
    for (let $$$$0, $$$$1 = 0, $$$$2 = 656; 26 > $$$$1; ++$$$$1, ++$$$$2) {
      $$$$0 = $$$$30[2 + $$$$1].p,
        $$$$88[$$$$2++] = $$$$0.m41,
        $$$$88[$$$$2++] = $$$$0.m42,
        $$$$88[$$$$2++] = $$$$0.m43;
    }
  })();
};
const $$$$84 = new DOMMatrix(),
  $$$$85 = new DOMMatrix(),
  $$$$86 = new Float32Array(16),
  $$$$87 = new Uint8Array(65536),
  $$$$88 =
    (document.body.innerHTML +=
      "<canvas id=hD height=128 width=128></canvas><canvas id=hC></canvas><h4 id=h4>loading</h4><b id=b5>☰</b><h3 id=h3></h3><main><nav><h2>DANTE</h2>Lucifer: <i>\"Damn. Infernal delivery service failed again. A delivery of evil souls fell in an area under construction. Dante, take them where they belong, to the 8th circle.\"</i><ul><li id=b1>Play</li><li id=b2>Play first person</li><li id=b3>Restart</li><li id=b4></li></ul><p>move WASD/arrows, levers E/click, menu Esc</p><p><a href=https://github.com/SalvatorePreviti/js13k-2022 target=_blank>© 2022 Salvatore Previti</a> - <a href=https://twitter.com/ryanmalm target=_blank>music Ryan Malm</a></p></nav></main><style>*{color:#fda;font-weight:100;overscroll-behavior:contain;touch-action:none;user-select:none}body,html{background:#000;font-family:Times New Roman,serif;font-size:max(min(3.8vw,3.8vh),15px);margin:0;text-shadow:4px 4px 2px #000,-2px -2px 8px #000}p{font-size:.7em}body>*{position:absolute}h2{color:#f61;margin:0 0 .7em}.m main,h4{right:0;top:0}h3,h4{pointer-events:none}h4{left:0;text-align:center}h3{bottom:0;right:5%;text-align:right}.m main{align-items:center;bottom:0;display:flex;justify-content:center;min-width:70%}nav{background:#00000080;border-radius:1em;max-width:max(780px,50vw);padding:1em}#b5,h3{padding:10px}a,li{border-bottom:3px solid #0000;cursor:pointer;margin-bottom:.5em;text-decoration:none}a:hover,h2,li:hover{border-bottom:3px solid}#hD,.m h4,main{display:none}",
      new Float32Array(760)),
  $$$$89 = hC.getContext("webgl2", {
    powerPreference: "high-performance",
  }),
  $$$$90 = hD.getContext("webgl2", {
    powerPreference: "high-performance",
    preserveDrawingBuffer: !0,
    desynchronized: !0,
    antialias: !1,
  });
for (const $$$$0 in $$$$90) {
  [$$$$89, $$$$90].map($$$$1 =>
    $$$$1[
      $$$$0[0] + [...$$$$0].reduce(($$$$0, $$$$1, $$$$2) => ($$$$0 * $$$$2 + $$$$1.charCodeAt(0)) % 434, 0).toString(36)
    ] = $$$$1[$$$$0]
  );
}
$$$$68(() => {
  let $$$$2 = 0;
  const $$$$12 = () => {
      if (2 == ++$$$$2) {
        const $$$$2 = [],
          $$$$7 = ($$$$0, $$$$2, $$$$3) => {
            $$$$1
              ? hC.width > 1100 && $$$$0["d97"](4, $$$$30[55].v - $$$$30[53].A, 5123, 2 * $$$$30[53].A)
              : ($$$$0["das"](4, $$$$30[$$$$2].v - $$$$30[$$$$2].A, 5123, 2 * $$$$30[$$$$2].A, $$$$32.length),
                $$$$0["d97"](4, $$$$30[$$$$3 ? 53 : 56].A - 3, 5123, 6));
          },
          $$$$11 = (
            $$$$0,
            $$$$1,
            $$$$2 =
              "#version 300 es\nlayout(location=0)in vec4 f;layout(location=1)in vec3 e;layout(location=2)in vec4 d;out vec4 o,m,n,l;uniform mat4 b,a;uniform vec4 j[190];void main(){mat4 r=mat4(1);lowp int i=int(f.w);if(l=d,m=vec4(f.xyz,1),f.w>1.&&f.w<28.)m+=(r[3]=j[i+162]);else if(f.w!=1.){if(i=(i<1?gl_InstanceID-i:i-28)*4,r[0]=j[i],r[1]=j[i+1],r[2]=j[i+2],r[3]=j[i+3],l.w==0.)l=mix(vec4(1,.5,.2,0),l,r[3][3]);r[3][3]=1.,m=r*m;}gl_Position=a*b*m,m.w=f.w,o=r*vec4(e,0),n=f;}",
          ) => {
            const $$$$3 = {},
              $$$$4 = (
                $$$$1,
                $$$$2,
              ) => ($$$$2 = $$$$0["c6x"]($$$$2), $$$$0["s3c"]($$$$2, $$$$1), $$$$0["c6a"]($$$$2), $$$$2),
              $$$$5 = $$$$0["c1h"]();
            return $$$$0["abz"]($$$$5, $$$$4($$$$2, 35633)),
              $$$$0["abz"]($$$$5, $$$$4($$$$1, 35632)),
              $$$$0["l8l"]($$$$5),
              $$$$1 => $$$$1 ? $$$$3[$$$$1] || ($$$$3[$$$$1] = $$$$0["gan"]($$$$5, $$$$1)) : $$$$0["u7y"]($$$$5);
          },
          $$$$12 = $$$$2 => {
            const $$$$5 = ($$$$2 - ($$$$0 || $$$$2)) / 1e3;
            $$$$18 += $$$$5,
              $$$$17 += $$$$16 = $$$$1 ? 0 : $$$$43(.055, $$$$5),
              $$$$0 = $$$$2,
              requestAnimationFrame($$$$12),
              $$$$16 > 0
              && ($$$$71(),
                $$$$10 = $$$$67($$$$10, $$$$31[15].u, .2 + .3 * $$$$42(2 * $$$$31[15].u - 1)),
                $$$$9 = $$$$8 ? ($$$$4 = 0, $$$$67($$$$9, -9, .015)) : $$$$67($$$$9, $$$$46($$$$17 / 3), 1),
                $$$$25 && $$$$17 > $$$$25 && ($$$$25 = 0, h4.innerHTML = ""),
                $$$$83(),
                $$$$90["u3a"]($$$$26("j"), $$$$88),
                $$$$90["cbf"](!0, !0, !0, !0),
                $$$$90["c4s"](16640),
                $$$$90["cbf"](!0, !1, !0, !1),
                $$$$90["uae"](
                  $$$$26("b"),
                  !1,
                  $$$$34($$$$35().rotateSelf(0, 180).invertSelf().translateSelf(-$$$$29.x, -$$$$29.y, .3 - $$$$29.z)),
                ),
                $$$$7($$$$90, 56, 1),
                $$$$90["c4s"](256),
                $$$$90["cbf"](!1, !0, !1, !0),
                $$$$90["uae"]($$$$26("b"), !1, $$$$34($$$$35().translateSelf(-$$$$29.x, -$$$$29.y, -$$$$29.z - .3))),
                $$$$7($$$$90, 56, 1),
                $$$$90["f1s"](),
                $$$$3 = 0),
              $$$$24(),
              $$$$89["u3a"]($$$$24("j"), $$$$88),
              $$$$89["b6o"](36160, $$$$20),
              $$$$89["v5y"](0, 0, 2048, 2048),
              $$$$89["ubh"]($$$$24("g"), 4),
              $$$$89["ubh"]($$$$24("h"), 4),
              $$$$89["uae"]($$$$24("a"), !1, $$$$34($$$$84));
            let $$$$11 = $$$$21,
              $$$$13 = $$$$22,
              $$$$14 = $$$$23;
            $$$$1
              ? ($$$$35().rotateSelf(0, 40 * /* @__PURE__ */ Math.sin($$$$18) - 80, -8),
                $$$$34($$$$85, $$$$88, 25),
                $$$$34($$$$85, $$$$88, 26),
                $$$$34($$$$85, $$$$88, 27),
                $$$$35($$$$6).invertSelf(),
                $$$$36(3.6, 3.5),
                $$$$11 = $$$$36.x,
                $$$$13 = $$$$36.y,
                $$$$14 = 5,
                $$$$35($$$$84, $$$$15).rotateSelf(20, 0).translateSelf(-$$$$11, -$$$$13, -$$$$14).rotateSelf(0, 99))
              : $$$$35($$$$84, $$$$15).rotateSelf(-$$$$28.x, -$$$$28.y).invertSelf().translateSelf(
                -$$$$11,
                -$$$$13,
                -$$$$14,
              ),
              $$$$33(54.7),
              $$$$7($$$$89, 57, $$$$4),
              $$$$37(126),
              $$$$7($$$$89, 57, $$$$4),
              $$$$89["b6o"](36160, null),
              $$$$89["v5y"](0, 0, $$$$89.drawingBufferWidth, $$$$89.drawingBufferHeight),
              $$$$89["c4s"](16640),
              $$$$89["ubh"]($$$$24("g"), 0),
              $$$$89["ubh"]($$$$24("h"), 1),
              $$$$89["ubu"]($$$$24("k"), $$$$11, $$$$13, $$$$14),
              $$$$89["uae"]($$$$24("a"), !1, $$$$34($$$$6)),
              $$$$89["uae"]($$$$24("b"), !1, $$$$34($$$$15)),
              $$$$89["uae"]($$$$24("i"), !1, $$$$19),
              $$$$7($$$$89, 57, $$$$4),
              $$$$27(),
              $$$$89["uae"]($$$$27("b"), !1, $$$$34($$$$15.invertSelf())),
              $$$$89["ubu"]($$$$27("j"), $$$$89.drawingBufferWidth, $$$$89.drawingBufferHeight, $$$$18),
              $$$$89["d97"](4, 3, 5123, 0);
          },
          $$$$14 = new DOMMatrix(),
          $$$$15 = new DOMMatrix(),
          $$$$19 = new Float32Array(32),
          $$$$20 = $$$$89["c5w"](),
          $$$$24 = $$$$11(
            $$$$89,
            "#version 300 es\nprecision highp float;in vec4 o,m,n,l;uniform highp sampler2D q;uniform highp sampler2DShadow g,h;uniform mat4 b,i[2];uniform vec3 k;out vec4 O;void main(){vec4 s=vec4(m.xyz,1);vec3 e=normalize(o.xyz),v=l.w*(texture(q,n.zy*.035)*e.x+texture(q,n.xz*.035)*e.y+texture(q,n.xy*.035)*e.z).xyz;e=normalize(e+v*.5);float a=dot(e,vec3(-.656059,.666369,-.35431468)),t=1.,u=abs((b*s).z);vec4 r=(u<55.?i[0]:i[1])*s;if(r=r/r.w*.5+.5,r.z<1.){t=0.;for(float e=-1.;e<=1.;++e)for(float a=-1.;a<=1.;++a){vec3 x=vec3(r.xy+vec2(e,a)/2048.,r.z-.00017439);t+=u<55.?texture(g,x):texture(h,x);}t/=9.;}vec3 x=l.xyz*(1.-v.x);float c=max(max(abs(e.x),abs(e.z))*.3-e.y,0.)*pow(max(0.,(8.-m.y)/48.),1.6);O=vec4(vec3(c,c*c*.5,0)+vec3(.09,.05,.11)*x+x*(max(0.,a)*.5+x*a*a*vec3(.5,.45,.3))*(t*.75+.25)+vec3(.6,.6,.5)*pow(max(0.,dot(normalize(m.xyz-k),reflect(vec3(-.656059,.666369,-.35431468),e))),35.)*t,1);}",
          ),
          $$$$26 = $$$$11(
            $$$$90,
            "#version 300 es\nprecision highp float;in vec4 o,m;uniform mat4 b;out vec4 O;void main(){vec4 a=b*vec4(vec3(0,1.49,.3*b[0][0])+m.xyz,1);if(O=vec4(0),gl_FragCoord.y>36.){if(a.y>.6&&a.y<3.){float e=abs(gl_FragCoord.x/64.-1.),i=clamp(a.z+.7,0.,1.);O=vec4(vec2(b[0][0]*sign(a.x)*o.x<0.?i*(.7-abs(a.x))*e/.7:0.),vec2(b[0][0]*o.z>0.?i*(1.-e):0.));}}else if(o.y>.45&&a.y<1.){float e=a.y*clamp((a.z+.4)*50.,0.,1.)*clamp((-abs(a.x)+.2)*10.,0.,1.);O=vec4(vec2(e),vec2(e>0.?m.w/255.:0.));}}",
          ),
          $$$$27 = $$$$11(
            $$$$89,
            "#version 300 es\nprecision highp float;uniform mat4 b;uniform vec3 j;uniform highp sampler2D q;out vec4 O;void main(){vec2 t=gl_FragCoord.xy/j.xy*2.-1.;vec3 e=(normalize(b*vec4(t.x*-(j.x/j.y),-t.y,1.73205,0.))).xyz;float o=(-32.-b[3].y)/e.y,i=1.-clamp(abs(o/9999.),0.,1.);if(O=vec4(0,0,0,1),i>.01){if(o>0.){float i=cos(j.z/30.),o=sin(j.z/30.);e.xz*=mat2(i,o,-o,i);vec3 t=abs(e);O.xyz=vec3(dot(vec2(texture(q,e.xy).z,texture(q,e.yz*2.).z),t.zx)*t.y);}else e=b[3].xyz+e*o,O.x=(i*=.9-texture(q,e.xz/150.+vec2(sin(e.z/35.+j.z),cos(e.x/25.+j.z))/80.).y),O.y=i*i*i;}}",
            "#version 300 es\nin vec4 f;void main(){gl_Position=vec4(f.xy,1,1);}",
          ),
          [$$$$33, $$$$37] = $$$$38(2, $$$$0 => {
            const $$$$1 = $$$$89["c25"]();
            return $$$$89["a4v"](33984 + $$$$0),
              $$$$89["b9j"](3553, $$$$1),
              $$$$89["t60"](3553, 0, 33190, 2048, 2048, 0, 6402, 5125, null),
              $$$$89["t2z"](3553, 10241, 9729),
              $$$$89["t2z"](3553, 10240, 9729),
              $$$$89["t2z"](3553, 34893, 515),
              $$$$89["t2z"](3553, 34892, 34894),
              $$$$89["t2z"](3553, 10243, 33071),
              $$$$89["t2z"](3553, 10242, 33071),
              $$$$3 => {
                let $$$$4 = 0,
                  $$$$6 = 0,
                  $$$$7 = 0,
                  $$$$8 = 1 / 0,
                  $$$$9 = 1 / 0,
                  $$$$10 = 1 / 0,
                  $$$$11 = -1 / 0,
                  $$$$12 = -1 / 0,
                  $$$$13 = -1 / 0;
                $$$$89["fas"](36160, 36096, 3553, $$$$1, 0),
                  $$$$89["c4s"](256),
                  $$$$35().scale3dSelf($$$$3 *= 1.1).multiplySelf(
                    $$$$35($$$$5[$$$$0], $$$$14).multiplySelf($$$$15).invertSelf(),
                  );
                for (
                  let $$$$0 = 0, $$$$1 = 0;
                  8 > $$$$0;
                  ++$$$$0
                ) {
                  $$$$36(4 & $$$$0 ? 1 : -1, 2 & $$$$0 ? 1 : -1, 1 & $$$$0 ? 1 : -1),
                    $$$$4 -= $$$$2[$$$$1++] = (0 | $$$$36.x) / ($$$$3 * $$$$36.w),
                    $$$$6 -= $$$$2[$$$$1++] = (0 | $$$$36.y) / ($$$$3 * $$$$36.w),
                    $$$$7 -= $$$$2[$$$$1++] = (0 | $$$$36.z) / ($$$$3 * $$$$36.w);
                }
                $$$$35().rotateSelf(298, 139).translateSelf($$$$4 / 8, $$$$6 / 8, $$$$7 / 8);
                for (
                  let $$$$0 = 0, $$$$1 = 0;
                  8 > $$$$0;
                  ++$$$$0
                ) {
                  $$$$36($$$$2[$$$$1++], $$$$2[$$$$1++], $$$$2[$$$$1++]),
                    $$$$11 = $$$$44($$$$11, $$$$36.x),
                    $$$$12 = $$$$44($$$$12, $$$$36.y),
                    $$$$13 = $$$$44($$$$13, $$$$36.z),
                    $$$$8 = $$$$43($$$$8, $$$$36.x),
                    $$$$9 = $$$$43($$$$9, $$$$36.y),
                    $$$$10 = $$$$43($$$$10, $$$$36.z);
                }
                $$$$7 = 10 + $$$$0,
                  $$$$10 *= 0 > $$$$10 ? $$$$7 : 1 / $$$$7,
                  $$$$13 *= $$$$13 > 0 ? $$$$7 : 1 / $$$$7,
                  $$$$89["uae"](
                    $$$$24("b"),
                    !1,
                    $$$$34(
                      $$$$35($$$$84, $$$$14).scaleSelf(
                        2 / ($$$$11 - $$$$8),
                        2 / ($$$$12 - $$$$9),
                        2 / ($$$$10 - $$$$13),
                      ).translateSelf(-($$$$11 + $$$$8) / 2, -($$$$12 + $$$$9) / 2, ($$$$10 + $$$$13) / 2).multiplySelf(
                        $$$$85,
                      ),
                      $$$$19,
                      $$$$0,
                    ),
                    16 * $$$$0,
                    16,
                  );
              };
          });
        $$$$89["a4v"](33986),
          $$$$89["b9j"](3553, $$$$89["c25"]()),
          $$$$89["t60"](3553, 0, 6408, 1024, 1024, 0, 6408, 5121, $$$$13),
          $$$$89["t2z"](3553, 10241, 9987),
          $$$$89["t2z"](3553, 10240, 9729),
          $$$$89["gbn"](3553),
          $$$$89["b6o"](36160, $$$$20),
          $$$$89["d45"]([0]),
          $$$$89["r9l"](0),
          $$$$24(),
          $$$$89["ubh"]($$$$24("q"), 2),
          $$$$27(),
          $$$$89["ubh"]($$$$27("q"), 2),
          $$$$89["c5t"](0, 0, 0, 1),
          $$$$89["d4n"](515),
          $$$$89["e8z"](2929),
          $$$$89["e8z"](2884),
          $$$$90["e8z"](2929),
          $$$$90["e8z"](2884),
          $$$$90["v5y"](0, 0, 128, 128),
          $$$$26(),
          $$$$90["uae"]($$$$26("a"), !1, $$$$34($$$$70(1e-4, 2, 1.2, .4))),
          $$$$82(),
          $$$$71(),
          requestAnimationFrame($$$$12);
      }
    },
    $$$$13 = new Image();
  $$$$13.onload = $$$$12,
    $$$$13.src = $$$$27,
    $$$$69(() => {
      $$$$68(() => {
        {
          let $$$$0 = 0;
          const $$$$1 = [],
            $$$$2 = [],
            $$$$3 = [],
            $$$$4 = [],
            $$$$5 = new Int32Array(8),
            $$$$6 = /* @__PURE__ */ new Map(),
            $$$$7 = new Int32Array($$$$5.buffer, 0, 5),
            $$$$8 = new Float32Array($$$$5.buffer);
          $$$$30.map(($$$$9, $$$$10) => {
            let $$$$11;
            const $$$$12 = $$$$0 => {
              let {
                  x: $$$$1,
                  y: $$$$9,
                  z: $$$$10,
                } = $$$$11[$$$$0],
                $$$$12 =
                  ($$$$8[0] = $$$$1,
                    $$$$8[1] = $$$$9,
                    $$$$8[2] = $$$$10,
                    $$$$6.get($$$$0 = "" + ($$$$11.g ? $$$$7 : $$$$5)));
              return void 0 !== $$$$12
                ? ($$$$4[$$$$1 = 3 * $$$$12] = ($$$$4[$$$$1++] + $$$$5[5]) / 2,
                  $$$$4[$$$$1] = ($$$$4[$$$$1++] + $$$$5[6]) / 2,
                  $$$$4[$$$$1] = ($$$$4[$$$$1] + $$$$5[7]) / 2)
                : ($$$$6.set($$$$0, $$$$12 = $$$$6.size),
                  $$$$2.push($$$$1, $$$$9, $$$$10, $$$$8[3]),
                  $$$$3.push($$$$5[4]),
                  $$$$4.push($$$$5[5], $$$$5[6], $$$$5[7])),
                $$$$12;
            };
            $$$$8[3] = $$$$10 > 55 ? -28 : $$$$10;
            for (const $$$$0 of $$$$9.i) {
              for ($$$$11 of $$$$0) {
                var {
                  x: $$$$13,
                  y: $$$$14,
                  z: $$$$15,
                } = $$$$56($$$$11);
                $$$$5[4] = 0 | $$$$11.h,
                  $$$$5[5] = 32767 * $$$$13,
                  $$$$5[6] = 32767 * $$$$14,
                  $$$$5[7] = 32767 * $$$$15;
                for (let $$$$0 = 2, $$$$2 = $$$$12(0), $$$$3 = $$$$12(1); $$$$11.length > $$$$0; ++$$$$0) {
                  $$$$1.push($$$$2, $$$$3, $$$$3 = $$$$12($$$$0));
                }
              }
            }
            $$$$9.i = 0, $$$$9.A = $$$$0, $$$$9.v = $$$$0 = $$$$1.length;
          }),
            [$$$$89, $$$$90].map($$$$0 => {
              $$$$0["b11"](34963, $$$$0["c1b"]()),
                $$$$0["b2v"](34963, new Uint16Array($$$$1), 35044),
                $$$$0["b11"](34962, $$$$0["c1b"]()),
                $$$$0["b2v"](34962, new Float32Array($$$$2), 35044),
                $$$$0["v7s"](0, 4, 5126, !1, 0, 0),
                $$$$0["b11"](34962, $$$$0["c1b"]()),
                $$$$0["b2v"](34962, new Int16Array($$$$4), 35044),
                $$$$0["v7s"](1, 3, 5122, !0, 0, 0),
                $$$$0["b11"](34962, $$$$0["c1b"]()),
                $$$$0["b2v"](34962, new Uint32Array($$$$3), 35044),
                $$$$0["v7s"](2, 4, 5121, !0, 0, 0),
                $$$$0["e3x"](0),
                $$$$0["e3x"](1),
                $$$$0["e3x"](2);
            });
        }
        {
          let $$$$0 = [],
            $$$$1 = [];
          try {
            const [$$$$2, $$$$3, $$$$4, $$$$5, $$$$6] = JSON.parse(localStorage["Dante-22"]);
            $$$$0 = $$$$2, $$$$1 = $$$$3, $$$$24 = $$$$4, $$$$10 = $$$$5, $$$$17 = $$$$6;
          } catch {}
          $$$$31.map(($$$$1, $$$$2) => $$$$1.t = $$$$1.u = $$$$1.o = 14 !== $$$$2 && $$$$0[$$$$2] ? 1 : 0),
            $$$$32.map(($$$$0, $$$$2) => $$$$0.o = $$$$1[$$$$2] ? 1 : 0),
            $$$$73(),
            $$$$9 = $$$$7 || 14 !== $$$$24 ? 1 : 0;
        }
        $$$$68($$$$12);
      });
      {
        const $$$$0 = [-110, -100, -92, -82, -106, -97, -88],
          $$$$1 = $$$$0 =>
            $$$$37(/* @__PURE__ */ Math.sin(($$$$0 /= 11) * Math.PI), $$$$0).rotateSelf(10 * $$$$0).scaleSelf(
              1.002 - $$$$0,
              1,
              1.002 - $$$$0,
            ),
          $$$$2 = $$$$0 => {
            $$$$31.push({
              p: $$$$11,
              q: $$$$0,
            }),
              $$$$79($$$$53(5), $$$$0.translate(.2).rotate(90, 90).scale(.4, .1, .5), $$$$55(.4, .5, .5)),
              $$$$79($$$$53(5), $$$$0.translate(-.2).rotate(90, 90).scale(.4, .1, .5), $$$$55(.4, .5, .5)),
              $$$$79($$$$53().slice(0, -1), $$$$0.translate(0, -.4).scale(.5, .1, .5), $$$$55(.5, .5, .4));
          },
          $$$$3 = $$$$0 =>
            $$$$65(
              $$$$41($$$$53().slice(0, -1), $$$$37(0, -$$$$0 / 2).scale(6, $$$$0 - 1, 2.2)),
              $$$$41($$$$53().slice(0, -1), $$$$37(0, -$$$$0 / 2 - 4).scale(4, $$$$0 - 5, 4)),
              $$$$41($$$$53(28, 1), $$$$37(0, $$$$0 / 2 - 9).rotate(90, 0, 90).scale3d(4)),
            ),
          $$$$4 = $$$$0 => $$$$37($$$$0 - 76.9, -$$$$0 / 16 - 10, 24).rotate(0, 0, -2).skewX(-2).scale(2.8, 1.4, 3),
          $$$$5 = $$$$65(
            $$$$41($$$$53(), $$$$37(0, -.5, 1).scale(1.15, 1.2, 6.5), $$$$55(.25, .25, .35, .3)),
            $$$$65(
              $$$$41($$$$53(3), $$$$37(0, 0, -5.5).scale(3, 2), $$$$55(.6, .3, .4, .3)),
              $$$$41($$$$53(), $$$$37(0, 0, -3.65).scale(2.5, 3), $$$$55(.6, .3, .4, .3)),
            ),
            ...[-1, 1].map($$$$0 =>
              $$$$41($$$$53(), $$$$37(1.2 * $$$$0, -.5, 1).scale(.14, .3, 6.5), $$$$55(.7, .2, 0, .3))
            ),
          ),
          $$$$6 = [
            $$$$41($$$$53(), $$$$37(0, -3).scale(11, 1.4, 3), $$$$55(.9, .9, .9, .2)),
            $$$$41($$$$53(), $$$$37(0, -2.2).scale(7.7, .5, 4), $$$$55(.5, .5, .5, .2)),
            $$$$38(12, $$$$0 => $$$$41($$$$53(), $$$$37($$$$0 - 5.5, 4.4).scale(.1, .1, 2), $$$$55(.6, .5, .3, .2)))
              .flat(),
            $$$$41(
              $$$$65(
                $$$$41($$$$53(6), $$$$84.rotate(90).scale(6, 8, 6)),
                $$$$41($$$$53(4, 0, .01), $$$$37(0, 6).scale(12, 2, .75).rotate(0, 45)),
                $$$$41($$$$53(6), $$$$84.rotate(90).scale(5, 12, 5)),
                ...[-5, 0, 5].map($$$$0 => $$$$41($$$$53(5), $$$$37($$$$0, 2.5).rotate(90, 0, 36).scale(1.8, 10, 1.8))),
              ),
              $$$$84,
              $$$$55(.3, .6, .6, .3),
            ),
          ].flat(),
          $$$$7 = $$$$38(11, $$$$0 =>
            $$$$52(
              $$$$40($$$$51(16), $$$$1($$$$0), $$$$55(1, 1, .8, .2)).reverse(),
              $$$$40($$$$51(16), $$$$1($$$$0 + 1), $$$$55(1, 1, .8, .2)),
              1,
            )).flat();
        $$$$78(),
          $$$$79([$$$$33.slice(1)], $$$$37(-2).scale3d(3).rotate(90, 0)),
          $$$$78(),
          $$$$2($$$$37(-5.4, 1.5, -19).rotate(0, -90)),
          [-15, 15].map(($$$$0, $$$$1) => {
            $$$$79($$$$53(), $$$$37(0, 0, $$$$1 ? 22 : -23).scale(3, 1, 8), $$$$55(.9, .9, .9, .2)),
              $$$$79($$$$53(), $$$$37(0, 6.3, $$$$0).scale(4, .3, 1), $$$$55(.3, .3, .3, .4)),
              $$$$79($$$$53().slice(0, -1), $$$$37(0, 1, $$$$0).scale(3, .2, .35), $$$$55(.5, .5, .5, .3));
          }),
          $$$$79($$$$53(), $$$$37(-5, -.2, -26).scale(3.2, 1, 2.5).skewX(3), $$$$55(.8, .8, .8, .2)),
          $$$$79($$$$53(), $$$$37(3, 1.5, -20).scale(.5, 2, 5), $$$$55(.7, .7, .7, .2)),
          $$$$79($$$$53(5), $$$$37(-5.4, 0, -19).scale(2, 1, 2).rotate(0, -90), $$$$55(.6, .3, .3, .4)),
          $$$$79($$$$53(), $$$$37(-3.4, -.2, -19).scale(2, 1, 1.5).rotate(0, -90), $$$$55(.75, .75, .75, .2)),
          $$$$79(
            $$$$65(
              $$$$64(
                $$$$65(
                  $$$$41($$$$53(6, 0, 0, .3), $$$$37(0, -.92).scale(13, 2, 13), $$$$55(.8, .8, .8, .2)),
                  $$$$41($$$$53(), $$$$84.rotate(0, 60).translate(14, .5, -1).scale(2.4, 5, 2), $$$$55(.5, .5, .5, .5)),
                ),
                $$$$41(
                  $$$$53(),
                  $$$$84.rotate(0, 60).translate(14.8, -1.46, -1).rotate(-30).translate(0, -1).scale(4.03, 1.6, 4.5),
                  $$$$55(.8, .2, .2, .5),
                ),
                $$$$41($$$$53(6), $$$$37(0, -8).scale(9, 8, 7), $$$$55(.2, .1, .4, .5)),
                $$$$41($$$$53(6, 0, 0, .3), $$$$37(8, -4, -4).scale(14, 2, 13), $$$$55(.7, .7, .7, .2)),
              ),
              $$$$41($$$$53(6), $$$$37(15.8, -1.5, 3.8).scale(3.5, 1, 3.5), $$$$55(.5, .5, .5, .5)),
              $$$$41($$$$53(5, 0, 1.5), $$$$37(0, 1).scale(4.5, .3, 4.5), $$$$55(.7, .5, .9, .2)),
              $$$$41($$$$53(5), $$$$84.scale(5, 30, 5), $$$$55(.4, .2, .6, .5)),
            ),
          ),
          $$$$2($$$$37(15.8, -2, 3.8)),
          $$$$79($$$$53(), $$$$37(-18.65, -3, 55).scale(2.45, 1.4, 2.7), $$$$55(.9, .9, .9, .2)),
          $$$$2($$$$37(-55, -1.1, 46).rotate(0, 90)),
          $$$$79($$$$53(7), $$$$37(-57, -2.6, 46).scale(4, 1, 4), $$$$55(.8, .8, .8, .3)),
          $$$$79($$$$53(6), $$$$37(-61.3, -2.4, 49).scale(3, 1, 5), $$$$55(.4, .6, .6, .3)),
          $$$$79($$$$6, $$$$37(-53, 0, 55)),
          $$$$79($$$$53(), $$$$37(-88.3, -5.1, 55).rotate(-30).scale(5, 1.25, 4.5), $$$$55(.7, .7, .7, .2)),
          $$$$79(
            $$$$53(3, 0, -.5),
            $$$$37(-88.4, -3.9, 55).rotate(0, -90, 17).scale(3, 1.45, 5.9),
            $$$$55(.8, .8, .8, .2),
          ),
          $$$$79(
            $$$$65(
              $$$$41($$$$53(), $$$$37(-100, 1, 63).scale(7.5, 4), $$$$55(.5, .5, .5, .4)),
              $$$$41($$$$53(), $$$$37(-100, 0, 63).scale(2, 2, 4), $$$$55(.5, .5, .5, .4)),
              $$$$41($$$$53(20, 1), $$$$37(-100, 2, 70).scale(2, 2, 10).rotate(90, 0), $$$$55(.5, .5, .5, .4)),
            ),
          ),
          $$$$79(
            $$$$65(
              $$$$64(
                $$$$41($$$$53(), $$$$37(-100, -2.6, 70).scale(3, 1.1, 7), $$$$55(.8, .8, .8, .2)),
                $$$$41($$$$53(), $$$$37(-100, -2.4, 55).scale(8, .9, 8), $$$$55(.8, .8, .8, .2)),
                $$$$41($$$$53(), $$$$37(-113, -2.6, 55).scale(6.2, 1.1, 3).skewX(3), $$$$55(.8, .8, .8, .2)),
                $$$$41($$$$53(6), $$$$37(-88.79, -2.6, 80.21).scale(6, 1.1, 6).rotate(0, 15), $$$$55(.6, .6, .6, .3)),
                $$$$41($$$$53(), $$$$37(-96, -2.6, 73).rotate(0, 45).scale(3, 1.1, 5), $$$$55(.8, .8, .8, .2)),
                $$$$41($$$$53(), $$$$37(-100, .42, 92).scale(3, 1.1, 4.1), $$$$55(.8, .8, .8, .2)),
                $$$$41($$$$53(), $$$$37(-100, -1.1, 82.39).rotate(-15, 0).scale(3, 1.1, 6), $$$$55(.8, .8, .8, .2)),
              ),
              $$$$41($$$$53(8), $$$$37(-100, -1, 55).scale(7, .9, 7), $$$$55(.3, .3, .3, .4)),
              $$$$41($$$$53(8), $$$$37(-100, -2, 55).scale(4, .3, 4), $$$$55(.4, .4, .4, .5)),
              $$$$41($$$$53(8, 0, -3.1), $$$$37(-100, -3, 55).scale(.4, 1, .4), $$$$55(.4, .4, .4, .5)),
            ),
          ),
          $$$$33.map(({
            x: $$$$0,
            z: $$$$1,
          }) => {
            $$$$79($$$$53(6), $$$$37(3 * $$$$0, 3, 15 * $$$$1).scale(.7, 4, .7), $$$$55(.6, .3, .3, .4)),
              $$$$79($$$$53(6), $$$$37(7 * $$$$0 - 100, -3, 7 * $$$$1 + 55).scale(1, 8.1), $$$$55(.6, .15, .15, .8)),
              [4, -.4].map($$$$2 =>
                $$$$79(
                  $$$$53(6),
                  $$$$37(7 * $$$$0 - 100, $$$$2, 7 * $$$$1 + 55).scale(1.3, .5, 1.3),
                  $$$$55(.4, .2, .2, .8),
                )
              ),
              [1.5, 8].map($$$$2 =>
                $$$$79(
                  $$$$53(15, 1),
                  $$$$37(9 * $$$$0 - 38.9, $$$$2 - 11.3, 11 * $$$$1 + 17).scale(1.5, .5, 1.5),
                  $$$$55(.6, .6, .6, .3),
                )
              ),
              $$$$79(
                $$$$53(14, 1).slice(0, -2),
                $$$$37(9 * $$$$0 - 38.9, -18, 11 * $$$$1 + 17).scale(1, 14.2),
                $$$$55(.25, .25, .25, 1),
              );
          }),
          $$$$38(7, $$$$0 => {
            $$$$79(
              $$$$53((23 * $$$$0 + 1) % 5 + 5, 0, .5),
              $$$$37(5 * /* @__PURE__ */ Math.sin($$$$0) - 101 + $$$$0, -2.3 - $$$$0, 44.9 - 2.8 * $$$$0).scaleSelf(
                5 + $$$$0 / 2,
                1.1 + $$$$0 / 6,
                5 + $$$$0 / 3,
              ),
              $$$$55(.5 - $$$$0 / 17, .5 - (1 & $$$$0) / 9, .6, .3),
            );
          }),
          $$$$79($$$$53(), $$$$37(-87, -9.5, 24).scale(7, 1, 3), $$$$55(.4, .5, .6, .4)),
          $$$$79($$$$53(4), $$$$37(-86, -9.2, 27).scale(5, 1, 5), $$$$55(.5, .6, .7, .3)),
          $$$$79($$$$53(12, 1), $$$$37(-86, -9, 31).scale(1.5, 1, 1.5), $$$$55(.3, .3, .4, .1)),
          $$$$2($$$$37(-86, -7.5, 31)),
          $$$$79($$$$53(5), $$$$37(-38.9, -11.1, 10).scale(2, 1.2, 2), $$$$55(.2, .4, .7, .3)),
          $$$$79(
            $$$$65(
              $$$$64(
                $$$$41($$$$53(), $$$$37(-38.9, -11.3, 17).scale(11, 1, 13), $$$$55(.3, .4, .6, .3)),
                $$$$41($$$$53(5), $$$$37(-38.9, -11.1, 17).scale(9, 1, 9), $$$$55(0, .2, .3, .5)),
              ),
              $$$$41($$$$53(5), $$$$37(-38.9, -11.1, 17).scale3d(5.4), $$$$55(0, .2, .3, .5)),
            ),
          ),
          $$$$2($$$$37(-38.9, -9.4, 10)),
          $$$$79(
            $$$$65(
              $$$$64(
                $$$$41($$$$53(6), $$$$37(0, 0, -18).scale(15, 1.3, 15), $$$$55(.7, .7, .7, .3)),
                $$$$41($$$$53(5), $$$$84.scale(4.5, 1.2, 9), $$$$55(.45, .4, .6, .3)),
              ),
              ...$$$$38(6, $$$$0 =>
                $$$$38(6, $$$$1 =>
                  $$$$41(
                    $$$$53(6),
                    $$$$37(
                      4.6 * $$$$1 - (1 & $$$$0 ? 10 : 12),
                      0,
                      4.6 * $$$$0 + 2 * /* @__PURE__ */ Math.sin(4 * $$$$1) - 32,
                    ).scale3d(2),
                    $$$$55(.7, .7, .7, .3),
                  ))).flat(),
            ),
            $$$$37(-38.9, -11.3, -1),
          ),
          $$$$2($$$$37(-84, -.7, 85).rotate(0, 45)),
          $$$$79($$$$53(5), $$$$37(-84, -2, 85).scale(4, .8, 4).rotate(0, 10), $$$$55(.8, .1, .25, .4)),
          $$$$2($$$$37(-116, -1.4, -18).rotate(0, 180)),
          $$$$79(
            $$$$65(
              $$$$41($$$$53(), $$$$37(-96.5, -1.4, -2).scale(20, 2.1, 3)),
              ...$$$$0.map($$$$0 => $$$$41($$$$53(), $$$$37($$$$0, .05, -3).scale(1.35, 2, 9))),
            ),
            $$$$84,
            $$$$55(.5, .5, .6, .2),
          ),
          $$$$79($$$$53(), $$$$37(-96.5, 1, -2).scale(19, .3, .3), $$$$55(.5, .5, .6, .2)),
          $$$$79($$$$53(6), $$$$37(-116, -2.6, -16.5).scale(3.2, .8, 3), $$$$55(.6, .5, .7, .2)),
          $$$$79($$$$53(), $$$$37(-116, -2.6, -12).scale(3.2, 1.1, 4).skewX(3), $$$$55(.8, .8, .8, .2)),
          $$$$79($$$$53().slice(0, -1), $$$$37(-115.5, -17, -12).scale(.5, 15, 2.2), $$$$55(.6, .6, .6, .3)),
          $$$$79($$$$53(8).slice(0, -2), $$$$37(-114, -17, -2).scale(2, 15, 2), $$$$55(.6, .6, .6, .3)),
          $$$$79($$$$53(8).slice(0, -2), $$$$37(-79, -17, -2).scale(2, 15, 2), $$$$55(1, 1, 1, .3)),
          $$$$79($$$$53().slice(0, -1), $$$$37(-77, -17, -50.5).scale(2.2, 15, .5), $$$$55(.6, .6, .6, .3)),
          $$$$79(
            $$$$65(
              $$$$41($$$$53(12).slice(0, -1), $$$$37(-77, -14.5, -12).scale(4, 17.5, 4), $$$$55(.7, .7, .7, .2)),
              $$$$41($$$$53(12), $$$$37(-77, 3.1, -12).scale(3, 5, 3), $$$$55(.4, .5, .6, .2)),
              $$$$41($$$$53(), $$$$37(-79, .1, -12).scale(3.5, 2, 1.3), $$$$55(.4, .5, .6, .2)),
              $$$$41($$$$53(), $$$$37(-77, .1, -14).scale(1.5, 2, 2), $$$$55(.4, .5, .6, .2)),
            ),
          ),
          $$$$79(
            $$$$65(
              $$$$41($$$$53(), $$$$37(-93, -5.8, -40).scale(9, 1, 5), $$$$55(.8, .8, .8, .1)),
              $$$$41($$$$53(9), $$$$37(-98, -5.8, -40).scale(3, 8, 3), $$$$55(.7, .7, .7, .2)),
            ),
          ),
          $$$$79($$$$53(), $$$$37(-84.9, -4.3, -40).rotate(12).scale(6, 1, 3), $$$$55(.6, .6, .6, .3)),
          $$$$79($$$$53(9).slice(0, -1), $$$$37(-98, -18.4, -40).scale(2.5, 13.5, 2.5), $$$$55(.5, .5, .5, .3)),
          $$$$2($$$$37(-98, -4.4, -40).rotate(0, 90)),
          [-1, 1].map(($$$$0, $$$$1) => {
            $$$$79(
              $$$$65(
                $$$$41($$$$53(), $$$$37(-4 * $$$$0, 3.5, -.5).scale(4, 4, .7), $$$$55(.5, .5, .5, .4)),
                $$$$41($$$$53(5), $$$$37(-5.3 * $$$$0, 7).rotate(90, 0).scale(1.7, 5, 1.7), $$$$55(.6, .24, .2, .5)),
                $$$$41($$$$53(), $$$$84.scale(3, 3, 10), $$$$55(.6, .24, .2, .5)),
                $$$$41(
                  $$$$53(5),
                  $$$$37(-5.3 * $$$$0, 3.8).rotate(90, 0, 35).scale(.75, 5, .75),
                  $$$$55(.6, .24, .2, .5),
                ),
                $$$$41($$$$53(32, 1), $$$$37(0, 3, -5).scale(3, 4, 10).rotate(90, 0), $$$$55(.6, .24, .2, .5)),
              ),
              $$$$37($$$$0 - 100, .7, 97),
            ),
              $$$$79($$$$53(12, 1), $$$$37(-7.5 * $$$$0 - 100, 3.7, 96).scale(.8, 4, .8), $$$$55(.6, .24, .2, .5)),
              [7.2, 1.5].map($$$$1 =>
                $$$$79(
                  $$$$53(15, 1),
                  $$$$37(-7.5 * $$$$0 - 100, $$$$1 + .7, 96).scale(1.1, .5, 1.1),
                  $$$$55(.5, .24, .2, .4),
                )
              ),
              $$$$79($$$$7, $$$$37(-8 * $$$$0, 1, 85).scale(1.2, 10, 1.2).rotate(0, 90 * $$$$0 + 90)),
              $$$$79($$$$7, $$$$37(-5 * $$$$0 - 100, 1.7, 110).scale(1.2, 10, 1.2).rotate(0, 90 * $$$$0 - 90)),
              $$$$38(5, $$$$0 =>
                $$$$79(
                  $$$$7,
                  $$$$37(18.5 * ($$$$1 - .5), 0, 4.8 * $$$$0 - 9.5).rotate(0, 180 - 180 * $$$$1).scale(1.2, 10, 1.2),
                ));
          }),
          $$$$79(
            $$$$65(
              $$$$41($$$$53(), $$$$37(-82.07, .8, 106).scale(11, .9, 2.2), $$$$55(.7, .7, .7, .1)),
              $$$$41($$$$53(45, 1), $$$$37(-81, .7, 106).scale3d(7.7), $$$$55(.7, .7, .7, .1)),
            ),
          ),
          $$$$79($$$$53(), $$$$37(-50.7, 1, 99).scale(2, .65, 1), $$$$55(.7, .7, .7, .2)),
          $$$$79($$$$53(), $$$$37(-58, 1, 106).scale(2, .65, 2), $$$$55(.7, .7, .7, .2)),
          $$$$79($$$$53(), $$$$37(-34.2, .4, 91).scale(3, 1, 3), $$$$55(.7, .7, .7, .3)),
          $$$$79($$$$53(), $$$$37(-42, .4, 91).scale(5, 1, 2.5), $$$$55(.7, .7, .7, .3)),
          $$$$79($$$$53(5), $$$$37(-34, .2, 96).scale(3, 2, 4).rotate(-20, 0), $$$$55(.2, .5, .5, .6)),
          $$$$2($$$$37(-34, 2.7, 96).rotate(-12, 0)),
          $$$$79(
            $$$$65(
              $$$$64(
                $$$$41($$$$53(), $$$$37(-101.5, .7, 93.5).scale(10.5, 1, 2), $$$$55(.7, .7, .7, .2)),
                $$$$41($$$$53(6, 0, 0, .6), $$$$37(-100, .7, 105.5).scale(8, 1, 11), $$$$55(.7, .7, .7, .2)),
              ),
              $$$$41($$$$53(5), $$$$37(-100, .7, 113).scale(4, 3, 4), $$$$55(.7, .7, .7, .2)),
            ),
          ),
          $$$$38(3, $$$$0 => {
            $$$$79($$$$3(16), $$$$37(-77, -9, -12 * $$$$0 - 20).rotate(0, 90), $$$$55(.6, .6, .6, .3)),
              $$$$79($$$$3(16), $$$$37(12 * $$$$0 - 109, -9, -12), $$$$55(.6, .6, .6, .3)),
              $$$$79(
                $$$$3(24.7 - .7 * (1 & $$$$0)),
                $$$$37(6 * $$$$0 - 6, 4 - (1 & $$$$0), 111 - .2 * (1 & $$$$0)),
                1 & $$$$0 ? $$$$55(.5, .5, .5, .3) : $$$$55(.35, .35, .35, .5),
              );
          }),
          $$$$79(
            $$$$65(
              $$$$64(
                $$$$41($$$$53(), $$$$37(0, 16, 111).scale(3, 1, 3.8), $$$$55(.5, .3, .3, .4)),
                $$$$41($$$$53(6, 0, 0, .3), $$$$37(0, -.92, 95).scale(14, 2, 14), $$$$55(.8, .8, .8, .2)),
                $$$$41($$$$53(), $$$$37(0, 16, 110.5).scale(12, 1, 3), $$$$55(.5, .3, .3, .4)),
              ),
              $$$$41($$$$53(5), $$$$37(0, 0, 95).scale3d(6), $$$$55(.3, .3, .3, .5)),
              $$$$41($$$$53(5), $$$$37(0, 16, 103.5).scale(5.5, 5, 5.5), $$$$55(.5, .3, .3, .4)),
            ),
          ),
          $$$$2($$$$37(0, 1.7, 82).rotate(0, 180)),
          $$$$79(
            $$$$53(5).slice(0, -1),
            $$$$37(0, -15.7, 82).scale(2.5, 17, 2.5).rotate(0, 35),
            $$$$55(.5, .3, .3, .4),
          ),
          $$$$79($$$$53(6), $$$$37(0, 16, 121).scale(2.5, 1, 2.1).rotate(0, 90), $$$$55(.5, .6, .7, .3)),
          $$$$79($$$$53(), $$$$37(0, 16, 127.8).scale(1.5, 1, .7), $$$$55(.5, .6, .7, .3)),
          $$$$79($$$$53(7), $$$$37(0, 15.1, 133).scale(5, 2, 5), $$$$55(.4, .5, .6, .4)),
          $$$$80($$$$37(-.5, 2.8, -20), [0, 0, 2.5], [0, -3, 2.5]),
          $$$$80(
            $$$$37(0, 2.8),
            [5, 10, 3],
            [-5, 10, 3],
            ...$$$$51(18).map(({
              x: $$$$0,
              z: $$$$1,
            }) => [7 * $$$$0, 10 * $$$$1, 4.5 - 2 * $$$$42($$$$0)]),
          ),
          $$$$80(
            $$$$37(0, 3, 95),
            ...$$$$51(9).map(({
              x: $$$$0,
              z: $$$$1,
            }) => [9 * $$$$0, 9 * $$$$1, 4]),
          ),
          $$$$80($$$$37(0, 19, 134), [0, 0, 3.5]),
          $$$$80($$$$37(-38.9, -8.3, -21), [-7, -2.5, 6], [6, -3, 6], [0, -5, 7]),
          $$$$80($$$$37(-89, .2, 80), [0, 0, 6]),
          $$$$80($$$$37(-100, .2, 55), [0, 0, 7.5], [-8, 0, 3.5], [-12, 0, 3.5], [-15, 0, 3.5]),
          $$$$80($$$$37(-115, .2, -12), [0, 0, 3.5]),
          $$$$80($$$$37(-93, -3, -40).rotate(4), [0, -2, 3.5], [0, 2, 3.5]),
          $$$$78(),
          $$$$79($$$$53(5), $$$$37(0, -.2).scale(5, 1, 5), $$$$55(.6, .65, .7, .3)),
          $$$$2($$$$37(0, 1.2)),
          $$$$38(2, () => {
            $$$$78(),
              $$$$33.map(({
                x: $$$$0,
                z: $$$$1,
              }) => {
                $$$$79(
                  $$$$53(11, 1).slice(0, -2),
                  $$$$37(4 * $$$$0, 4, 4 * $$$$1).scale(.8, 3, .8),
                  $$$$55(.5, .3, .7, .6),
                ), $$$$79($$$$53(), $$$$37(4 * $$$$0, 7, 4 * $$$$1).scale(1, .3), $$$$55(.5, .5, .5, .3));
              }),
              $$$$79(
                $$$$65(
                  $$$$41($$$$53().slice(0, -1), $$$$84.scale(5, 1, 5), $$$$55(.8, .8, .8, .3)),
                  ...[-1, 1].map($$$$0 =>
                    $$$$41(
                      $$$$53(25, 1),
                      $$$$37(5 * $$$$0, .2).rotate(-30 * $$$$0).scale(4, 1, 3),
                      $$$$55(.8, .8, .8, .3),
                    )
                  ),
                ),
              ),
              $$$$79($$$$53(), $$$$37(0, -3).scale(8, 2, 8), $$$$55(.4, .4, .4, .3));
          }),
          $$$$78(),
          $$$$79(
            $$$$65(
              $$$$64(
                $$$$41($$$$53(), $$$$84.scale(1.5, 1, 5), $$$$55(.9, .9, .9, .2)),
                $$$$41($$$$53(), $$$$37(0, -2).scale(2, 3.2, 1.9), $$$$55(.3, .8, .5, .5)),
                $$$$41($$$$53(6), $$$$84.scale(4, 1, 5), $$$$55(.9, .9, .9, .2)),
                $$$$41($$$$53(16, 1, 0, 4), $$$$84.scale(1, 1, 1.5).rotate(0, 90), $$$$55(.9, .9, .9, .2)),
              ),
              $$$$41($$$$53(), $$$$84.scale(1.3, 10, 1.3), $$$$55(.2, .7, .4, .6)),
            ),
          ),
          $$$$80($$$$37(0, 2.8), [0, 0, 4.5]),
          $$$$78(),
          $$$$79($$$$53(3), $$$$37(-23, -1.7, 55.8).scale(5, .7, 8.3), $$$$55(.3, .6, .6, .2)),
          $$$$79($$$$53(8), $$$$37(-23, -2.2, 66.5).scale(1.5, 1.2, 1.5), $$$$55(.8, .8, .8, .2)),
          $$$$79($$$$53(), $$$$37(-23, -2.2, 62).scale(3, 1, 4), $$$$55(.5, .5, .5, .3)),
          $$$$79($$$$53(), $$$$37(-23, -3, 55).scale(5.2, 1.7, 3), $$$$55(.5, .5, .5, .3)),
          $$$$2($$$$37(-23, -.5, 66.5)),
          $$$$78(),
          $$$$79($$$$53(), $$$$37(-22.55, -3, 55).scale(1.45, 1.4, 2.7), $$$$55(.7, .7, .7, .2)),
          $$$$79(
            $$$$65($$$$41($$$$53(), $$$$84.scale(3, 1.4, 2.7)), $$$$41($$$$53(), $$$$84.scale(1.2, 8, 1.2))),
            $$$$37(-33, -3, 55),
            $$$$55(.7, .7, .7, .2),
          ),
          $$$$78(),
          $$$$79(
            $$$$65($$$$41($$$$53(), $$$$84.scale(3, 1.4, 2.7)), $$$$41($$$$53(), $$$$84.scale(1, 3))),
            $$$$37(-27, -3, 55),
            $$$$55(.9, .9, .9, .2),
          ),
          $$$$79($$$$53(), $$$$37(-39, -3, 55).scale(3, 1.4, 2.7), $$$$55(.9, .9, .9, .2)),
          $$$$78(),
          $$$$79($$$$53(6), $$$$37(-44.5, 0, 55).rotate(0, 0, 90).scale(5.9, .5, 5.9), $$$$55(.7, .7, .7, .4)),
          $$$$78(),
          [0, 12, 24].map($$$$0 => $$$$79($$$$53(), $$$$4($$$$0), $$$$55(.2, .5, .6, .2))),
          $$$$78(),
          [6, 18].map($$$$0 => $$$$79($$$$53(), $$$$4($$$$0), $$$$55(.1, .4, .5, .2))),
          $$$$78(),
          $$$$79($$$$53(5), $$$$37(-38.9, -1.3, 17).scale(1.1, 3, 1.1).skewY(-20), $$$$55(.3, .3, .5, .5)),
          $$$$79($$$$53(5).slice(0, -1), $$$$37(-38.9, 2, 17).scale(.6, 2.5, .6).skewY(25), $$$$55(.6, .3, .5, .5)),
          $$$$79(
            $$$$65(
              $$$$41($$$$53(5), $$$$37(0, 2).scale(5, 7, 5).skewY(8)),
              $$$$41($$$$53(5), $$$$37(0, 5).scale(1.5, 1.5, 8).rotate(90, 0, 35)),
              $$$$41($$$$53(), $$$$84.scale(2, 8, 3)),
            ),
            $$$$37(-38.9, -11.3, 17),
            $$$$55(.2, .4, .5, .5),
          ),
          $$$$80(
            $$$$37(-39.1, -.6, 17).rotate(11),
            ...$$$$51(15).map(({
              x: $$$$0,
              z: $$$$1,
            }) => [3 * $$$$0, 3 * $$$$1, 1.2]),
          ),
          $$$$0.map(($$$$0, $$$$1) => {
            $$$$1 % 2 || $$$$1 >= 6 || $$$$78(), $$$$79($$$$5, $$$$37($$$$0, 1.9, -12));
          }),
          $$$$38(4, $$$$0 => {
            $$$$78(),
              $$$$79(
                $$$$53(6),
                $$$$37(-14.6 - 4.8 * $$$$0 - ($$$$0 > 2 ? 2 : 0), -$$$$0 / 2.5 - .1, -21.5).rotate(0, 0, 3.5).skewX(3.5)
                  .scale(2.6, 1, 2.5),
                $$$$55(.5 - $$$$0 / 8, $$$$0 / 12 + .5, .7, .3),
              );
          }),
          [$$$$55(.1, .55, .45, .2), $$$$55(.2, .5, .5, .3), $$$$55(.3, .45, .55, .4)].map(($$$$0, $$$$1) => {
            $$$$78(),
              $$$$79($$$$53(), $$$$37(-23.5, .5, 91 + 6.8 * $$$$1).scale(1 === $$$$1 ? 2 : 3.3, 1, 3.3), $$$$0),
              2 === $$$$1 && $$$$79($$$$53(), $$$$37(-29.1, .4, 91).scale(2.1, 1, 3), $$$$55(.7, .7, .7, .3)),
              1 === $$$$1
              && $$$$79(
                $$$$53(),
                $$$$37(-16.1, .5, 103.5).rotate(-3.5).scale(3.9, .8, 2).skewX(-1),
                $$$$55(.6, .6, .7, .3),
              );
          }),
          $$$$78(),
          $$$$79($$$$53(5), $$$$84.scale(5, 1.1, 5), $$$$55(.5, .3, .3, .4)),
          $$$$79($$$$53(5), $$$$84.scale(5.5, .9, 5.5), $$$$55(.25, .25, .25, .4)),
          $$$$2($$$$37(0, 1.5, -1).rotate(0, 180)),
          $$$$38(4, $$$$0 => {
            $$$$78(),
              $$$$38(
                7,
                $$$$1 =>
                  $$$$79(
                    $$$$41(
                      $$$$53(8, 1).slice(0, -1),
                      $$$$37(($$$$0 > 2 ? 3.5 : 4) * ($$$$1 / 6 - .5), 3).scale(.2, $$$$0 > 2 ? 4 : 3, .2),
                      $$$$55(.3, .3, .38),
                    ),
                  ),
              );
          }),
          $$$$78(),
          $$$$79($$$$6),
          $$$$78(),
          $$$$79($$$$53(5).slice(0, -1), $$$$37(-7.5, 2.7).rotate(0, 90).scale(1, .2), $$$$55(.5, .5, .5, .5)),
          $$$$79($$$$53(10).slice(0, -1), $$$$37(-7.5, 2.4).rotate(0, 90).scale(2, .1, 2), $$$$55(.3, .8, .7, .3)),
          $$$$79($$$$53(15, 1), $$$$37(-7.5).rotate(0, 90).scale(3, 2.3, 3), $$$$55(.4, .4, .4, .3)),
          $$$$2($$$$37(-7.5).rotate(0, 90).translate(0, 3.4).rotate(0, 180)),
          [-1, 1].map($$$$0 =>
            $$$$79($$$$7, $$$$84.rotate(90 * $$$$0, 180, 90).translate(0, 5).rotate(40).scale(1.3, 10, 1.3))
          ),
          $$$$79(
            $$$$65(
              $$$$41($$$$53(10), $$$$84.scale(6, 2, 6), $$$$55(.1, .6, .5, .3)),
              $$$$41($$$$53(10), $$$$84.scale(3.3, 6, 3.3), $$$$55(.1, .6, .5, .5)),
            ),
          ),
          $$$$80($$$$37(-5, 4), [0, -1.2, 1.7], [0, 1.2, 1.7]),
          $$$$78(),
          $$$$79($$$$53(3), $$$$37(0, -3, 118.8).scale(.8, .8, 8).rotate(90, 0, 60), $$$$55(.5, .3, .3, .4)),
          [22, 30].map($$$$0 => {
            $$$$79($$$$53(6), $$$$37(0, 16, $$$$0 + 95).scale(3, 1, 2.3).rotate(0, 90), $$$$55(.7, .7, .7, .4)),
              $$$$79($$$$53(), $$$$37(0, 6.2, $$$$0 + 95).scale(.5, 11, .5), $$$$55(.5, .3, .3, .4));
          }),
          $$$$78(),
          $$$$79($$$$53(5).slice(0, -1), $$$$37(0, 2).scale(1, 2), $$$$55(.3, .3, .3, .2)),
          $$$$79($$$$53(8).slice(0, -1), $$$$37(0, 2).scale(3, 1.5, 3).rotate(0, 22), $$$$55(.7, .7, .7, .1)),
          $$$$79(
            $$$$65(
              $$$$41($$$$53(28, 1), $$$$84.scale(7.5, 1, 7.5), $$$$55(.45, .45, .45, .2)),
              $$$$41($$$$53(), $$$$37(0, 0, -5.5).scale(1.5, 3, 2.7), $$$$55(.45, .45, .45, .2)),
            ),
          ),
          $$$$80(
            $$$$37(0, 3),
            ...$$$$51(14).map(({
              x: $$$$0,
              z: $$$$1,
            }) => [5.6 * $$$$0, 5.6 * $$$$1, 2]),
          ),
          $$$$78(),
          [-1, 1].map($$$$0 =>
            $$$$79(
              $$$$7,
              $$$$84.rotate(0, 90).translate(-5 * $$$$0, 3, -.5).scale(1.2, 9, 1.2).rotate(0, 90 * $$$$0 + 90),
            )
          ),
          $$$$79(
            $$$$65(
              $$$$41($$$$53(28, 1).slice(0, -1), $$$$37(0, 2).scale(7.5, 1, 7.5), $$$$55(.35, 0, 0, .3)),
              $$$$41($$$$53().slice(0, -1), $$$$37(0, 2).scale(9, 1.1, 2), $$$$55(.3, 0, 0, .3)),
            ),
          ),
          $$$$79($$$$53(5).slice(0, -1), $$$$37(0, 1).scale(1, .2), $$$$55(.3, .3, .3, .2)),
          $$$$79($$$$53(28, 1), $$$$84.scale(7.5, 1, 7.5), $$$$55(.45, .45, .45, .2)),
          $$$$78(),
          $$$$79(
            $$$$65(
              $$$$41($$$$53(28, 1).slice(0, -1), $$$$37(0, 2).scale(7.5, 1, 7.5), $$$$55(.35, 0, 0, .3)),
              $$$$41($$$$53().slice(0, -1), $$$$37(0, 2, 7).scale(2, 1.1, 9), $$$$55(.3, 0, 0, .3)),
              $$$$41($$$$53().slice(0, -1), $$$$37(7, 2).scale(9, 1.1, 2), $$$$55(.3, 0, 0, .3)),
            ),
          ),
          $$$$79($$$$53(5).slice(0, -1), $$$$37(0, 1).scale(1, .2), $$$$55(.3, .3, .3, .2)),
          $$$$79($$$$53(28, 1), $$$$84.scale(7.5, 1, 7.5), $$$$55(.45, .45, .45, .2)),
          $$$$78(),
          $$$$79(
            $$$$65(
              $$$$41($$$$53(28, 1).slice(0, -1), $$$$37(0, 2).scale(7.5, 1, 7.5), $$$$55(.35, 0, 0, .3)),
              $$$$41($$$$53().slice(0, -1), $$$$37(0, 2, -7).scale(2, 1.1, 9), $$$$55(.3, 0, 0, .3)),
              $$$$41($$$$53().slice(0, -1), $$$$37(7, 2).scale(9, 1.1, 2), $$$$55(.3, 0, 0, .3)),
            ),
          ),
          $$$$79($$$$53(5).slice(0, -1), $$$$37(0, 1).scale(1, .2), $$$$55(.3, .3, .3, .2)),
          $$$$79($$$$53(28, 1), $$$$84.scale(7.5, 1, 7.5), $$$$55(.45, .45, .45, .2)),
          $$$$38(2, () => {
            $$$$78(),
              $$$$79(
                $$$$65(
                  $$$$41($$$$53(30, 1, 1.15, 1), $$$$37(0, -3).scale(3.5, 1, 3.5), $$$$55(.7, .4, .25, .7)),
                  $$$$41($$$$53(), $$$$37(4, -1.2).scale3d(2), $$$$55(.7, .4, .25, .3)),
                  $$$$41($$$$53(30, 1, 1.3, 1), $$$$37(0, -2.5).scale(2.6, 1, 3), $$$$55(.7, .4, .25, .2)),
                ),
              ),
              $$$$2($$$$37(0, -3, 4));
          });
        for (let $$$$0 = 0; 16 > $$$$0; ++$$$$0) {
          $$$$78(),
            $$$$79($$$$53(9, 1), $$$$37(0, .8).scale(.2, .3, .2), $$$$55(.7, 1, .2)),
            $$$$79($$$$53(6, 1).slice(0, -1), $$$$84.scale(.12, 1.2, .12), $$$$55(.3, .3, .5, .1)),
            $$$$79($$$$53(3), $$$$37(0, -1).rotate(90, 90).scale(.3, .4, .3), $$$$55(.2, .2, .2, .1));
        }
        $$$$78(),
          $$$$79($$$$54(20), $$$$37(0, 1).scale3d(.5), $$$$55(1, .3, .4)),
          $$$$79($$$$54(30), $$$$84.scale(.65, .8, .55), $$$$55(1, .3, .4)),
          $$$$79($$$$53(), $$$$37(0, .9, .45).scale(.15, .02, .06), $$$$55(.3, .3, .3)),
          [-1, 1].map($$$$0 => {
            $$$$79(
              $$$$7,
              $$$$84.rotate(0, $$$$0 > 0 ? 180 : 0).translate(.2, 1.32).rotate(-30).scale(.2, .6, .2),
              $$$$55(1, 1, .8),
            ),
              $$$$79(
                $$$$41(
                  $$$$65($$$$53(15, 1), $$$$41($$$$53(), $$$$37(0, 0, 1).scale(2, 2, .5))),
                  $$$$84.rotate(-90, 0).scale(.1, .05, .1),
                  $$$$55(.3, .3, .3),
                ),
                $$$$37(.2 * $$$$0, 1.2, .4).rotate(0, 20 * $$$$0, 20 * $$$$0),
              );
          }),
          [-1, 1].map($$$$0 => {
            $$$$78(), $$$$79($$$$53(20, 1), $$$$37(.3 * $$$$0, -.8).scale(.2, .7, .24), $$$$55(1, .3, .4));
          }),
          $$$$78(),
          $$$$79($$$$53(6, 1).slice(0, -1), $$$$84.scale(.77, 1, .77), $$$$55(1, .3, .5)),
          $$$$78(),
          $$$$79(
            $$$$54(28, 22, ($$$$0, $$$$1, $$$$2) => {
              var $$$$3 = $$$$1 / 22,
                $$$$4 = $$$$0 * Math.PI * 2 / 28,
                $$$$5 = /* @__PURE__ */ Math.sin($$$$3 ** .6 * Math.PI / 2);
              $$$$0 = $$$$3 * $$$$3 * /* @__PURE__ */ Math.sin($$$$0 * Math.PI * .5) / 4;
              return $$$$1 > 21
                ? {
                  x: $$$$2.g = 0,
                  y: -.5,
                  z: 0,
                }
                : {
                  x: /* @__PURE__ */ Math.cos($$$$4) * $$$$5,
                  y: /* @__PURE__ */ Math.cos($$$$3 * Math.PI) - $$$$3 - $$$$0,
                  z: /* @__PURE__ */ Math.sin($$$$4) * $$$$5 + /* @__PURE__ */ Math.sin($$$$0 * Math.PI * 2) / 4,
                };
            }),
            $$$$84.scale3d(.7),
            $$$$55(1, 1, 1),
          ),
          [-1, 1].map($$$$0 => $$$$79($$$$54(10), $$$$37(.16 * $$$$0, .4, -.36).scale3d(.09)));
      }
    });
});
