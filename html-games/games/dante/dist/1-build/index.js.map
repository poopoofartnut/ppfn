{"version":3,"file":"index.js","sources":["../../app/groundTexture.svg","../../app/math/matrix.ts","../../app/game/models.ts","../../app/math/matrix-transforms.ts","../../app/math/integers-map.ts","../../app/geometry/polygon.ts","../../app/math/math.ts","../../app/geometry/geometry.ts","../../app/geometry/material.ts","../../app/math/vectors.ts","../../app/geometry/csg.ts","../../app/game/game-time.ts","../../app/utils/keycodes.ts","../../app/load-step.ts","../../app/music/music-player.ts","../../app/shaders/main-fragment.frag","../../app/math/matrix-perspective.ts","../../app/page.ts","../../app/game/levers-ids.ts","../../app/game/models-ids.ts","../../app/game/world-state.ts","../../app/game/transforms-buffer.ts","../../app/game/distance-to-player.ts","../../app/game/models-factory.ts","../../app/game/level.ts","../../app/shaders/main-vertex.vert","../../app/shaders/collider-fragment.frag","../../app/shaders/sky-vertex.vert","../../app/shaders/sky-fragment.frag","../../app/gl.ts","../../app/game/models-next-update.ts","../../app/game/player.ts","../../app/game/level-update.ts","../../app/main-loop.ts","../../app/game/triangle-buffers.ts","../../app/index.ts"],"sourcesContent":["export default \"__VITE_ASSET__ff7d157a__\"","import type { Vec4 } from \"./vectors\";\n\nexport const identity: DOMMatrixReadOnly = new DOMMatrix();\n\nexport const tempMatrix = new DOMMatrix();\n\nconst float32Array16Temp = new Float32Array(16);\n\nexport const matrixToArray = (\n  $matrix: DOMMatrixReadOnly,\n  output: Float32Array | number[] = float32Array16Temp,\n  index: number = 0,\n) => {\n  index *= 16;\n  output[index++] = $matrix.m11;\n  output[index++] = $matrix.m12;\n  output[index++] = $matrix.m13;\n  output[index++] = $matrix.m14;\n  output[index++] = $matrix.m21;\n  output[index++] = $matrix.m22;\n  output[index++] = $matrix.m23;\n  output[index++] = $matrix.m24;\n  output[index++] = $matrix.m31;\n  output[index++] = $matrix.m32;\n  output[index++] = $matrix.m33;\n  output[index++] = $matrix.m34;\n  output[index++] = $matrix.m41;\n  output[index++] = $matrix.m42;\n  output[index++] = $matrix.m43;\n  output[index] = $matrix.m44;\n  return output;\n};\n\nexport const matrixCopy = (source: DOMMatrixReadOnly = identity, target: DOMMatrix = tempMatrix) => {\n  // if (source.isIdentity) {\n  //   return target.setMatrixValue(\"none\");\n  // }\n  target.m11 = source.m11;\n  target.m12 = source.m12;\n  target.m13 = source.m13;\n  target.m14 = source.m14;\n  target.m21 = source.m21;\n  target.m22 = source.m22;\n  target.m23 = source.m23;\n  target.m24 = source.m24;\n  target.m31 = source.m31;\n  target.m32 = source.m32;\n  target.m33 = source.m33;\n  target.m34 = source.m34;\n  target.m41 = source.m41;\n  target.m42 = source.m42;\n  target.m43 = source.m43;\n  target.m44 = source.m44;\n  return target;\n};\n\nexport const matrixTransformPoint: Vec4 & ((x?: number, y?: number, z?: number, w?: number) => void) = ((\n  x: number = 0,\n  y: number = 0,\n  z: number = 0,\n  w: number = 1,\n) => {\n  matrixTransformPoint.x = tempMatrix.m11 * x + tempMatrix.m21 * y + tempMatrix.m31 * z + tempMatrix.m41 * w;\n  matrixTransformPoint.y = tempMatrix.m12 * x + tempMatrix.m22 * y + tempMatrix.m32 * z + tempMatrix.m42 * w;\n  matrixTransformPoint.z = tempMatrix.m13 * x + tempMatrix.m23 * y + tempMatrix.m33 * z + tempMatrix.m43 * w;\n  matrixTransformPoint.w = tempMatrix.m14 * x + tempMatrix.m24 * y + tempMatrix.m34 * z + tempMatrix.m44 * w;\n}) as any;\n","import type { Polygon } from \"../geometry/polygon\";\n\nexport interface Model {\n  readonly $matrix: DOMMatrix;\n\n  /** The temporary list of polygons, will be cleared out when building triangles */\n  $polygon: Polygon[][] | null;\n\n  $vertexBegin?: number;\n  $vertexEnd?: number;\n}\n\nexport interface Lever {\n  $matrix: DOMMatrixReadOnly;\n  $transform: DOMMatrixReadOnly;\n  $value: 0 | 1;\n  $lerpValue: number;\n  $lerpValue2: number;\n}\n\nexport interface Soul {\n  (): void;\n  $value: 0 | 1;\n}\n\nexport type Circle = [number, number, number];\n\n/** Fixed number of souls */\nexport const SOULS_COUNT = 13;\n\n/** Fixed number of levers */\nexport const LEVERS_COUNT = 16;\n\n/** Fixed number of models that have a simple translation transformation */\nexport const MODELS_WITH_SIMPLE_TRANSFORM = 26;\n\n/** Fixed number of models that have a full transformation matrix */\nexport const MODELS_WITH_FULL_TRANSFORM = 12 + LEVERS_COUNT;\n\nexport const allModels: Model[] = [];\n\nexport const levers: Lever[] = [];\n\nexport const souls: Soul[] = [];\n","import { identity } from \"./matrix\";\n\nexport const translation = NO_INLINE((x: number, y?: number, z?: number) => identity.translate(x, y, z));\n","export const integers_map = <T>(n: number, fn: (i: number) => T) => Array.from(Array(n), (_, i) => fn(i));\n","import { matrixCopy, matrixTransformPoint } from \"../math/matrix\";\nimport type { Vec3, Vec3Optional } from \"../math/vectors\";\n\nexport interface Polygon<TVec3 = Vec3> extends Array<TVec3> {\n  /** Polygon material */\n  $color?: number | undefined;\n\n  /** Smooth normals? */\n  $smooth?: 0 | 1 | undefined;\n}\n\nexport const polygon_color = (polygon: Polygon, color: number | undefined, smooth?: 0 | 1 | undefined): Polygon => {\n  polygon.$smooth = smooth;\n  polygon.$color = color;\n  return polygon;\n};\n\nexport const polygon_transform = (\n  polygon: Polygon<Readonly<Vec3Optional>>,\n  m: DOMMatrixReadOnly,\n  color: number | undefined = polygon.$color,\n): Polygon => {\n  matrixCopy(m);\n\n  return polygon_color(\n    polygon.map(({ x, y, z }) => {\n      matrixTransformPoint(x, y, z);\n      return { x: matrixTransformPoint.x, y: matrixTransformPoint.y, z: matrixTransformPoint.z };\n    }),\n    color,\n    polygon.$smooth,\n  );\n};\n\nexport const polygons_transform = (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  m: DOMMatrixReadOnly,\n  color?: number | undefined,\n) => polygons.map((polygon) => polygon_transform(polygon, m, color));\n","if (DEBUG) {\n  window.NO_INLINE = (fn) => fn;\n}\n\n/** Amount to be multiplied to an angle in degrees to obtain an angle in radians, approximately 0.017453292519943295 */\nexport const DEG_TO_RAD = Math.PI / 180;\n\nexport const abs = NO_INLINE((a: number) => (a < 0 ? -a : a));\n\nexport const min = NO_INLINE((a: number, b: number) => (a < b ? a : b));\n\nexport const max = NO_INLINE((a: number, b: number) => (a > b ? a : b));\n\nexport const threshold = (value: number | undefined, amount: number) => (abs(value!) > amount ? value! : 0);\n\nexport const clamp = (value: number, minValue: number = 0, maxValue: number = 1) =>\n  value < minValue ? minValue : value > maxValue ? maxValue : value;\n\nexport const angle_wrap_degrees = (degrees: number): number =>\n  Math.atan2(Math.sin(degrees * DEG_TO_RAD), Math.cos(degrees * DEG_TO_RAD)) / DEG_TO_RAD;\n\nexport const angle_lerp_degrees = (a0: number, a1: number, t: number) => {\n  const da = (a1 - a0) % 360;\n  return a0 + (((2 * da) % 360) - da) * clamp(t) || 0;\n};\n\n/** Linear interpolation */\nexport const lerp = (a: number | undefined, b: number | undefined, t: number) =>\n  (t <= 0 ? a : t >= 1 ? b : a! + (b! - a!) * t) || 0;\n\nexport const hypot = (a: number, b: number, c: number = 0) => (a * a + b * b + c * c) ** 0.5;\n","import { translation } from \"../math/matrix-transforms\";\nimport { integers_map } from \"../math/integers-map\";\nimport { polygon_color, polygon_transform, type Polygon } from \"./polygon\";\nimport type { Vec3 } from \"../math/vectors\";\nimport { abs } from \"../math/math\";\n\nexport const GQuad = [\n  { x: -1, z: 1 },\n  { x: 1, z: 1 },\n  { x: 1, z: -1 },\n  { x: -1, z: -1 },\n];\n\n/**\n * Creates a regular polygon\n * The polygon will face up (normal 0, -1, 0).\n */\nexport const polygon_regular = (segments: number, elongate: number = 0): Polygon =>\n  integers_map(segments, (i) => {\n    const z = Math.cos(Math.PI * 2 * (i / segments));\n    return {\n      x: Math.sin(Math.PI * 2 * (i / segments)),\n      y: 0,\n      z: abs(z) < 0.01 ? z : z < 0 ? z - elongate : z + elongate,\n    };\n  });\n\n/**\n * Connects a top and a bottom polygon with side polygons.\n * Top and bottom polygons must have the same length.\n * Top polygon is supposed to be flipped.\n */\nexport const cylinder_sides = (btm: Polygon, top: Polygon, smooth?: 0 | 1 | undefined): Polygon[] =>\n  btm.map((btmi, i, { length }) =>\n    polygon_color(\n      [btmi, top[length - i - 1]!, top[length - ((i + 1) % length) - 1]!, btm[(i + 1) % length]!],\n      btm.$color,\n      smooth,\n    ),\n  );\n\n/** Simplest composition of polygon functions. */\nexport const cylinder = (segments?: number, smooth?: 0 | 1, topSize: number = 0, elongate?: number): Polygon[] => {\n  const points = segments ? polygon_regular(segments, elongate) : GQuad;\n  const top = polygon_transform(points, translation(0, 1).scale3d(topSize > 0 ? topSize : 1));\n  const bottom = polygon_transform(points, translation(0, -1).scale3d(topSize < 0 ? -topSize : 1)).reverse();\n  return [...cylinder_sides(bottom as Polygon, top, smooth), top, bottom];\n};\n\nexport const sphere = (\n  slices: number,\n  stacks = slices,\n  vertexFunc: (slice: number, stack: number, polygon: Polygon) => Vec3 = (x: number, y: number) => {\n    y *= Math.PI / stacks;\n    x *= (Math.PI * 2) / slices;\n    return { x: Math.cos(x) * Math.sin(y), y: Math.cos(y), z: Math.sin(x) * Math.sin(y) };\n  },\n): Polygon[] => {\n  const polygons: Polygon[] = [];\n  for (let i = 0; i < slices; i++) {\n    for (let j = 0; j < stacks; j++) {\n      const polygon = polygon_color([], 0, 1);\n      const vertex = (x: number, y: number) => polygon.push(vertexFunc(x, y, polygon));\n      polygons.push(polygon);\n      vertex(i, j);\n      if (j) {\n        vertex((i + 1) % slices, j);\n      }\n      if (j < stacks - 1) {\n        vertex((i + 1) % slices, j + (1 % stacks));\n      }\n      vertex(i, j + (1 % stacks));\n    }\n  }\n  return polygons;\n};\n","export const material = NO_INLINE(\n  (r: number, g: number, b: number, a: number = 0): number =>\n    ((a * 255) << 24) | ((b * 255) << 16) | ((g * 255) << 8) | (r * 255),\n);\n","import { hypot } from \"./math\";\n\nexport interface Vec2 {\n  x: number;\n  y: number;\n}\n\nexport interface Vec3 {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface Vec4 {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport interface Vec3Optional {\n  x?: number | undefined;\n  y?: number | undefined;\n  z?: number | undefined;\n}\n\nexport interface Plane {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport type Vec2In = Readonly<Vec2>;\n\nexport type Vec3In = Readonly<Vec3>;\n\nexport type Vec4In = Readonly<Vec4>;\n\n/**\n * Computes a polygon plane using the Newell's method.\n * We are not using plane from 3 points algorithm,\n * because this can handle coplanar points and has precision problems.\n */\nexport const plane_fromPolygon = (polygon: readonly Vec3In[]): Plane => {\n  // Newell's method\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = polygon.at(-1)!;\n  let b: Vec3In | number;\n  for (b of polygon) {\n    x += (a.y - b.y) * (a.z + b.z);\n    y += (a.z - b.z) * (a.x + b.x);\n    z += (a.x - b.x) * (a.y + b.y);\n    a = b;\n  }\n  b = hypot(x, y, z);\n  x /= b;\n  y /= b;\n  z /= b;\n  return { x, y, z, w: x * a.x + y * a.y + z * a.z };\n};\n\nexport const vec3_dot = ({ x, y, z }: Vec3In, b: Vec3In): number => x * b.x + y * b.y + z * b.z;\n","import { polygon_color, type Polygon } from \"./polygon\";\nimport { vec3_dot, plane_fromPolygon, type Plane, type Vec3, type Vec3In } from \"../math/vectors\";\n\nexport interface CSGPolygon {\n  $polygon: Polygon;\n\n  $flipped: 0 | boolean;\n\n  /**\n   * When a polygon is splitted, this will contain the polygon from which this polygon was splitted.\n   * This is then used by csg_polygons to merge back splitted polygons if they are both present,\n   * to reduce the number of vertices and triangles.\n   */\n  $parent: CSGPolygon | 0;\n}\n\nexport interface CSGNode extends Plane {\n  /** Coplanar polygons */\n  $polygon: CSGPolygon[];\n  /** Front child */\n  $front: CSGNode | 0;\n  /** Back child */\n  $back: CSGNode | 0;\n}\n\nexport type CSGInput = CSGNode | readonly Polygon[];\n\ninterface SplitPolygonResult {\n  // Front\n  x: CSGPolygon | undefined | false;\n  // Back\n  y: CSGPolygon | undefined | false;\n}\n\nconst CSGPolygon_split = (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const PLANE_EPSILON = 0.00008;\n\n  let jd: number;\n  let front: CSGPolygon | false | undefined;\n  let back: CSGPolygon | false | undefined;\n  const { $polygon, $flipped } = polygon;\n  for (let i = 0; i < $polygon.length; ++i) {\n    jd = vec3_dot(plane, $polygon[i]!) - plane.w;\n    if (jd < -PLANE_EPSILON) {\n      back = polygon;\n    } else if (jd > PLANE_EPSILON) {\n      front = polygon;\n    }\n    if (back && front) {\n      // Split polygon by the plane\n      const fpoints: Vec3[] = [];\n      const bpoints: Vec3[] = [];\n      let iv: Vec3In = $polygon.at(-1)!;\n      let id: number = vec3_dot(iv, plane) - plane.w;\n      for (const jv of $polygon) {\n        jd = vec3_dot(jv, plane) - plane.w;\n        if (id < PLANE_EPSILON) {\n          bpoints.push(iv);\n        }\n        if (id > -PLANE_EPSILON) {\n          fpoints.push(iv);\n        }\n        if ((id > PLANE_EPSILON && jd < -PLANE_EPSILON) || (id < -PLANE_EPSILON && jd > PLANE_EPSILON)) {\n          id /= jd - id;\n          iv = {\n            x: iv.x + (iv.x - jv.x) * id,\n            y: iv.y + (iv.y - jv.y) * id,\n            z: iv.z + (iv.z - jv.z) * id,\n          };\n          fpoints.push(iv);\n          bpoints.push(iv);\n        }\n        iv = jv;\n        id = jd;\n      }\n      front = fpoints.length > 2 && {\n        $polygon: polygon_color(fpoints, $polygon.$color, $polygon.$smooth),\n        $flipped,\n        $parent: polygon,\n      };\n      back = bpoints.length > 2 && {\n        $polygon: polygon_color(bpoints, $polygon.$color, $polygon.$smooth),\n        $flipped,\n        $parent: polygon,\n      };\n      break;\n    }\n  }\n  return { x: front, y: back };\n};\n\nconst csg_tree_addPolygon = (\n  node: CSGNode | 0 | undefined,\n  polygon: CSGPolygon,\n  plane: Plane = plane_fromPolygon(polygon.$polygon),\n): CSGNode => {\n  if (node) {\n    const { x: front, y: back } = CSGPolygon_split(node, polygon);\n    if (!front && !back) {\n      node.$polygon.push(polygon); // Coplanar\n    }\n    if (front) {\n      node.$front = csg_tree_addPolygon(node.$front, front, plane);\n    }\n    if (back) {\n      node.$back = csg_tree_addPolygon(node.$back, back, plane);\n    }\n  } else {\n    node = { x: plane.x, y: plane.y, z: plane.z, w: plane.w, $polygon: [polygon], $front: 0, $back: 0 };\n  }\n  return node;\n};\n\nconst csg_tree_clipNode = (anode: CSGNode, bnode: CSGNode, polygonPlaneFlipped: -1 | 1): CSGPolygon[] => {\n  const result: CSGPolygon[] = [];\n  const recursion = (node: CSGNode, polygon: CSGPolygon) => {\n    let { x: front, y: back } = CSGPolygon_split(node, polygon);\n    if (!front && !back) {\n      if (polygonPlaneFlipped * vec3_dot(node, bnode) > 0) {\n        front = polygon; // Coplanar front\n      } else {\n        back = polygon; // Coplanar back\n      }\n    }\n    if (front) {\n      if (node.$front) {\n        recursion(node.$front, front);\n      } else {\n        result.push(front);\n      }\n    }\n    if (back && node.$back) {\n      recursion(node.$back, back);\n    }\n  };\n\n  for (const polygon of bnode.$polygon) {\n    recursion(anode, polygon);\n  }\n  return result;\n};\n\n/** Loop through all nodes in a tree */\nconst csg_tree_each = (node: CSGNode | 0 | undefined, fn: (node: CSGNode) => void): unknown =>\n  node && (fn(node), csg_tree_each(node.$front, fn), csg_tree_each(node.$back, fn));\n\n/** Convert solid space to empty space and empty space to solid space. */\nexport const csg_tree_flip = <T extends CSGNode | 0 | undefined>(root: T): T => {\n  csg_tree_each(root, (node) => {\n    const back = node.$back;\n    node.$back = node.$front;\n    node.$front = back;\n    node.x *= -1;\n    node.y *= -1;\n    node.z *= -1;\n    node.w *= -1;\n    for (const polygon of node.$polygon) {\n      polygon.$flipped = !polygon.$flipped;\n    }\n  });\n  return root;\n};\n\n/**\n * Extracts all the polygons from a BSP tree.\n * Some polygons will be merged, to reduce the number of triangles.\n */\nexport const csg_polygons = (tree: CSGNode): Polygon[] => {\n  const allPolygons = new Map<CSGPolygon, 0 | boolean>();\n  const byParent = new Map<CSGPolygon, CSGPolygon>();\n\n  /** Adds a polygon, and replaces two splitted polygons that have the same parent with the parent */\n  const add = (polygon: CSGPolygon): CSGPolygon => {\n    if (polygon.$parent) {\n      const found = byParent.get(polygon.$parent);\n      if (found) {\n        allPolygons.delete(found);\n        polygon = add(polygon.$parent);\n      } else {\n        byParent.set(polygon.$parent, polygon);\n      }\n    }\n    return polygon;\n  };\n\n  csg_tree_each(tree, (node) => {\n    for (const polygon of node.$polygon) {\n      allPolygons.set(add(polygon), polygon.$flipped);\n    }\n  });\n\n  return Array.from(allPolygons, ([{ $polygon }, flipped]) => {\n    const polygon = $polygon.map(({ x, y, z }) => ({ x, y, z }));\n    return polygon_color(flipped ? polygon.reverse() : polygon, $polygon.$color, $polygon.$smooth);\n  });\n};\n\n/**\n * If the given argument is a list of polygons, a new BSP tree built from the list of polygons is returned.\n * If the given argument is already a BSP tree, return it as is.\n * Note that array cannot be empty.\n */\nexport const csg_tree = (n: CSGInput): CSGNode =>\n  (n as Polygon[]).length\n    ? // Build a BSP tree from a list of polygons\n      ((n as Polygon[]).reduce<CSGNode | 0>(\n        (prev, $polygon) => csg_tree_addPolygon(prev, { $polygon, $flipped: 0, $parent: 0 }),\n        0,\n      ) as CSGNode)\n    : // An object? We assume is a BSP tree.\n      (n as CSGNode);\n\n/**\n * Union a[0] = a[0] U a[1] U a[2] U ...\n */\nexport const csg_union = (...inputs: CSGInput[]): CSGNode =>\n  inputs.reduce((a: CSGInput, b: CSGInput | undefined): CSGNode => {\n    const polygonsToAdd: [Plane, CSGPolygon[]][] = [];\n    a = csg_tree(a);\n    if (b) {\n      b = csg_tree(b);\n\n      // clip to a, b\n      csg_tree_each(a, (node) => (node.$polygon = csg_tree_clipNode(b as CSGNode, node, 1)));\n\n      // get the list of polygons to be added from b clipped to a\n      csg_tree_each(b, (node) => polygonsToAdd.push([node, csg_tree_clipNode(a as CSGNode, node, -1)]));\n\n      // add the polygons to a\n      for (const [plane, polygons] of polygonsToAdd) {\n        for (const pp of polygons) {\n          csg_tree_addPolygon(a, pp, plane);\n        }\n      }\n    }\n    return a;\n  }) as CSGNode;\n\n/**\n * Subtraction a = a - (b[0] U b[1] U ...)\n * Note that a will be modified if is a tree.\n */\nexport const csg_subtract = (a: CSGInput, ...b: CSGInput[]): CSGNode =>\n  csg_tree_flip(csg_union(csg_tree_flip(csg_tree(a)), ...b));\n\n/**\n * Subtraction a - (b[0] U b[1] U ...)\n * Note that a will be modified if is a tree.\n */\nexport const csg_polygons_subtract = (a: CSGInput, ...b: CSGInput[]) =>\n  csg_polygons(csg_tree_flip(csg_union(csg_tree_flip(csg_tree(a)), ...b)));\n\n/**\n * Note that first tree will be modified if is a tree.\n */\nexport const csg_polygons_union = (...input: CSGInput[]) => csg_polygons(csg_union(...input));\n","import { lerp, min } from \"../math/math\";\n\nlet _globalTime: number | undefined;\n\nexport const GAME_TIME_MAX_DELTA_TIME = 0.055;\n\nexport let gameTimeDelta = 0;\n\nexport let gameTime = 0;\n\nexport let absoluteTime = 0;\n\nexport const damp = NO_INLINE((speed: number) => 1 - Math.exp(-gameTimeDelta * speed));\n\nexport const lerpDamp = NO_INLINE((from: number | undefined, to: number | undefined, speed: number) =>\n  lerp(from, to, damp(speed)),\n);\n\nexport let mainMenuVisible: boolean | undefined;\n\nexport const setMainMenuVisible = (visible: boolean) => (mainMenuVisible = visible);\n\nexport const gameTimeUpdate = (time: number) => {\n  const dt = (time - (_globalTime || time)) / 1000;\n  absoluteTime += dt;\n  gameTime += gameTimeDelta = mainMenuVisible ? 0 : min(GAME_TIME_MAX_DELTA_TIME, dt);\n  _globalTime = time;\n};\n\nexport const setGameTime = (value: number) => {\n  gameTime = value;\n};\n\n// export const gameTimeUpdate = (time: number) => {\n//   const dt = (time - (_globalTime || time)) / 1000;\n//   absoluteTime += dt;\n//   if (dt >= 0.04 + Math.random() * 0.02) {\n//     gameTimeDelta = mainMenuVisible ? 0 : Math.min(GAME_TIME_MAX_DELTA_TIME, (time - (_globalTime || time)) / 1000);\n//     gameTime += gameTimeDelta;\n//     _globalTime = time;\n//   } else {\n//     gameTimeDelta = 0;\n//   }\n//   if (!_globalTime) {\n//     _globalTime = time;\n//   }\n// };\n","export const GAMEPAD_BUTTON_UP = 12;\n\nexport const GAMEPAD_BUTTON_DOWN = 13;\n\nexport const GAMEPAD_BUTTON_LEFT = 14;\n\nexport const GAMEPAD_BUTTON_RIGHT = 15;\n\nexport const GAMEPAD_BUTTON_START = 9;\n\nexport const GAMEPAD_BUTTON_B = 0;\n\nexport const GAMEPAD_BUTTON_A = 1;\n\nexport const GAMEPAD_BUTTON_Y = 2;\n\nexport const GAMEPAD_BUTTON_X = 3;\n\nexport const GAMEPAD_BUTTON_LB = 4;\n\nexport const GAMEPAD_BUTTON_RB = 5;\n\nexport const KEY_CODE_EMPTY = \"\";\n\nexport const KEY_CODE_AGAIN = \"Again\";\n\nexport const KEY_CODE_ALT_LEFT = \"AltLeft\";\n\nexport const KEY_CODE_ALT_RIGHT = \"AltRight\";\n\nexport const KEY_CODE_ARROW_DOWN = \"ArrowDown\";\n\nexport const KEY_CODE_ARROW_LEFT = \"ArrowLeft\";\n\nexport const KEY_CODE_ARROW_RIGHT = \"ArrowRight\";\n\nexport const KEY_CODE_ARROW_UP = \"ArrowUp\";\n\nexport const KEY_CODE_AUDIO_VOLUME_DOWN = \"AudioVolumeDown\";\n\nexport const KEY_CODE_AUDIO_VOLUME_MUTE = \"AudioVolumeMute\";\n\nexport const KEY_CODE_AUDIO_VOLUME_UP = \"AudioVolumeUp\";\n\nexport const KEY_CODE_BACKQUOTE = \"Backquote\";\n\nexport const KEY_CODE_BACKSLASH = \"Backslash\";\n\nexport const KEY_CODE_BACKSPACE = \"Backspace\";\n\nexport const KEY_CODE_BRACKET_LEFT = \"BracketLeft\";\n\nexport const KEY_CODE_BRACKET_RIGHT = \"BracketRight\";\n\nexport const KEY_CODE_BROWSER_BACK = \"BrowserBack\";\n\nexport const KEY_CODE_BROWSER_FAVORITES = \"BrowserFavorites\";\n\nexport const KEY_CODE_BROWSER_FORWARD = \"BrowserForward\";\n\nexport const KEY_CODE_BROWSER_HOME = \"BrowserHome\";\n\nexport const KEY_CODE_BROWSER_REFRESH = \"BrowserRefresh\";\n\nexport const KEY_CODE_BROWSER_SEARCH = \"BrowserSearch\";\n\nexport const KEY_CODE_BROWSER_STOP = \"BrowserStop\";\n\nexport const KEY_CODE_CANCEL = \"Cancel\";\n\nexport const KEY_CODE_CAPS_LOCK = \"CapsLock\";\n\nexport const KEY_CODE_COMMA = \"Comma\";\n\nexport const KEY_CODE_CONTEXT_MENU = \"ContextMenu\";\n\nexport const KEY_CODE_CONTROL_LEFT = \"ControlLeft\";\n\nexport const KEY_CODE_CONTROL_RIGHT = \"ControlRight\";\n\nexport const KEY_CODE_CONVERT = \"Convert\";\n\nexport const KEY_CODE_COPY = \"Copy\";\n\nexport const KEY_CODE_CUT = \"Cut\";\n\nexport const KEY_CODE_DELETE = \"Delete\";\n\nexport const KEY_CODE_DIGIT_0 = \"Digit0\";\n\nexport const KEY_CODE_DIGIT_1 = \"Digit1\";\n\nexport const KEY_CODE_DIGIT_2 = \"Digit2\";\n\nexport const KEY_CODE_DIGIT_3 = \"Digit3\";\n\nexport const KEY_CODE_DIGIT_4 = \"Digit4\";\n\nexport const KEY_CODE_DIGIT_5 = \"Digit5\";\n\nexport const KEY_CODE_DIGIT_6 = \"Digit6\";\n\nexport const KEY_CODE_DIGIT_7 = \"Digit7\";\n\nexport const KEY_CODE_DIGIT_8 = \"Digit8\";\n\nexport const KEY_CODE_DIGIT_9 = \"Digit9\";\n\nexport const KEY_CODE_EJECT = \"Eject\";\n\nexport const KEY_CODE_END = \"End\";\n\nexport const KEY_CODE_ENTER = \"Enter\";\n\nexport const KEY_CODE_EQUAL = \"Equal\";\n\nexport const KEY_CODE_ESCAPE = \"Escape\";\n\nexport const KEY_CODE_F1 = \"F1\";\n\nexport const KEY_CODE_F2 = \"F2\";\n\nexport const KEY_CODE_F3 = \"F3\";\n\nexport const KEY_CODE_F4 = \"F4\";\n\nexport const KEY_CODE_F5 = \"F5\";\n\nexport const KEY_CODE_F6 = \"F6\";\n\nexport const KEY_CODE_F7 = \"F7\";\n\nexport const KEY_CODE_F8 = \"F8\";\n\nexport const KEY_CODE_F9 = \"F9\";\n\nexport const KEY_CODE_F10 = \"F10\";\n\nexport const KEY_CODE_F11 = \"F11\";\n\nexport const KEY_CODE_F12 = \"F12\";\n\nexport const KEY_CODE_F13 = \"F13\";\n\nexport const KEY_CODE_F14 = \"F14\";\n\nexport const KEY_CODE_F15 = \"F15\";\n\nexport const KEY_CODE_F16 = \"F16\";\n\nexport const KEY_CODE_F17 = \"F17\";\n\nexport const KEY_CODE_F18 = \"F18\";\n\nexport const KEY_CODE_F19 = \"F19\";\n\nexport const KEY_CODE_F20 = \"F20\";\n\nexport const KEY_CODE_F21 = \"F21\";\n\nexport const KEY_CODE_F22 = \"F22\";\n\nexport const KEY_CODE_F23 = \"F23\";\n\nexport const KEY_CODE_F24 = \"F24\";\n\nexport const KEY_CODE_FIND = \"Find\";\n\nexport const KEY_CODE_FN = \"Fn\";\n\nexport const KEY_CODE_HANGUL_MODE = \"HangulMode\";\n\nexport const KEY_CODE_HANJA = \"Hanja\";\n\nexport const KEY_CODE_HELP = \"Help\";\n\nexport const KEY_CODE_HOME = \"Home\";\n\nexport const KEY_CODE_INSERT = \"Insert\";\n\nexport const KEY_CODE_INTL_BACKSLASH = \"IntlBackslash\";\n\nexport const KEY_CODE_INTL_RO = \"IntlRo\";\n\nexport const KEY_CODE_INTL_YEN = \"IntlYen\";\n\nexport const KEY_CODE_KANA_MODE = \"KanaMode\";\n\nexport const KEY_CODE_KEY_A = \"KeyA\";\n\nexport const KEY_CODE_KEY_B = \"KeyB\";\n\nexport const KEY_CODE_KEY_C = \"KeyC\";\n\nexport const KEY_CODE_KEY_D = \"KeyD\";\n\nexport const KEY_CODE_KEY_E = \"KeyE\";\n\nexport const KEY_CODE_KEY_F = \"KeyF\";\n\nexport const KEY_CODE_KEY_G = \"KeyG\";\n\nexport const KEY_CODE_KEY_H = \"KeyH\";\n\nexport const KEY_CODE_KEY_I = \"KeyI\";\n\nexport const KEY_CODE_KEY_J = \"KeyJ\";\n\nexport const KEY_CODE_KEY_K = \"KeyK\";\n\nexport const KEY_CODE_KEY_L = \"KeyL\";\n\nexport const KEY_CODE_KEY_M = \"KeyM\";\n\nexport const KEY_CODE_KEY_N = \"KeyN\";\n\nexport const KEY_CODE_KEY_O = \"KeyO\";\n\nexport const KEY_CODE_KEY_P = \"KeyP\";\n\nexport const KEY_CODE_KEY_Q = \"KeyQ\";\n\nexport const KEY_CODE_KEY_R = \"KeyR\";\n\nexport const KEY_CODE_KEY_S = \"KeyS\";\n\nexport const KEY_CODE_KEY_T = \"KeyT\";\n\nexport const KEY_CODE_KEY_U = \"KeyU\";\n\nexport const KEY_CODE_KEY_V = \"KeyV\";\n\nexport const KEY_CODE_KEY_W = \"KeyW\";\n\nexport const KEY_CODE_KEY_X = \"KeyX\";\n\nexport const KEY_CODE_KEY_Y = \"KeyY\";\n\nexport const KEY_CODE_KEY_Z = \"KeyZ\";\n\nexport const KEY_CODE_LANG_1 = \"Lang1\";\n\nexport const KEY_CODE_LANG_2 = \"Lang2\";\n\nexport const KEY_CODE_LAUNCH_APP_1 = \"LaunchApp1\";\n\nexport const KEY_CODE_LAUNCH_APP_2 = \"LaunchApp2\";\n\nexport const KEY_CODE_LAUNCH_MAIL = \"LaunchMail\";\n\nexport const KEY_CODE_LAUNCH_MEDIA_PLAYER = \"LaunchMediaPlayer\";\n\nexport const KEY_CODE_MEDIA_PLAY_PAUSE = \"MediaPlayPause\";\n\nexport const KEY_CODE_MEDIA_SELECT = \"MediaSelect\";\n\nexport const KEY_CODE_MEDIA_STOP = \"MediaStop\";\n\nexport const KEY_CODE_MEDIA_TRACK_NEXT = \"MediaTrackNext\";\n\nexport const KEY_CODE_MEDIA_TRACK_PREVIOUS = \"MediaTrackPrevious\";\n\nexport const KEY_CODE_META_LEFT = \"MetaLeft\";\n\nexport const KEY_CODE_META_RIGHT = \"MetaRight\";\n\nexport const KEY_CODE_MINUS = \"Minus\";\n\nexport const KEY_CODE_NON_CONVERT = \"NonConvert\";\n\nexport const KEY_CODE_NUM_LOCK = \"NumLock\";\n\nexport const KEY_CODE_NUMPAD_0 = \"Numpad0\";\n\nexport const KEY_CODE_NUMPAD_1 = \"Numpad1\";\n\nexport const KEY_CODE_NUMPAD_2 = \"Numpad2\";\n\nexport const KEY_CODE_NUMPAD_3 = \"Numpad3\";\n\nexport const KEY_CODE_NUMPAD_4 = \"Numpad4\";\n\nexport const KEY_CODE_NUMPAD_5 = \"Numpad5\";\n\nexport const KEY_CODE_NUMPAD_6 = \"Numpad6\";\n\nexport const KEY_CODE_NUMPAD_7 = \"Numpad7\";\n\nexport const KEY_CODE_NUMPAD_8 = \"Numpad8\";\n\nexport const KEY_CODE_NUMPAD_9 = \"Numpad9\";\n\nexport const KEY_CODE_NUMPAD_ADD = \"NumpadAdd\";\n\nexport const KEY_CODE_NUMPAD_CHANGE_SIGN = \"NumpadChangeSign\";\n\nexport const KEY_CODE_NUMPAD_COMMA = \"NumpadComma\";\n\nexport const KEY_CODE_NUMPAD_DECIMAL = \"NumpadDecimal\";\n\nexport const KEY_CODE_NUMPAD_DIVIDE = \"NumpadDivide\";\n\nexport const KEY_CODE_NUMPAD_ENTER = \"NumpadEnter\";\n\nexport const KEY_CODE_NUMPAD_EQUAL = \"NumpadEqual\";\n\nexport const KEY_CODE_NUMPAD_MULTIPLY = \"NumpadMultiply\";\n\nexport const KEY_CODE_NUMPAD_PAREN_LEFT = \"NumpadParenLeft\";\n\nexport const KEY_CODE_NUMPAD_PAREN_RIGHT = \"NumpadParenRight\";\n\nexport const KEY_CODE_NUMPAD_SUBTRACT = \"NumpadSubtract\";\n\nexport const KEY_CODE_OPEN = \"Open\";\n\nexport const KEY_CODE_OSLEFT = \"OSLeft\";\n\nexport const KEY_CODE_OSRIGHT = \"OSRight\";\n\nexport const KEY_CODE_PAGE_DOWN = \"PageDown\";\n\nexport const KEY_CODE_PAGE_UP = \"PageUp\";\n\nexport const KEY_CODE_PASTE = \"Paste\";\n\nexport const KEY_CODE_PAUSE = \"Pause\";\n\nexport const KEY_CODE_PERIOD = \"Period\";\n\nexport const KEY_CODE_POWER = \"Power\";\n\nexport const KEY_CODE_PRINT_SCREEN = \"PrintScreen\";\n\nexport const KEY_CODE_PROPS = \"Props\";\n\nexport const KEY_CODE_QUOTE = \"Quote\";\n\nexport const KEY_CODE_SCROLL_LOCK = \"ScrollLock\";\n\nexport const KEY_CODE_SELECT = \"Select\";\n\nexport const KEY_CODE_SEMICOLON = \"Semicolon\";\n\nexport const KEY_CODE_SHIFT_LEFT = \"ShiftLeft\";\n\nexport const KEY_CODE_SHIFT_RIGHT = \"ShiftRight\";\n\nexport const KEY_CODE_SLASH = \"Slash\";\n\nexport const KEY_CODE_SLEEP = \"Sleep\";\n\nexport const KEY_CODE_SPACE = \"Space\";\n\nexport const KEY_CODE_TAB = \"Tab\";\n\nexport const KEY_CODE_UNDO = \"Undo\";\n\nexport const KEY_CODE_UNIDENTIFIED = \"Unidentified\";\n\nexport const KEY_CODE_VOLUME_DOWN = \"VolumeDown\";\n\nexport const KEY_CODE_VOLUME_MUTE = \"VolumeMute\";\n\nexport const KEY_CODE_VOLUME_UP = \"VolumeUp\";\n\nexport const KEY_CODE_WAKE_UP = \"WakeUp\";\n\nexport type KEY_CODE =\n  | \"\"\n  | \"Again\"\n  | \"AltLeft\"\n  | \"AltRight\"\n  | \"ArrowDown\"\n  | \"ArrowLeft\"\n  | \"ArrowRight\"\n  | \"ArrowUp\"\n  | \"AudioVolumeDown\"\n  | \"AudioVolumeMute\"\n  | \"AudioVolumeUp\"\n  | \"Backquote\"\n  | \"Backslash\"\n  | \"Backspace\"\n  | \"BracketLeft\"\n  | \"BracketRight\"\n  | \"BrowserBack\"\n  | \"BrowserFavorites\"\n  | \"BrowserForward\"\n  | \"BrowserHome\"\n  | \"BrowserRefresh\"\n  | \"BrowserSearch\"\n  | \"BrowserStop\"\n  | \"Cancel\"\n  | \"CapsLock\"\n  | \"Comma\"\n  | \"ContextMenu\"\n  | \"ControlLeft\"\n  | \"ControlRight\"\n  | \"Convert\"\n  | \"Copy\"\n  | \"Cut\"\n  | \"Delete\"\n  | \"Digit0\"\n  | \"Digit1\"\n  | \"Digit2\"\n  | \"Digit3\"\n  | \"Digit4\"\n  | \"Digit5\"\n  | \"Digit6\"\n  | \"Digit7\"\n  | \"Digit8\"\n  | \"Digit9\"\n  | \"Eject\"\n  | \"End\"\n  | \"Enter\"\n  | \"Equal\"\n  | \"Escape\"\n  | \"F1\"\n  | \"F2\"\n  | \"F3\"\n  | \"F4\"\n  | \"F5\"\n  | \"F6\"\n  | \"F7\"\n  | \"F8\"\n  | \"F9\"\n  | \"F10\"\n  | \"F11\"\n  | \"F12\"\n  | \"F13\"\n  | \"F14\"\n  | \"F15\"\n  | \"F16\"\n  | \"F17\"\n  | \"F18\"\n  | \"F19\"\n  | \"F20\"\n  | \"F21\"\n  | \"F22\"\n  | \"F23\"\n  | \"F24\"\n  | \"Find\"\n  | \"Fn\"\n  | \"HangulMode\"\n  | \"Hanja\"\n  | \"Help\"\n  | \"Home\"\n  | \"Insert\"\n  | \"IntlBackslash\"\n  | \"IntlRo\"\n  | \"IntlYen\"\n  | \"KanaMode\"\n  | \"KeyA\"\n  | \"KeyB\"\n  | \"KeyC\"\n  | \"KeyD\"\n  | \"KeyE\"\n  | \"KeyF\"\n  | \"KeyG\"\n  | \"KeyH\"\n  | \"KeyI\"\n  | \"KeyJ\"\n  | \"KeyK\"\n  | \"KeyL\"\n  | \"KeyM\"\n  | \"KeyN\"\n  | \"KeyO\"\n  | \"KeyP\"\n  | \"KeyQ\"\n  | \"KeyR\"\n  | \"KeyS\"\n  | \"KeyT\"\n  | \"KeyU\"\n  | \"KeyV\"\n  | \"KeyW\"\n  | \"KeyX\"\n  | \"KeyY\"\n  | \"KeyZ\"\n  | \"Lang1\"\n  | \"Lang2\"\n  | \"LaunchApp1\"\n  | \"LaunchApp2\"\n  | \"LaunchMail\"\n  | \"LaunchMediaPlayer\"\n  | \"MediaPlayPause\"\n  | \"MediaSelect\"\n  | \"MediaStop\"\n  | \"MediaTrackNext\"\n  | \"MediaTrackPrevious\"\n  | \"MetaLeft\"\n  | \"MetaRight\"\n  | \"Minus\"\n  | \"NonConvert\"\n  | \"NumLock\"\n  | \"Numpad0\"\n  | \"Numpad1\"\n  | \"Numpad2\"\n  | \"Numpad3\"\n  | \"Numpad4\"\n  | \"Numpad5\"\n  | \"Numpad6\"\n  | \"Numpad7\"\n  | \"Numpad8\"\n  | \"Numpad9\"\n  | \"NumpadAdd\"\n  | \"NumpadChangeSign\"\n  | \"NumpadComma\"\n  | \"NumpadDecimal\"\n  | \"NumpadDivide\"\n  | \"NumpadEnter\"\n  | \"NumpadEqual\"\n  | \"NumpadMultiply\"\n  | \"NumpadParenLeft\"\n  | \"NumpadParenRight\"\n  | \"NumpadSubtract\"\n  | \"Open\"\n  | \"OSLeft\"\n  | \"OSRight\"\n  | \"PageDown\"\n  | \"PageUp\"\n  | \"Paste\"\n  | \"Pause\"\n  | \"Period\"\n  | \"Power\"\n  | \"PrintScreen\"\n  | \"Props\"\n  | \"Quote\"\n  | \"ScrollLock\"\n  | \"Select\"\n  | \"Semicolon\"\n  | \"ShiftLeft\"\n  | \"ShiftRight\"\n  | \"Slash\"\n  | \"Sleep\"\n  | \"Space\"\n  | \"Tab\"\n  | \"Undo\"\n  | \"Unidentified\"\n  | \"VolumeDown\"\n  | \"VolumeMute\"\n  | \"VolumeUp\"\n  | \"WakeUp\";\n","export const loadStep = (fn: () => void) =>\n  setTimeout(() => {\n    h4.innerHTML += \".\";\n    fn();\n  }, 5);\n","/* -*- mode: javascript; tab-width: 4; indent-tabs-mode: nil; -*-\n *\n * Copyright (c) 2011-2013 Marcus Geelnard\n *\n * This software is provided 'as-is', without any express or implied\n * warranty. In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n *\n * 2. Altered source versions must be plainly marked as such, and must not be\n *    misrepresented as being the original software.\n *\n * 3. This notice may not be removed or altered from any source\n *    distribution.\n *\n */\n\n// WARNING: Source code of the original player was heavily manually modified to reduce bundle size.\n// The song is integrated together with the player itself.\n// This player plays only the game song and is modified.\n// This makes this version not compatible with default soundbox songs.\n\n// Beethoven's Piano Sonata No. 14, 3rd movement, readapted by Ryan Malm for this game\n\nimport { loadStep } from \"../load-step\";\n\nexport let audioBuffer: AudioBuffer;\n\nexport const loadSong = NO_INLINE((done: () => void) => {\n  if (DEBUG && DEBUG_FLAG1) {\n    done();\n    return;\n  }\n\n  const song_rowLen0 = 5513;\n\n  const song_rowLen1 = 4562;\n\n  const song_rowLen2 = 3891;\n\n  // Rows per pattern\n  const song_patternLen = 32;\n\n  // End pattern\n  const song_endPattern = 11;\n\n  const SONG_WORDS = song_patternLen * (song_endPattern + 1) * 2;\n\n  const SONG_TOTAL_WORDS = (song_rowLen0 + song_rowLen1 + song_rowLen2) * SONG_WORDS;\n\n  const song_patterns = \"000001234556112341234556011111111112011111111112000001111112\";\n\n  audioBuffer = new AudioBuffer({\n    numberOfChannels: 2,\n    sampleRate: 44100,\n    length: SONG_TOTAL_WORDS / 2,\n  });\n\n  const mixBufferA = audioBuffer.getChannelData(0);\n\n  const mixBufferB = audioBuffer.getChannelData(1);\n\n  let pendingChannels = 0;\n\n  const makeChannel = (\n    OSC1_VOL: number,\n    OSC1_SEMI: number,\n    OSC1_XENV: number,\n    OSC2_VOL: number,\n    OSC2_SEMI: number,\n    OSC2_XENV: number,\n    NOISE_VOL: number,\n    ENV_ATTACK: number,\n    ENV_SUSTAIN: number,\n    ENV_RELEASE: number,\n    ENV_EXP_DECAY: number,\n    LFO_FREQ: number,\n    FX_FREQ: number,\n    FX_RESONANCE: number,\n    FX_DRIVE: number,\n    FX_PAN_AMT: number,\n    FX_PAN_FREQ: number,\n    FX_DELAY_AMT: number,\n    FX_DELAY_TIME: number,\n    LFO_AMT: number,\n    COLUMNS: string[] | string,\n    channelIndex = pendingChannels++,\n  ) =>\n    loadStep(() => {\n      // Generate audio data for a single track/channel.\n      let mixIndex = 0;\n\n      ENV_RELEASE = ENV_RELEASE ** 2 * 4;\n      COLUMNS = (COLUMNS as string).split(\"+\");\n\n      [song_rowLen0, song_rowLen1, song_rowLen2].map((song_rowLen: number) => {\n        // Local variables\n        let n;\n        let t;\n        let f;\n\n        // Clear effect state\n        let low = 0;\n        let band = 0;\n        let high;\n        let filterActive: boolean | undefined;\n\n        const noteCache: Int32Array[] = [];\n        const chnBuf = new Int32Array(song_rowLen * SONG_WORDS);\n\n        const lfoFreq = 2 ** (LFO_FREQ - 9) / song_rowLen;\n        const panFreq = (Math.PI * 2 ** (FX_PAN_FREQ - 8)) / song_rowLen;\n        const dly = (FX_DELAY_TIME * song_rowLen) & ~1; // Must be an even number\n\n        /** oscillator 0 */\n        const osc_sin = (value: number) => Math.sin(value * Math.PI * 2);\n\n        const createNote = NO_INLINE((note: number) => {\n          // Re-trig oscillators\n          let c1 = 0;\n          let c2 = 0;\n\n          // Local variables.\n          let o1t: number;\n          let o2t: number;\n\n          const noteBuf = new Int32Array(ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE);\n\n          const getnotefreq = (noteFreq: number) => 0.003959503758 * 2 ** ((noteFreq - 256) / 12);\n\n          /** oscillator 1 */\n          const osc_square = (value: number) => (value % 1 < 0.5 ? 1 : -1);\n\n          /** oscillator 2 */\n          const osc_saw = (value: number) => 2 * (value % 1) - 1;\n\n          /** oscillator 3 */\n          const osc_tri = (value: number) => {\n            const v2 = (value % 1) * 4;\n            return v2 < 2 ? v2 - 1 : 3 - v2;\n          };\n\n          const OSC1_WAVEFORM = channelIndex < 2 ? osc_saw : osc_sin;\n          const OSC2_WAVEFORM = channelIndex < 2 ? (channelIndex < 1 ? osc_square : osc_tri) : osc_sin;\n\n          // Generate one note (attack + sustain + release)\n          for (let j1 = 0, j2 = 0; j1 < ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE; ++j1, ++j2) {\n            let e = 1;\n            // Envelope\n            if (j1 < ENV_ATTACK) {\n              e = j1 / ENV_ATTACK;\n            } else if (j1 >= ENV_ATTACK + ENV_SUSTAIN) {\n              e = (j1 - ENV_ATTACK - ENV_SUSTAIN) / ENV_RELEASE;\n              e = (1 - e) * 3 ** ((-ENV_EXP_DECAY / 16) * e);\n            }\n\n            if (j2 >= 0) {\n              // Switch arpeggio note.\n              j2 -= song_rowLen * 4;\n\n              // Calculate note frequencies for the oscillators\n              o1t = getnotefreq(note + OSC1_SEMI);\n              o2t = getnotefreq(note + OSC2_SEMI) * (channelIndex ? 1 : 1.0072);\n            }\n\n            // Add to (mono) channel buffer\n            noteBuf[j1] =\n              (80 * // Oscillator 1\n                (OSC1_WAVEFORM((c1 += o1t! * e ** (OSC1_XENV / 32))) * OSC1_VOL +\n                  // Oscillator 2\n                  OSC2_WAVEFORM((c2 += o2t! * e ** (OSC2_XENV / 32))) * OSC2_VOL +\n                  // Noise oscillator\n                  (NOISE_VOL && NOISE_VOL * (2 * Math.random() - 1))) *\n                e) |\n              0;\n          }\n          return noteBuf;\n        });\n\n        // Patterns\n        for (let p = 0; p <= song_endPattern; ++p) {\n          // Pattern rows\n          for (let row = 0, cp = +song_patterns[channelIndex * 12 + p]!; row < song_patternLen; ++row) {\n            // Calculate start sample number for this row in the pattern\n            const rowStartSample = (p * song_patternLen + row) * song_rowLen;\n\n            // Generate notes for this pattern row\n            for (let col = 0; col < 4; ++col) {\n              n = 0;\n              if (cp) {\n                n = COLUMNS[cp - 1]!.charCodeAt(row + col * song_patternLen) - 40;\n                n += n > 0 ? 106 : 0;\n              }\n              if (n) {\n                const noteBuf = noteCache[n] || (noteCache[n] = createNote(n));\n                for (let j = 0, i = rowStartSample * 2; j < noteBuf.length; ++j, i += 2) {\n                  chnBuf[i] += noteBuf[j]!;\n                }\n              }\n            }\n\n            // Perform effects for this pattern row\n            for (let j = 0, rsample; j < song_rowLen; ++j) {\n              // Dry mono-sample\n              let k = (rowStartSample + j) * 2;\n              let lsample = 0;\n              rsample = chnBuf[k]!;\n\n              // We only do effects if we have some sound input\n              if (rsample || filterActive) {\n                // State variable filter\n                f = FX_FREQ * ((43.23529 * 3.141592) / 44100);\n                if (channelIndex === 1 || channelIndex === 4) {\n                  f *= (osc_sin(lfoFreq * k) * LFO_AMT) / 512 + 0.5;\n                }\n                f = 1.5 * Math.sin(f);\n                low += f * band;\n                high = (1 - FX_RESONANCE / 255) * (rsample - band) - low;\n                band += f * high;\n                rsample = channelIndex === 4 ? band : channelIndex === 3 ? high : low;\n\n                // Distortion\n                if (!channelIndex) {\n                  rsample *= 22 * 1e-5;\n                  rsample = rsample < 1 ? (rsample > -1 ? osc_sin(rsample / 4) : -1) : 1;\n                  rsample /= 22 * 1e-5;\n                }\n\n                // Drive\n                rsample *= FX_DRIVE / 32;\n\n                // Is the filter active (i.e. still audiable)?\n                filterActive = rsample * rsample > 1e-5;\n\n                // Panning\n                t = (Math.sin(panFreq * k) * FX_PAN_AMT) / 512 + 0.5;\n                lsample = rsample * (1 - t);\n                rsample *= t;\n              }\n\n              // Delay is always done, since it does not need sound input\n              if (k >= dly) {\n                // Left channel = left + right[-p] * t\n                lsample += (chnBuf[k - dly + 1]! * FX_DELAY_AMT) / 255;\n\n                // Right channel = right + left[-p] * t\n                rsample += (chnBuf[k - dly]! * FX_DELAY_AMT) / 255;\n              }\n\n              const mixBufferIndex = (mixIndex + k) >> 1;\n\n              mixBufferA[mixBufferIndex] += (chnBuf[k] = lsample) / 65536;\n              mixBufferB[mixBufferIndex] += (chnBuf[++k] = rsample) / 65536;\n            }\n          }\n        }\n\n        mixIndex += song_rowLen * SONG_WORDS;\n      });\n\n      if (!--pendingChannels) {\n        loadStep(done);\n      }\n    });\n\n  makeChannel(\n    69,\n    128,\n    0,\n    143,\n    128,\n    0,\n    0,\n    196,\n    100,\n    36,\n    0,\n    0,\n    149,\n    110,\n    31,\n    47,\n    3,\n    56,\n    2,\n    0,\n    \"(.15:15:=5:=A:=AF=AFIFIMRMRUY(Y(((((((((((((((((((((((((((((M(M(((((((((((((((((((((((((((((R(R(((((((((((((((((((((((((((((U(U+(059<59<A9<AE<AEHAEHMEHMQMQTY(Y+(5:>A:>AF>AFJAFJMFJMRJMRVMRVY(Y+(:?BFFKNRRWZ^(^((:=@FFILRRUX^(^+Q(M(M(O(Q(R(T(Q(T(R(W(U(T(R(Q(N(W((Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(X]+QN(M(N(M(N(M(N(M((((((((((((((((W(Y(Y(Y(Y(Y(Y(Y(Y(((((((((((((((]\",\n  );\n\n  makeChannel(\n    100,\n    128,\n    0,\n    201,\n    128,\n    0,\n    0,\n    100,\n    144,\n    35,\n    0,\n    6,\n    135,\n    0,\n    32,\n    147,\n    6,\n    0,\n    6,\n    195,\n    \".(5(.(5(.(5(.(5(.(5(.(5(.(5(.(5+-(5(-(5(-(5(-(5(-(5(-(5(-(5(-(5+,(5(,(5(,(5(,(5(,(5(,(5(,(5(,(5+*(6(*(6(*(6(*(6(*(6(*(6(*(6(*(6+5(E(E(F(H(I(K(H(K(I(N(M(K(I(H(F(A(((((((((((((((((((((((((((((((5(((5(((5(((5(((5(((5(((5(((5+5(6(5(6(5(6(5(6(5((()(((((((((((A(B(A(B(A(B(A(B(A(((5\",\n  );\n\n  makeChannel(\n    255,\n    116,\n    85,\n    255,\n    116,\n    37,\n    14,\n    64,\n    144,\n    73,\n    99,\n    0,\n    136,\n    15,\n    32,\n    0,\n    0,\n    66,\n    6,\n    0,\n    \"9(((9(((9(((9(((9(((9(((9(((9+9(((Q(((Q(((Q\",\n  );\n\n  makeChannel(\n    0,\n    140,\n    0,\n    0,\n    140,\n    0,\n    81,\n    64,\n    400,\n    47,\n    55,\n    5,\n    239,\n    135,\n    13,\n    176,\n    5,\n    16,\n    4,\n    187,\n    \"9(9(9(9(9(9(9(999(9(9(9(999(9(9+9(9(9(9(9(999(9(((((Q\",\n  );\n\n  makeChannel(\n    221,\n    128,\n    64,\n    210,\n    128,\n    64,\n    255,\n    64,\n    144,\n    73,\n    79,\n    7,\n    195,\n    15,\n    21,\n    20,\n    0,\n    9,\n    3,\n    64,\n    \"((((Q(((((((Q(((((((Q(((((((Q+Q((Q((Q((Q((Q((Q((((Q\",\n  );\n});\n","#version 300 es\nprecision highp float;\n\n// as printed by the console.log on csm.ts\nconst vec3 lightDir = vec3(-0.6560590289905073, 0.6663690071652679, -0.3543146860766681);\n\n#define CSM_TEXTURE_SIZE 2048.\n\n#define zNear 0.3\n#define CSM_PLANE_DISTANCE 55.\n#define zFar 181.\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\nin highp vec4 UntransformedFragPos;\nin lowp vec4 Color;\n\nuniform highp sampler2D groundTexture;\nuniform highp sampler2DShadow csm_texture0;\nuniform highp sampler2DShadow csm_texture1;\n\nuniform mat4 viewMatrix;\nuniform mat4 csm_matrices[2];\nuniform vec3 viewPos;\n\nout vec4 O;\n\nvoid main() {\n  vec4 fragPosVec4 = vec4(FragPos.xyz, 1);\n  vec3 normal = normalize(VNormal.xyz);\n\n  vec3 tex = Color.w *\n    (texture(groundTexture, UntransformedFragPos.zy * .035) * normal.x +\n     texture(groundTexture, UntransformedFragPos.xz * .035) * normal.y +\n     texture(groundTexture, UntransformedFragPos.xy * .035) * normal.z)\n      .xyz;\n\n  // Displacement map\n  normal = normalize(normal.xyz + tex * .5);\n\n  float lambert = dot(normal, lightDir);\n  float shadow = 1.;\n  float depthValue = abs((viewMatrix * fragPosVec4).z);\n\n  // Gets the fragment position in light space\n  vec4 csmCoords = (depthValue < CSM_PLANE_DISTANCE ? csm_matrices[0] : csm_matrices[1]) * fragPosVec4;\n\n  // perform perspective divide and transform to [0,1] range\n  csmCoords = (csmCoords / csmCoords.w) * .5 + .5;\n\n  if (csmCoords.z < 1.) { // Only if inside far plane\n    shadow = 0.;\n\n    // Shadow bias could be computed based on normal and light, something like\n    // 0.0003 * (1. - clamp(dot(normal, lightDir), 0., 1.))\n\n    for (float x = -1.; x <= 1.; ++x) {\n      for (float y = -1.; y <= 1.; ++y) {\n        vec3 c = vec3(\n          csmCoords.xy + vec2(x, y) / CSM_TEXTURE_SIZE,\n          csmCoords.z -\n            // shadow bias\n            (1. / CSM_TEXTURE_SIZE / 2.8)\n        );\n        shadow += depthValue < CSM_PLANE_DISTANCE ? texture(csm_texture0, c) : texture(csm_texture1, c);\n      }\n    }\n    shadow /= 9.;\n  }\n\n  vec3 rgbColor = Color.xyz * (1. - tex.x);\n\n  float lavaLight = max(max(abs(normal.x), abs(normal.z)) * .3 - normal.y, 0.) * pow(max(0., (8. - FragPos.y) / 48.), 1.6);\n\n  O = vec4(\n    // lava light\n    vec3(lavaLight, lavaLight * lavaLight * .5, 0) +\n      // ambient\n      vec3(.09, .05, .11) * rgbColor +\n      // diffuse\n      (rgbColor * (max(0., lambert) * .5 + (rgbColor * lambert * lambert * vec3(.5, .45, .3))) * (shadow * .75 + .25)) +\n      // specular\n      vec3(.6, .6, .5) * pow(max(0., dot(normalize(FragPos.xyz - viewPos), reflect(lightDir, normal))), 35.) * shadow,\n    1\n  );\n}\n","import {\n  constDef_zNear,\n  constDef_CSM_PLANE_DISTANCE as CSM_PLANE_DISTANCE,\n  constDef_zFar,\n} from \"../shaders/main-fragment.frag\";\n\nexport const zNear = constDef_zNear;\n\nexport { CSM_PLANE_DISTANCE };\n\nexport const zFar = constDef_zFar;\n\nexport const fieldOfViewDegrees = 60;\n\nexport const fieldOfViewRadians = (fieldOfViewDegrees * Math.PI) / 180; // in radians\n\nexport const fieldOfViewAmount = 1 / Math.tan(fieldOfViewRadians / 2);\n\nexport const mat_perspective = (near: number, far: number, mx: number, my: number) =>\n  new DOMMatrix([\n    mx,\n    0,\n    0,\n    0,\n    0,\n    my,\n    0,\n    0,\n    0,\n    0,\n    (far + near) / (near - far),\n    -1,\n    0,\n    0,\n    (2 * far * near) / (near - far),\n    0,\n  ]);\n","import {\n  GAMEPAD_BUTTON_A,\n  GAMEPAD_BUTTON_B,\n  GAMEPAD_BUTTON_DOWN,\n  GAMEPAD_BUTTON_LEFT,\n  GAMEPAD_BUTTON_RIGHT,\n  GAMEPAD_BUTTON_UP,\n  GAMEPAD_BUTTON_X,\n  GAMEPAD_BUTTON_Y,\n  GAMEPAD_BUTTON_START,\n  type KEY_CODE,\n} from \"./utils/keycodes\";\nimport { abs, clamp, max, threshold } from \"./math/math\";\nimport { camera_rotation, resetGame } from \"./game/world-state\";\nimport { mainMenuVisible, setMainMenuVisible, absoluteTime, gameTimeDelta } from \"./game/game-time\";\nimport { audioBuffer } from \"./music/music-player\";\nimport { CSM_PLANE_DISTANCE, fieldOfViewAmount, mat_perspective, zFar, zNear } from \"./math/matrix-perspective\";\n\nexport let interact_pressed: 0 | 1;\n\nexport const resetInteractPressed = () => (interact_pressed = 0);\n\nexport let player_first_person: boolean | 0 | 1 | undefined;\n\nexport let input_forward = 0;\n\nexport let input_strafe = 0;\n\nexport let csm_projections: DOMMatrix[];\n\nexport let projection: DOMMatrix;\n\nexport const exit_player_first_person = () => (player_first_person = 0);\n\nexport let page_update = () => {\n  let touchStartTime: number | undefined;\n\n  let touchPosStartX: number | undefined;\n  let touchPosStartY: number | undefined;\n  let touchPosIdentifier: number | undefined;\n  let touchPosMoved: number | undefined;\n\n  let touchRotX: number | undefined;\n  let touchRotY: number | undefined;\n  let touchRotIdentifier: number | undefined;\n  let touchRotMoved: number | undefined;\n  let touchStartCameraRotX: number | undefined;\n  let touchStartCameraRotY: number | undefined;\n  let touch_movementX: number;\n  let touch_movementY: number;\n\n  let gamepadInteractPressed: 0 | 1 | undefined;\n\n  let music_on = !DEBUG || !DEBUG_FLAG1;\n\n  const keyboard_downKeys: (boolean | 0 | 1 | undefined)[] = [];\n\n  const KEY_INTERACT = 0;\n  const KEY_MENU = 1;\n  const KEY_LEFT = 2;\n  const KEY_RIGHT = 3;\n  const KEY_FRONT = 4;\n  const KEY_BACK = 5;\n\n  let audioContext: AudioContext | undefined;\n  let songAudioSource: AudioBufferSourceNode | undefined;\n\n  const updateMusicOnState = () => {\n    b4.innerHTML = \"Music: \" + music_on;\n    if (songAudioSource) {\n      if (mainMenuVisible || !music_on) {\n        songAudioSource.disconnect();\n      } else {\n        // connect the AudioBufferSourceNode to the  destination so we can hear the sound\n        songAudioSource.connect(audioContext!.destination);\n      }\n    }\n  };\n\n  const handleResize = () => {\n    const mx = fieldOfViewAmount * ((hC.height = innerHeight) / (hC.width = innerWidth));\n    projection = mat_perspective(zNear, zFar, mx, fieldOfViewAmount);\n    csm_projections = [\n      mat_perspective(zNear, CSM_PLANE_DISTANCE, mx, fieldOfViewAmount),\n      mat_perspective(CSM_PLANE_DISTANCE, zFar, mx, fieldOfViewAmount),\n    ];\n\n    touchPosIdentifier = touchRotIdentifier = undefined;\n    keyboard_downKeys.length =\n      interact_pressed =\n      gamepadInteractPressed =\n      touch_movementX =\n      touch_movementY =\n      input_forward =\n      input_strafe =\n        0;\n\n    if (document.hidden && !DEBUG) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      mainMenu(true);\n    }\n  };\n\n  const mainMenu = (value: boolean) => {\n    if (mainMenuVisible !== value) {\n      setMainMenuVisible(value);\n      handleResize();\n      hB.className = value ? \"l m\" : \"l\";\n      updateMusicOnState();\n      if (value) {\n        try {\n          document.exitFullscreen().catch(() => false);\n          document.exitPointerLock();\n        } catch {}\n      }\n    }\n  };\n\n  const start = (firstPerson?: 0 | 1 | undefined) => {\n    try {\n      if (!audioContext) {\n        audioContext = new AudioContext();\n        songAudioSource = audioContext.createBufferSource();\n\n        // Load the buffer into the audio source\n        songAudioSource.buffer = audioBuffer;\n\n        // Loop forever\n        songAudioSource.loop = true;\n\n        // Start\n        songAudioSource.start();\n      }\n\n      hB.requestFullscreen().catch(() => false);\n    } catch {}\n    mainMenu(false);\n    player_first_person = firstPerson;\n  };\n\n  if (!DEBUG) {\n    oncontextmenu = () => false;\n  }\n\n  onclick = (e) => {\n    if (!mainMenuVisible) {\n      if (e.target === hC) {\n        interact_pressed = 1;\n      }\n      if (player_first_person) {\n        try {\n          hC.requestPointerLock();\n        } catch {}\n      }\n    }\n  };\n\n  // Menu hamburger button\n  b5.onclick = () => mainMenu(true);\n\n  // \"Play first person\" button\n  b2.onclick = () => start(1);\n\n  // \"Play\" button\n  b1.onclick = () => start();\n\n  // \"Music\" button\n  b4.onclick = () => {\n    music_on = !music_on;\n    updateMusicOnState();\n  };\n\n  // \"Restart\" button\n  b3.onclick = () => {\n    // eslint-disable-next-line no-alert\n    if (confirm(\"Restart game?\")) {\n      resetGame();\n    }\n  };\n\n  onkeyup = onkeydown = (e) => {\n    if (!e.repeat) {\n      const pressed = !!e.type[5] && (!DEBUG || e.target === hB);\n\n      const mapped = (\n        {\n          [\"KeyE\"]: KEY_INTERACT,\n          [\"Space\"]: KEY_INTERACT,\n          [\"Enter\"]: KEY_INTERACT,\n\n          [\"Escape\"]: KEY_MENU,\n\n          [\"KeyA\"]: KEY_LEFT,\n          [\"ArrowLeft\"]: KEY_LEFT,\n\n          [\"KeyD\"]: KEY_RIGHT,\n          [\"ArrowRight\"]: KEY_RIGHT,\n\n          [\"KeyW\"]: KEY_FRONT,\n          [\"ArrowUp\"]: KEY_FRONT,\n\n          [\"KeyS\"]: KEY_BACK,\n          [\"ArrowDown\"]: KEY_BACK,\n        } as Partial<Record<KEY_CODE, number>>\n      )[e.code as KEY_CODE]!;\n\n      keyboard_downKeys[mapped] = pressed;\n\n      if (pressed) {\n        if (mapped === KEY_INTERACT) {\n          interact_pressed = 1;\n        }\n        if (mapped === KEY_MENU) {\n          mainMenu(true);\n        }\n      }\n    }\n  };\n\n  onmousemove = (e) => {\n    if (player_first_person) {\n      camera_rotation.y += 0.1 * e.movementX || 0;\n      camera_rotation.x += 0.1 * e.movementY || 0;\n    }\n  };\n\n  hC.ontouchstart = (e) => {\n    if (!mainMenuVisible) {\n      for (const { identifier, pageX, pageY } of e.changedTouches) {\n        if (player_first_person && pageX > hC.clientWidth / 2) {\n          if (touchRotIdentifier === undefined) {\n            touchRotMoved = 0;\n            touchRotX = pageX;\n            touchRotY = pageY;\n            touchRotIdentifier = identifier;\n            touchStartCameraRotY = camera_rotation.x;\n            touchStartCameraRotX = camera_rotation.y;\n          }\n        } else if (touchPosIdentifier === undefined) {\n          touchPosMoved = 0;\n          touchPosStartX = pageX;\n          touchPosStartY = pageY;\n          touchPosIdentifier = identifier;\n        }\n      }\n      touchStartTime = absoluteTime;\n    }\n  };\n\n  const TOUCH_SIZE = 19;\n  const TOUCH_MOVE_THRESHOLD = 0.3;\n  const TOUCH_MOVE_SNAP = 0.2;\n\n  hC.ontouchmove = (e) => {\n    if (!mainMenuVisible) {\n      for (const { identifier, pageX, pageY } of e.changedTouches) {\n        if (touchRotIdentifier === identifier) {\n          touchRotMoved = 1;\n          camera_rotation.x = touchStartCameraRotY! + (pageY - touchRotY!) / 2;\n          camera_rotation.y = touchStartCameraRotX! + (pageX - touchRotX!) / 2;\n        }\n        if (touchPosIdentifier === identifier) {\n          const deltaX = (touchPosStartX! - pageX) / TOUCH_SIZE;\n          const absDeltaX = abs(deltaX);\n          const deltaY = (touchPosStartY! - pageY) / TOUCH_SIZE;\n          const absDeltaY = abs(deltaY);\n\n          const m = max(absDeltaX, absDeltaY) > TOUCH_MOVE_THRESHOLD;\n          if (m) {\n            // Moved, disable the click\n            touchPosMoved = 1;\n          }\n\n          touch_movementX = clamp(deltaX, -1) * ((m && absDeltaX > TOUCH_MOVE_SNAP) as any);\n          touch_movementY = clamp(deltaY, -1) * ((m && absDeltaY > TOUCH_MOVE_SNAP) as any);\n\n          // Move the invisible joysticks\n          if (absDeltaX > 2) {\n            touchPosStartX = TOUCH_SIZE * (deltaX < 0 ? -1 : 1) + pageX;\n          }\n          if (absDeltaY > 2) {\n            touchPosStartY = TOUCH_SIZE * (deltaY < 0 ? -1 : 1) + pageY;\n          }\n        }\n      }\n    }\n  };\n\n  hC.ontouchend = (e) => {\n    if (document.activeElement === hB) {\n      e.preventDefault();\n    }\n\n    let click: 1 | undefined;\n    for (const touch of e.changedTouches) {\n      if (touch.identifier === touchRotIdentifier) {\n        touchRotIdentifier = undefined;\n        if (!touchRotMoved) {\n          click = 1;\n        }\n        touchRotMoved = 0;\n      } else if (touch.identifier === touchPosIdentifier) {\n        touchPosIdentifier = undefined;\n        touch_movementY = touch_movementX = 0;\n        if (!touchPosMoved) {\n          click = 1;\n        }\n        touchPosMoved = 0;\n      } else {\n        click = 1;\n      }\n    }\n\n    if (e.target === hC && click && touchStartTime) {\n      const diff = absoluteTime - touchStartTime;\n      if (diff > 0.02 && diff < 0.7) {\n        interact_pressed = 1;\n      }\n    }\n  };\n\n  const getGamepadButtonState = (gamepad: Gamepad, index: number) =>\n    gamepad.buttons[index]?.pressed || (gamepad.buttons[index]?.value as any) > 0 ? 1 : 0;\n\n  page_update = () => {\n    input_forward = touch_movementY + (keyboard_downKeys[KEY_FRONT] ? 1 : 0) - (keyboard_downKeys[KEY_BACK] ? 1 : 0);\n    input_strafe = touch_movementX + (keyboard_downKeys[KEY_LEFT] ? 1 : 0) - (keyboard_downKeys[KEY_RIGHT] ? 1 : 0);\n\n    const gamepad = navigator.getGamepads()[0];\n    if (gamepad) {\n      if (player_first_person) {\n        camera_rotation.x += 80 * gameTimeDelta * threshold(gamepad.axes[3], 0.3);\n        camera_rotation.y += 80 * gameTimeDelta * threshold(gamepad.axes[2], 0.3);\n      }\n\n      input_forward +=\n        getGamepadButtonState(gamepad, GAMEPAD_BUTTON_UP) -\n        getGamepadButtonState(gamepad, GAMEPAD_BUTTON_DOWN) -\n        threshold(gamepad.axes[1], 0.2);\n\n      input_strafe +=\n        getGamepadButtonState(gamepad, GAMEPAD_BUTTON_LEFT) -\n        getGamepadButtonState(gamepad, GAMEPAD_BUTTON_RIGHT) -\n        threshold(gamepad.axes[0], 0.2);\n\n      if (getGamepadButtonState(gamepad, GAMEPAD_BUTTON_START)) {\n        mainMenu(true);\n      }\n\n      const interactButtonPressed =\n        getGamepadButtonState(gamepad, GAMEPAD_BUTTON_X) ||\n        getGamepadButtonState(gamepad, GAMEPAD_BUTTON_Y) ||\n        getGamepadButtonState(gamepad, GAMEPAD_BUTTON_A) ||\n        getGamepadButtonState(gamepad, GAMEPAD_BUTTON_B);\n\n      if (interactButtonPressed && !gamepadInteractPressed) {\n        interact_pressed = 1;\n      }\n      gamepadInteractPressed = interactButtonPressed;\n    }\n  };\n\n  document.onpointerlockchange = () => {\n    player_first_person = !!document.pointerLockElement;\n  };\n  document.onvisibilitychange = onblur = onresize = handleResize;\n\n  mainMenu(!DEBUG || !!DEBUG_FLAG2);\n\n  if (DEBUG) {\n    console.log(\"fieldOfViewAmount:\", fieldOfViewAmount);\n  }\n};\n","// levers\n\nexport const LEVER_ID_GATE0 = 0;\n\nexport const LEVER_ID_LEVEL1_DESCENT = 1;\n\nexport const LEVER_ID_ROTATING_CORRIDOR = 2;\n\nexport const LEVER_ID_CRYSTALS = 3;\n\nexport const LEVER_ID_MONUMENT = 4;\n\nexport const LEVER_ID_DETOUR = 5;\n\nexport const LEVER_ID_BEFORE_PUSHING_RODS = 6;\n\nexport const LEVER_ID_AFTER_PUSHING_RODS = 7;\n\nexport const LEVER_ID_AFTER_ROTATING_PLATFORMS = 8;\n\nexport const LEVER_ID_AFTER_JUMPING_PADS = 9;\n\nexport const LEVER_ID_GATE1 = 10;\n\nexport const LEVER_ID_TRIANGLE_PLATFORM = 11;\n\nexport const LEVER_ID_FLOATING_ELEVATOR = 12;\n\nexport const LEVER_ID_DONUT_PAD = 13;\n\nexport const LEVER_ID_BOAT0 = 14;\n\nexport const LEVER_ID_BOAT1 = 15;\n","// static models\n\nexport const MODEL_ID_SKY = 0;\n\nexport const MODEL_ID_STATIC_WORLD = 1;\n\n// translation only\n\nexport const MODEL_ID_LEVEL1_CENTRAL_PLATFORM = 2;\n\nexport const MODEL_ID_LEVEL2_BLACK_PLATFORM0 = 3;\n\nexport const MODEL_ID_LEVEL2_BLACK_PLATFORM1 = 4;\n\nexport const MODEL_ID_LEVEL2_CENTRAL_PLATFORM = 5;\n\nexport const MODEL_ID_TRIANGLE_PLATFORM = 6;\n\nexport const MODEL_ID_LEVEL2_MINI_PLATFORM_VERTICAL = 7;\n\nexport const MODEL_ID_LEVEL2_MINI_PLATFORM_HORIZONTAL = 8;\n\nexport const MODEL_ID_LEVEL2_HEX_CORRIDOR_DOOR = 9;\n\nexport const MODEL_ID_ELEVATORS0 = 10;\n\nexport const MODEL_ID_ELEVATORS1 = 11;\n\nexport const MODEL_ID_MONUMENT = 12;\n\nexport const MODEL_ID_PUSHING_ROD0 = 13;\n\nexport const MODEL_ID_PUSHING_ROD1 = 14;\n\nexport const MODEL_ID_PUSHING_ROD2 = 15;\n\nexport const MODEL_ID_OSCILLATING_HEX_PAD0 = 16;\n\nexport const MODEL_ID_OSCILLATING_HEX_PAD1 = 17;\n\nexport const MODEL_ID_OSCILLATING_HEX_PAD2 = 18;\n\nexport const MODEL_ID_OSCILLATING_HEX_PAD3 = 19;\n\nexport const MODEL_ID_JUMPING_PAD0 = 20;\n\nexport const MODEL_ID_JUMPING_PAD1 = 21;\n\nexport const MODEL_ID_JUMPING_PAD2 = 22;\n\nexport const MODEL_ID_FLOATING_ELEVATOR_PAD = 23;\n\nexport const MODEL_ID_GATE0 = 24;\n\nexport const MODEL_ID_GATE1 = 25;\n\nexport const MODEL_ID_GATE2 = 26;\n\nexport const MODEL_ID_GATE3 = 27;\n\n// full matrices\n\nexport const MODEL_ID_LEVEL2_ROTATING_HEX_CORRIDOR = 28;\n\nexport const MODEL_ID_DONUT_PAD = 29;\n\nexport const MODEL_ID_PENDULUMS = 30;\n\nexport const MODEL_ID_ROTATING_PLATFORM0 = 31;\n\nexport const MODEL_ID_ROTATING_PLATFORM1 = 32;\n\nexport const MODEL_ID_ROTATING_PLATFORM2 = 33;\n\nexport const MODEL_ID_ROTATING_PLATFORM3 = 34;\n\nexport const MODEL_ID_BOAT0 = 35;\n\nexport const MODEL_ID_BOAT1 = 36;\n\n// levers\n\nexport const MODEL_ID_LEVER0 = 37;\n\nexport const MODEL_ID_LEVER1 = 38;\n\nexport const MODEL_ID_LEVER2 = 39;\n\nexport const MODEL_ID_LEVER3 = 40;\n\nexport const MODEL_ID_LEVER4 = 41;\n\nexport const MODEL_ID_LEVER5 = 42;\n\nexport const MODEL_ID_LEVER6 = 43;\n\nexport const MODEL_ID_LEVER7 = 44;\n\nexport const MODEL_ID_LEVER8 = 45;\n\nexport const MODEL_ID_LEVER9 = 46;\n\nexport const MODEL_ID_LEVER10 = 47;\n\nexport const MODEL_ID_LEVER11 = 48;\n\nexport const MODEL_ID_LEVER12 = 49;\n\nexport const MODEL_ID_LEVER13 = 50;\n\nexport const MODEL_ID_LEVER14 = 51;\n\nexport const MODEL_ID_LEVER15 = 52;\n\n// player\n\nexport const MODEL_ID_PLAYER_BODY = 53;\n\nexport const MODEL_ID_PLAYER_LEG0 = 54;\n\nexport const MODEL_ID_PLAYER_LEG1 = 55;\n\n// objects\n\nexport const MODEL_ID_SOUL_COLLISION = 56;\n\nexport const MODEL_ID_SOUL = 57;\n","import { abs, clamp } from \"../math/math\";\nimport type { Vec2, Vec3 } from \"../math/vectors\";\nimport { levers, souls, SOULS_COUNT } from \"./models\";\nimport { gameTime, lerpDamp, setGameTime } from \"./game-time\";\nimport { exit_player_first_person } from \"../page\";\nimport { LEVER_ID_BOAT0, LEVER_ID_BOAT1 } from \"./levers-ids\";\nimport { devLeverNames } from \"../dev-tools/dev-models\";\n\nexport const LOCAL_STORAGE_SAVED_GAME_KEY = \"Dante-22\";\n\nexport const camera_rotation: Vec2 = { x: 0, y: 180 } as Vec2;\n\nexport const player_position_final: Vec3 = { x: 0, y: 0, z: 0 };\n\nexport let souls_collected_count: number;\n\nexport let game_completed: 0 | 1 | undefined;\n\nexport let player_last_pulled_lever = LEVER_ID_BOAT0;\n\nexport let firstBoatLerp: number;\n\nexport let secondBoatLerp: number;\n\nlet _messageEndTime = 0.1;\n\nexport const worldStateUpdate = () => {\n  secondBoatLerp = lerpDamp(\n    secondBoatLerp,\n    levers[LEVER_ID_BOAT1]!.$lerpValue2,\n    0.2 + 0.3 * abs(levers[LEVER_ID_BOAT1]!.$lerpValue2 * 2 - 1),\n  );\n\n  if (game_completed) {\n    exit_player_first_person();\n    firstBoatLerp = lerpDamp(firstBoatLerp, -9, 0.015);\n  } else {\n    firstBoatLerp = lerpDamp(firstBoatLerp, clamp(gameTime / 3), 1);\n  }\n\n  if (_messageEndTime && gameTime > _messageEndTime) {\n    _messageEndTime = 0;\n    h4.innerHTML = \"\";\n  }\n};\n\nexport const showMessage = (message: string, duration: number) => {\n  if (_messageEndTime < Infinity) {\n    _messageEndTime = gameTime + duration;\n    h4.innerHTML = message;\n  }\n};\n\nconst updateCollectedSoulsCounter = () => {\n  h3.innerHTML =\n    \"Souls: \" +\n    [0, \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\"][\n      (souls_collected_count = souls.reduce((acc, v) => v.$value + acc, 0))\n    ]! +\n    \" / XIII\";\n};\n\nexport const loadGame = () => {\n  let _savedLevers: number[] = [];\n  let _savedSouls: number[] = [];\n  try {\n    const [savedLevers, savedSouls, savedLastPulledLever, savedSecondBoatLerp, savedGameTime] = JSON.parse(\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY]!,\n    );\n    _savedLevers = savedLevers;\n    _savedSouls = savedSouls;\n    player_last_pulled_lever = savedLastPulledLever;\n    secondBoatLerp = savedSecondBoatLerp;\n    setGameTime(savedGameTime);\n  } catch (e) {\n    if (DEBUG) {\n      console.log(e);\n    }\n  }\n\n  levers.map(\n    (lever, index) =>\n      (lever.$lerpValue = lever.$lerpValue2 = lever.$value = index !== LEVER_ID_BOAT0 && _savedLevers[index]! ? 1 : 0),\n  );\n  souls.map((soul, index) => (soul.$value = _savedSouls[index]! ? 1 : 0));\n\n  updateCollectedSoulsCounter();\n  firstBoatLerp = souls_collected_count || player_last_pulled_lever !== LEVER_ID_BOAT0 ? 1 : 0;\n};\n\nexport const resetGame = () => {\n  localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = \"\";\n  location.reload();\n};\n\nexport const saveGame = () => {\n  localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = JSON.stringify([\n    levers.map((v) => v.$value),\n    souls.map((v) => v.$value),\n    player_last_pulled_lever,\n    secondBoatLerp,\n    gameTime,\n  ]);\n};\n\nexport const onSoulCollected = () => {\n  showMessage(\n    [\n      ,\n      \"Mark Zuckemberg<br>made the world worse\",\n      \"Giorgia Meloni<br>fascist\",\n      \"Andrzej Mazur<br>for the js13k competition\",\n      \"Donald Trump<br>lies\",\n      \"Kim Jong-un<br>Dictator, liked pineapple on pizza\",\n      \"Maxime Euziere<br>forced me to finish this game\",\n      \"She traded NFTs apes\",\n      ,\n      \"Vladimir Putin<br>evil war\",\n      \"He was not a good person\",\n      ,\n      \"Salvatore Previti<br>made this evil game<br><br>Done. Go back to the boat\",\n    ][souls_collected_count] || 'Catched a \"crypto bro\".<br>\"Web3\" is all scam, lies and grift',\n    6,\n  );\n\n  updateCollectedSoulsCounter();\n  saveGame();\n};\n\nexport const onPlayerPullLever = (leverIndex: number) => {\n  player_last_pulled_lever = leverIndex;\n  if (DEBUG) {\n    console.log((devLeverNames[leverIndex] || \"LEVER\") + \" \" + leverIndex + \" = \" + levers[leverIndex]?.$value);\n  }\n\n  showMessage(\"* click *\", 1);\n  saveGame();\n};\n\nexport const onFirstBoatLeverPulled = () => {\n  if (souls_collected_count < SOULS_COUNT) {\n    showMessage(\"Not leaving now, there are souls to catch!\", 3);\n  } else if (!game_completed) {\n    game_completed = 1;\n    showMessage(\"Well done. They will be punished.<br>Thanks for playing\", Infinity);\n  }\n};\n","import { MODELS_WITH_FULL_TRANSFORM, MODELS_WITH_SIMPLE_TRANSFORM, SOULS_COUNT } from \"./models\";\n\nexport const transformsBuffer = new Float32Array(\n  4 * (4 * (MODELS_WITH_FULL_TRANSFORM + SOULS_COUNT) + MODELS_WITH_SIMPLE_TRANSFORM),\n);\n","import { hypot } from \"../math/math\";\nimport { matrixTransformPoint } from \"../math/matrix\";\nimport { player_position_final } from \"./world-state\";\n\nexport const distanceToPlayer = (): number => {\n  matrixTransformPoint();\n  return hypot(\n    player_position_final.x - matrixTransformPoint.x,\n    player_position_final.y - matrixTransformPoint.y,\n    player_position_final.z - matrixTransformPoint.z,\n  );\n};\n","import { souls, allModels, type Circle, type Soul, MODELS_WITH_FULL_TRANSFORM } from \"./models\";\nimport { onSoulCollected } from \"./world-state\";\nimport type { Vec3Optional } from \"../math/vectors\";\nimport { min, angle_lerp_degrees, DEG_TO_RAD, clamp, hypot, abs } from \"../math/math\";\nimport { identity, matrixCopy, matrixToArray, tempMatrix } from \"../math/matrix\";\nimport { lerpDamp, damp, gameTime } from \"./game-time\";\nimport type { Polygon } from \"../geometry/polygon\";\nimport { polygons_transform } from \"../geometry/polygon\";\nimport { cylinder } from \"../geometry/geometry\";\nimport { material } from \"../geometry/material\";\nimport { MODEL_ID_BOAT0 } from \"./models-ids\";\nimport { transformsBuffer } from \"./transforms-buffer\";\nimport { distanceToPlayer } from \"./distance-to-player\";\nimport { devModelsAdd } from \"../dev-tools/dev-models\";\n\nexport let currentModelMmatrix: DOMMatrix;\n\nlet currentModelPolygons: Polygon[][];\n\nexport const newModel = (name: string) => {\n  if (DEBUG) {\n    devModelsAdd(allModels.length, name);\n  }\n  allModels.push({ $matrix: (currentModelMmatrix = new DOMMatrix()), $polygon: (currentModelPolygons = []) });\n};\n\nexport const meshAdd = (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  transform: DOMMatrixReadOnly = identity,\n  color?: number | undefined,\n) => currentModelPolygons.push(polygons_transform(polygons, transform, color));\n\nconst SOUL_SENSITIVITY_RADIUS = 1.6;\n\nexport const newSoul = (transform: DOMMatrixReadOnly, ...walkingPath: Circle[]) => {\n  let dirX = -1;\n  let dirZ = 0;\n  let randAngle = 0;\n  let lookAngle: number;\n  let prevX: number;\n  let prevZ: number;\n  let velocity: number;\n  let wasInside: 0 | 1 | undefined | 1 = 1;\n\n  let circle = walkingPath[0]!;\n  let [targetX, targetZ] = circle;\n  let [soulX, soulZ] = circle;\n\n  const parentModelMatrix = currentModelMmatrix;\n  const index = souls.length;\n\n  const soul: Soul = (() => {\n    if (soul.$value) {\n      // Soul was collected.\n\n      matrixCopy(allModels[MODEL_ID_BOAT0]!.$matrix).translateSelf(\n        1.2 * (index % 4) - 1.7 + Math.sin(gameTime + index) / 7,\n        -2,\n        -5.5 + (index >> 2) * 1.7 + abs((index % 4) - 2) + Math.cos(gameTime / 1.5 + index) / 6,\n      );\n    } else {\n      // Soul is free to catch.\n\n      let isInside: 0 | 1 | undefined;\n      let contextualVelocity = 1;\n      let mindist = Infinity;\n      for (let i = 0; i < walkingPath.length; i++) {\n        const c = walkingPath[i]!;\n        const distance = hypot(targetX - c[0], targetZ - c[1]);\n        contextualVelocity = min(contextualVelocity, distance / c[2]);\n        const circleSDF = distance - c[2];\n        if (circleSDF < 0) {\n          isInside = 1;\n        } else if (circleSDF < mindist) {\n          mindist = circleSDF;\n          circle = c;\n        }\n      }\n\n      if (!isInside) {\n        const ax = targetX - circle[0];\n        const az = targetZ - circle[1];\n        let magnitude = hypot(ax, az);\n        let angle = Math.atan2(-az, ax);\n        if (wasInside) {\n          velocity = clamp(velocity / (1 + Math.random()));\n          randAngle = ((Math.random() - 0.5) * Math.PI) / 2;\n        }\n        angle += randAngle;\n        dirX = -Math.cos(angle);\n        dirZ = Math.sin(angle);\n        if (magnitude > 0.1) {\n          // limit the vector length to the circle radius, ghost cannot escape by mistake\n          magnitude = min(magnitude, circle[2]) / magnitude;\n          targetX = ax * magnitude + circle[0];\n          targetZ = az * magnitude + circle[1];\n        }\n      }\n\n      wasInside = isInside;\n\n      velocity = lerpDamp(velocity, 3 + 6 * (1 - contextualVelocity), 3 + contextualVelocity);\n      soulX = lerpDamp(soulX, (targetX = lerpDamp(targetX, targetX + dirX, velocity)), velocity);\n      soulZ = lerpDamp(soulZ, (targetZ = lerpDamp(targetZ, targetZ + dirZ, velocity)), velocity);\n\n      lookAngle = angle_lerp_degrees(lookAngle, Math.atan2(soulX - prevX, soulZ - prevZ) / DEG_TO_RAD - 180, damp(3));\n\n      matrixCopy(parentModelMatrix)\n        .multiplySelf(transform)\n        .translateSelf((prevX = soulX), 0, (prevZ = soulZ))\n        .rotateSelf(0, lookAngle, 7 * Math.sin(gameTime * 1.7));\n\n      if (distanceToPlayer() < SOUL_SENSITIVITY_RADIUS) {\n        soul.$value = 1;\n        onSoulCollected();\n      }\n    }\n\n    matrixToArray(tempMatrix, transformsBuffer, MODELS_WITH_FULL_TRANSFORM + index);\n  }) as Soul;\n\n  souls.push(soul);\n\n  if (DEBUG_FLAG0) {\n    for (const c of walkingPath) {\n      meshAdd(cylinder(12), transform.translate(c[0], -1.7, c[1]).scale(c[2], 0.01, c[2]), material(0.3, 0.3, 0.38));\n    }\n  }\n};\n","import { identity } from \"../math/matrix\";\nimport { levers, LEVERS_COUNT, type Circle, type Lever } from \"./models\";\nimport { GQuad, cylinder, polygon_regular, sphere, cylinder_sides } from \"../geometry/geometry\";\nimport { polygon_transform, polygons_transform, type Polygon } from \"../geometry/polygon\";\nimport { material } from \"../geometry/material\";\nimport { csg_union, csg_polygons_subtract } from \"../geometry/csg\";\nimport { integers_map } from \"../math/integers-map\";\nimport { meshAdd, newModel, newSoul, currentModelMmatrix } from \"./models-factory\";\nimport { devAllModelsPrint, devLeverAdd } from \"../dev-tools/dev-models\";\nimport { translation } from \"../math/matrix-transforms\";\nimport { abs } from \"../math/math\";\n\nexport const build_life_the_universe_and_everything = (): 42 | void => {\n  if (DEBUG) {\n    console.time(\"build_life_the_universe_and_everything\");\n  }\n\n  const pushingRod = csg_polygons_subtract(\n    polygons_transform(cylinder(), translation(0, -0.5, 1).scale(1.15, 1.2, 6.5), material(0.25, 0.25, 0.35, 0.3)),\n    csg_polygons_subtract(\n      polygons_transform(cylinder(3), translation(0, 0, -5.5).scale(3, 2), material(0.6, 0.3, 0.4, 0.3)),\n      polygons_transform(cylinder(), translation(0, 0, -3.65).scale(2.5, 3), material(0.6, 0.3, 0.4, 0.3)),\n    ),\n    ...[-1, 1].map((i) =>\n      polygons_transform(cylinder(), translation(i * 1.2, -0.5, 1).scale(0.14, 0.3, 6.5), material(0.7, 0.2, 0, 0.3)),\n    ),\n  );\n\n  const hexCorridor = [\n    polygons_transform(cylinder(), translation(0, -3).scale(11, 1.4, 3), material(0.9, 0.9, 0.9, 0.2)),\n    polygons_transform(cylinder(), translation(0, -2.2).scale(7.7, 0.5, 4), material(0.5, 0.5, 0.5, 0.2)),\n    integers_map(12, (i) =>\n      polygons_transform(cylinder(), translation(i - 5.5, 4.4).scale(0.1, 0.1, 2), material(0.6, 0.5, 0.3, 0.2)),\n    ).flat(),\n    polygons_transform(\n      csg_polygons_subtract(\n        polygons_transform(cylinder(6), identity.rotate(90).scale(6, 8, 6)),\n        polygons_transform(cylinder(4, 0, 0.01), translation(0, 6).scale(12, 2, 0.75).rotate(0, 45)),\n        polygons_transform(cylinder(6), identity.rotate(90).scale(5, 12, 5)),\n        ...[-5, 0, 5].map((x) =>\n          polygons_transform(cylinder(5), translation(x, 2.5).rotate(90, 0, 36).scale(1.8, 10, 1.8)),\n        ),\n      ),\n      identity,\n      material(0.3, 0.6, 0.6, 0.3),\n    ),\n  ].flat();\n\n  const HORN_STACKS = 11;\n\n  const hornMatrix = (i: number) => {\n    i /= HORN_STACKS;\n    return translation(Math.sin(i * Math.PI), i)\n      .rotateSelf(10 * i)\n      .scaleSelf(1.002 - i, 1, 1.002 - i);\n  };\n\n  const hornPolygons = integers_map(HORN_STACKS, (i) =>\n    cylinder_sides(\n      polygon_transform(polygon_regular(16), hornMatrix(i), material(1, 1, 0.8, 0.2)).reverse(),\n      polygon_transform(polygon_regular(16), hornMatrix(i + 1), material(1, 1, 0.8, 0.2)),\n      1,\n    ),\n  ).flat();\n\n  // Initialize the full screen triangle for the sky. Must be the first model.\n\n  newModel(\"MODEL_ID_SKY\");\n\n  meshAdd([GQuad.slice(1)], translation(-2).scale3d(3).rotate(90, 0));\n\n  newModel(\"MODEL_ID_STATIC_WORLD\");\n\n  const newLever = ($transform: DOMMatrixReadOnly, name: string): void => {\n    levers.push({ $matrix: currentModelMmatrix, $transform } as Partial<Lever> as Lever);\n\n    // Lever base\n    meshAdd(cylinder(5), $transform.translate(0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n    meshAdd(cylinder(5), $transform.translate(-0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n    meshAdd(cylinder().slice(0, -1), $transform.translate(0, -0.4).scale(0.5, 0.1, 0.5), material(0.5, 0.5, 0.4));\n\n    if (DEBUG) {\n      devLeverAdd(levers.length - 1, name);\n    }\n  };\n\n  // LEVER for the first gate, after the first boat\n  newLever(translation(-5.4, 1.5, -19).rotate(0, -90), \"LEVER_ID_GATE0\");\n\n  [-15, 15].map((z, j) => {\n    // in and out\n    meshAdd(cylinder(), translation(0, 0, j ? 22 : -23).scale(3, 1, 8), material(0.9, 0.9, 0.9, 0.2));\n\n    //  gate top\n    meshAdd(cylinder(), translation(0, 6.3, z).scale(4, 0.3, 1), material(0.3, 0.3, 0.3, 0.4));\n\n    //  gate bottom\n    meshAdd(cylinder().slice(0, -1), translation(0, 1, z).scale(3, 0.2, 0.35), material(0.5, 0.5, 0.5, 0.3));\n  });\n\n  // first boat attachment\n  meshAdd(cylinder(), translation(-5, -0.2, -26).scale(3.2, 1, 2.5).skewX(3), material(0.8, 0.8, 0.8, 0.2));\n\n  // small entrance wall\n  meshAdd(cylinder(), translation(3, 1.5, -20).scale(0.5, 2, 5), material(0.7, 0.7, 0.7, 0.2));\n\n  // first lever pad\n  meshAdd(cylinder(5), translation(-5.4, 0, -19).scale(2, 1, 2).rotate(0, -90), material(0.6, 0.3, 0.3, 0.4));\n  meshAdd(cylinder(), translation(-3.4, -0.2, -19).scale(2, 1, 1.5).rotate(0, -90), material(0.75, 0.75, 0.75, 0.2));\n\n  // base\n\n  meshAdd(\n    csg_polygons_subtract(\n      csg_union(\n        // middle base\n        csg_polygons_subtract(\n          polygons_transform(\n            cylinder(6, 0, 0, 0.3),\n            translation(0, -0.92).scale(13, 2, 13),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // descent cut\n          polygons_transform(\n            cylinder(),\n            identity.rotate(0, 60).translate(14, 0.5, -1).scale(2.4, 5, 2),\n            material(0.5, 0.5, 0.5, 0.5),\n          ),\n        ),\n\n        // descent\n        polygons_transform(\n          cylinder(),\n          identity.rotate(0, 60).translate(14.8, -1.46, -1).rotate(-30).translate(0, -1).scale(4.03, 1.6, 4.5),\n          material(0.8, 0.2, 0.2, 0.5),\n        ),\n\n        // hole extension\n        polygons_transform(cylinder(6), translation(0, -8).scale(9, 8, 7), material(0.2, 0.1, 0.4, 0.5)),\n\n        // lower base\n        polygons_transform(\n          cylinder(6, 0, 0, 0.3),\n          translation(8, -4, -4).scale(14, 2, 13),\n          material(0.7, 0.7, 0.7, 0.2),\n        ),\n      ),\n      // lower lever pad\n      polygons_transform(cylinder(6), translation(15.8, -1.5, 3.8).scale(3.5, 1, 3.5), material(0.5, 0.5, 0.5, 0.5)),\n\n      // smooth hole\n      polygons_transform(cylinder(5, 0, 1.5), translation(0, 1).scale(4.5, 0.3, 4.5), material(0.7, 0.5, 0.9, 0.2)),\n\n      // hole\n      polygons_transform(cylinder(5), identity.scale(5, 30, 5), material(0.4, 0.2, 0.6, 0.5)),\n    ),\n  );\n\n  // LEVER in the descent of the first level\n  newLever(translation(15.8, -2, 3.8), \"LEVER_ID_LEVEL1_DESCENT\");\n\n  // ******** LEVEL 2 ********\n\n  // fixed platform after triangle platform\n\n  meshAdd(cylinder(), translation(-21.1 + 2.45, -3, 55).scale(2.45, 1.4, 2.7), material(0.9, 0.9, 0.9, 0.2));\n\n  // LEVER before the rotating corridor\n  newLever(translation(-55, -1.1, 46).rotate(0, 90), \"LEVER_ID_ROTATING_CORRIDOR\");\n\n  meshAdd(cylinder(7), translation(-57, -2.6, 46).scale(4, 1, 4), material(0.8, 0.8, 0.8, 0.3));\n  meshAdd(cylinder(6), translation(-61.3, -2.4, 49).scale(3, 1, 5), material(0.4, 0.6, 0.6, 0.3));\n\n  // hex corridor 1\n\n  meshAdd(hexCorridor, translation(-53, 0, 55));\n\n  // connection from rotating hex corridor to platforms\n\n  meshAdd(cylinder(), translation(-88.3, -5.1, 55).rotate(-30).scale(5, 1.25, 4.5), material(0.7, 0.7, 0.7, 0.2));\n\n  meshAdd(\n    cylinder(3, 0, -0.5),\n    translation(-88.4, -3.9, 55).rotate(0, -90, 17).scale(3, 1.45, 5.9),\n    material(0.8, 0.8, 0.8, 0.2),\n  );\n\n  // first arc door\n\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(cylinder(), translation(-100, 1, 63).scale(7.5, 4), material(0.5, 0.5, 0.5, 0.4)),\n      polygons_transform(cylinder(), translation(-100, 0, 63).scale(2, 2, 4), material(0.5, 0.5, 0.5, 0.4)),\n      polygons_transform(\n        cylinder(20, 1),\n        translation(-100, 2, 70).scale(2, 2, 10).rotate(90, 0),\n        material(0.5, 0.5, 0.5, 0.4),\n      ),\n    ),\n  );\n\n  // platform after the rotating hex corridor\n\n  meshAdd(\n    csg_polygons_subtract(\n      csg_union(\n        // straiht line\n        polygons_transform(cylinder(), translation(-100, -2.6, 70).scale(3, 1.1, 7), material(0.8, 0.8, 0.8, 0.2)),\n\n        // base\n        polygons_transform(cylinder(), translation(-100, -2.4, 55).scale(8, 0.9, 8), material(0.8, 0.8, 0.8, 0.2)),\n\n        // right path to the boat, second boat attachment\n        polygons_transform(\n          cylinder(),\n          translation(-113, -2.6, 55).scale(6.2, 1.1, 3).skewX(3),\n          material(0.8, 0.8, 0.8, 0.2),\n        ),\n\n        // 45 degrees detour hexagon\n        polygons_transform(\n          cylinder(6),\n          translation(-88.79, -2.6, 80.21).scale(6, 1.1, 6).rotate(0, 15),\n          material(0.6, 0.6, 0.6, 0.3),\n        ),\n        // 45 degrees detour\n        polygons_transform(\n          cylinder(),\n          translation(-96, -2.6, 73).rotate(0, 45).scale(3, 1.1, 5),\n          material(0.8, 0.8, 0.8, 0.2),\n        ),\n\n        // ascension continuation\n        polygons_transform(cylinder(), translation(-100, 0.42, 92).scale(3, 1.1, 4.1), material(0.8, 0.8, 0.8, 0.2)),\n        // ascension\n        polygons_transform(\n          cylinder(),\n          translation(-100, -1.1, 82.39).rotate(-15, 0).scale(3, 1.1, 6),\n          material(0.8, 0.8, 0.8, 0.2),\n        ),\n      ),\n\n      // decorative octagons\n\n      polygons_transform(cylinder(8), translation(-100, -1, 55).scale(7, 0.9, 7), material(0.3, 0.3, 0.3, 0.4)),\n      polygons_transform(cylinder(8), translation(-100, -2, 55).scale(4, 0.3, 4), material(0.4, 0.4, 0.4, 0.5)),\n      polygons_transform(\n        cylinder(8, 0, -3.1),\n        translation(-100, -3, 55).scale(0.4, 1, 0.4),\n        material(0.4, 0.4, 0.4, 0.5),\n      ),\n    ),\n  );\n\n  GQuad.map(({ x, z }) => {\n    // First gate columns\n    meshAdd(cylinder(6), translation(x * 3, 3, z * 15).scale(0.7, 4, 0.7), material(0.6, 0.3, 0.3, 0.4));\n\n    // hex columns in the central platform\n    meshAdd(cylinder(6), translation(-100 + x * 7, -3, z * 7 + 55).scale(1, 8.1), material(0.6, 0.15, 0.15, 0.8));\n    [4, -0.4].map((i) =>\n      meshAdd(cylinder(6), translation(-100 + x * 7, i, z * 7 + 55).scale(1.3, 0.5, 1.3), material(0.4, 0.2, 0.2, 0.8)),\n    );\n\n    // columns around the monument/sculpture\n    [1.5, 8].map((y) =>\n      meshAdd(\n        cylinder(15, 1),\n        translation(x * 9 - 38.9, y - 11.3, z * 11 + 17).scale(1.5, 0.5, 1.5),\n        material(0.6, 0.6, 0.6, 0.3),\n      ),\n    );\n    meshAdd(\n      cylinder(14, 1).slice(0, -2),\n      translation(x * 9 - 38.9, -18, z * 11 + 17).scale(1, 14.2),\n      material(0.25, 0.25, 0.25, 1),\n    );\n  });\n\n  // crystals\n\n  integers_map(7, (i) => {\n    meshAdd(\n      cylinder(((i * 23 + 1) % 5) + 5, 0, 0.5),\n      translation(-101 + Math.sin(i) * 5 + i, -2.3 - i, 44.9 - i * 2.8).scaleSelf(5 + i / 2, 1.1 + i / 6, 5 + i / 3),\n      material(0.5 - i / 17, 0.5 - (i & 1) / 9, 0.6, 0.3),\n    );\n  });\n\n  // crystals continuation pad\n\n  meshAdd(cylinder(), translation(-87, -9.5, 24).scale(7, 1, 3), material(0.4, 0.5, 0.6, 0.4));\n\n  // lever pad\n\n  meshAdd(cylinder(4), translation(-86, -9.2, 27).scale(5, 1, 5), material(0.5, 0.6, 0.7, 0.3));\n\n  meshAdd(cylinder(12, 1), translation(-86, -9, 31).scale(1.5, 1, 1.5), material(0.3, 0.3, 0.4, 0.1));\n\n  // LEVER crystals lever\n  newLever(translation(-86, -7.5, 31), \"LEVER_ID_CRYSTALS\");\n\n  // pad after elevators, monument base\n\n  // lever pad\n  meshAdd(cylinder(5), translation(-38.9, -11.1, 10).scale(2, 1.2, 2), material(0.2, 0.4, 0.7, 0.3));\n\n  meshAdd(\n    csg_polygons_subtract(\n      csg_union(\n        // base\n        polygons_transform(cylinder(), translation(-38.9, -11.3, 17).scale(11, 1, 13), material(0.3, 0.4, 0.6, 0.3)),\n        // blue pentagon\n        polygons_transform(cylinder(5), translation(-38.9, -11.1, 17).scale(9, 1, 9), material(0, 0.2, 0.3, 0.5)),\n      ),\n      // hole\n      polygons_transform(cylinder(5), translation(-38.9, -11.1, 17).scale3d(5.4), material(0, 0.2, 0.3, 0.5)),\n    ),\n  );\n\n  // LEVER sculpture/monument lever\n  newLever(translation(-38.9, -9.4, 10), \"LEVER_ID_MONUMENT\");\n\n  // Grid with hex holes\n  meshAdd(\n    csg_polygons_subtract(\n      csg_union(\n        // holed base\n        polygons_transform(cylinder(6), translation(0, 0, -18).scale(15, 1.3, 15), material(0.7, 0.7, 0.7, 0.3)),\n        // after monument continuation\n        polygons_transform(cylinder(5), identity.scale(4.5, 1.2, 9), material(0.45, 0.4, 0.6, 0.3)),\n      ),\n      ...integers_map(6, (z) =>\n        integers_map(6, (x) =>\n          polygons_transform(\n            cylinder(6),\n            translation(4.6 * x - (z & 1 ? 10 : 12), 0, 4.6 * z + 2 * Math.sin(x * 4) - 32).scale3d(2),\n            material(0.7, 0.7, 0.7, 0.3),\n          ),\n        ),\n      ).flat(),\n    ),\n    translation(-38.9, -11.3, -1),\n  );\n\n  // LEVER detour lever\n  newLever(translation(-84, -0.7, 85).rotate(0, 45), \"LEVER_ID_DETOUR\");\n\n  // Detour lever pad\n  meshAdd(cylinder(5), translation(-84, -2, 85).scale(4, 0.8, 4).rotate(0, 10), material(0.8, 0.1, 0.25, 0.4));\n\n  // ******** LEVEL AFTER SECOND BOAT ********\n\n  // pushing rods container\n\n  // LEVER after second boat lever, before the pushing rods\n  newLever(translation(-116, -1.4, -18).rotate(0, 180), \"LEVER_ID_BEFORE_PUSHING_RODS\");\n\n  const pushingRodsPositions = [-110, -100, -92, -82, -106, -97, -88];\n\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(cylinder(), translation(-96.5, -1.4, -2).scale(20, 2.1, 3)),\n      ...pushingRodsPositions.map((x) => polygons_transform(cylinder(), translation(x, 0.05, -3).scale(1.35, 2, 9))),\n    ),\n    identity,\n    material(0.5, 0.5, 0.6, 0.2),\n  );\n\n  meshAdd(cylinder(), translation(-96.5, 1, -2).scale(19, 0.3, 0.3), material(0.5, 0.5, 0.6, 0.2));\n\n  meshAdd(cylinder(6), translation(-116, -2.6, -16.5).scale(3.2, 0.8, 3), material(0.6, 0.5, 0.7, 0.2));\n  // second boat attachment, over the arcs\n  meshAdd(cylinder(), translation(-116, -2.6, -12).scale(3.2, 1.1, 4).skewX(3), material(0.8, 0.8, 0.8, 0.2));\n\n  meshAdd(cylinder().slice(0, -1), translation(-115.5, -17, -12).scale(0.5, 15, 2.2), material(0.6, 0.6, 0.6, 0.3));\n  meshAdd(cylinder(8).slice(0, -2), translation(-114, -17, -2).scale(2, 15, 2), material(0.6, 0.6, 0.6, 0.3));\n\n  meshAdd(cylinder(8).slice(0, -2), translation(-79, -17, -2).scale(2, 15, 2), material(1, 1, 1, 0.3));\n  meshAdd(cylinder().slice(0, -1), translation(-77, -17, -50.5).scale(2.2, 15, 0.5), material(0.6, 0.6, 0.6, 0.3));\n\n  // tower\n\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(\n        cylinder(12).slice(0, -1),\n        translation(-77, -14.5, -12).scale(4, 17.5, 4),\n        material(0.7, 0.7, 0.7, 0.2),\n      ),\n      polygons_transform(cylinder(12), translation(-77, 3.1, -12).scale(3, 5, 3), material(0.4, 0.5, 0.6, 0.2)),\n      polygons_transform(cylinder(), translation(-79, 0.1, -12).scale(3.5, 2, 1.3), material(0.4, 0.5, 0.6, 0.2)),\n      polygons_transform(cylinder(), translation(-77, 0.1, -14).scale(1.5, 2, 2), material(0.4, 0.5, 0.6, 0.2)),\n    ),\n  );\n\n  // internal pad\n\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(cylinder(), translation(-93, -5.8, -40).scale(9, 1, 5), material(0.8, 0.8, 0.8, 0.1)),\n      polygons_transform(cylinder(9), translation(-98, -5.8, -40).scale(3, 8, 3), material(0.7, 0.7, 0.7, 0.2)),\n    ),\n  );\n\n  meshAdd(cylinder(), translation(-84.9, -4.3, -40).rotate(12).scale(6, 1, 3), material(0.6, 0.6, 0.6, 0.3));\n  meshAdd(cylinder(9).slice(0, -1), translation(-98, -18.4, -40).scale(2.5, 13.5, 2.5), material(0.5, 0.5, 0.5, 0.3));\n\n  // LEVER internal pad after the pushing blocks lever\n  newLever(translation(-98, -4.4, -40).rotate(0, 90), \"LEVER_ID_AFTER_PUSHING_RODS\");\n\n  // ******** LEVEL AFTER CENTRAL GATE ********\n\n  // after the hex pads\n\n  [-1, 1].map((x, j) => {\n    // far arc level after central gate, after the hex pads\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(cylinder(), translation(x * -4, 3.5, -0.5).scale(4, 4, 0.7), material(0.5, 0.5, 0.5, 0.4)),\n        polygons_transform(\n          cylinder(5),\n          translation(x * -5.3, 7)\n            .rotate(90, 0)\n            .scale(1.7, 5, 1.7),\n          material(0.6, 0.24, 0.2, 0.5),\n        ),\n        polygons_transform(cylinder(), identity.scale(3, 3, 10), material(0.6, 0.24, 0.2, 0.5)),\n        polygons_transform(\n          cylinder(5),\n          translation(x * -5.3, 3.8)\n            .rotate(90, 0, 35)\n            .scale(0.75, 5, 0.75),\n          material(0.6, 0.24, 0.2, 0.5),\n        ),\n        polygons_transform(\n          cylinder(32, 1),\n          translation(0, 3, -5).scale(3, 4, 10).rotate(90, 0),\n          material(0.6, 0.24, 0.2, 0.5),\n        ),\n      ),\n      translation(x - 100, 0.7, 97),\n    );\n\n    meshAdd(cylinder(12, 1), translation(-7.5 * x - 100, 3.7, 96).scale(0.8, 4, 0.8), material(0.6, 0.24, 0.2, 0.5));\n\n    // far arc gate\n    [7.2, 1.5].map((y) =>\n      meshAdd(\n        cylinder(15, 1),\n        translation(-7.5 * x - 100, y + 0.7, 96).scale(1.1, 0.5, 1.1),\n        material(0.5, 0.24, 0.2, 0.4),\n      ),\n    );\n\n    // LEVEL AFTER THE ROTATING PLATFORMS horns\n    meshAdd(\n      hornPolygons,\n      translation(x * -8, 1, 85)\n        .scale(1.2, 10, 1.2)\n        .rotate(0, 90 * x + 90),\n    );\n\n    // after the hex pads horns\n    meshAdd(\n      hornPolygons,\n      translation(x * -5 - 100, 1.7, 110)\n        .scale(1.2, 10, 1.2)\n        .rotate(0, 90 * x - 90),\n    );\n\n    // first level horns\n    integers_map(5, (i) =>\n      meshAdd(\n        hornPolygons,\n        translation((j - 0.5) * 18.5, 0, i * 4.8 - 9.5)\n          .rotate(0, 180 - j * 180)\n          .scale(1.2, 10, 1.2),\n      ),\n    );\n  });\n\n  // left continuation with hole for first rotating platform\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(cylinder(), translation(-82.07, 0.8, 106).scale(11, 0.9, 2.2), material(0.7, 0.7, 0.7, 0.1)),\n      polygons_transform(cylinder(45, 1), translation(-81, 0.7, 106).scale3d(7.7), material(0.7, 0.7, 0.7, 0.1)),\n    ),\n  );\n\n  // rotating platforms connecting pads\n  meshAdd(cylinder(), translation(-50.7, 1, 99).scale(2, 0.65, 1), material(0.7, 0.7, 0.7, 0.2));\n  meshAdd(cylinder(), translation(-58, 1, 106).scale(2, 0.65, 2), material(0.7, 0.7, 0.7, 0.2));\n\n  // exit from the rotating platforms\n  meshAdd(cylinder(), translation(-34.2, 0.4, 91).scale(3, 1, 3), material(0.7, 0.7, 0.7, 0.3));\n  meshAdd(cylinder(), translation(-42, 0.4, 91).scale(5, 1, 2.5), material(0.7, 0.7, 0.7, 0.3));\n\n  // lever pad\n  meshAdd(cylinder(5), translation(-34, 0.2, 96).scale(3, 2, 4).rotate(-20, 0), material(0.2, 0.5, 0.5, 0.6));\n\n  // LEVER lever after rotating platforms\n  newLever(translation(-34, 2.7, 96).rotate(-12, 0), \"LEVER_ID_AFTER_ROTATING_PLATFORMS\");\n\n  // base\n\n  meshAdd(\n    csg_polygons_subtract(\n      csg_union(\n        polygons_transform(cylinder(), translation(-101.5, 0.7, 93.5).scale(10.5, 1, 2), material(0.7, 0.7, 0.7, 0.2)),\n        polygons_transform(\n          cylinder(6, 0, 0, 0.6),\n          translation(-100, 0.7, 105.5).scale(8, 1, 11),\n          material(0.7, 0.7, 0.7, 0.2),\n        ),\n      ),\n      polygons_transform(cylinder(5), translation(-100, 0.7, 113).scale(4, 3, 4), material(0.7, 0.7, 0.7, 0.2)),\n    ),\n  );\n\n  // ******** LEVEL AFTER THE ROTATING PLATFORMS ********\n\n  const makeBigArc = (height: number) =>\n    csg_polygons_subtract(\n      polygons_transform(cylinder().slice(0, -1), translation(0, -height / 2).scale(6, height - 1, 2.2)),\n      polygons_transform(cylinder().slice(0, -1), translation(0, -height / 2 - 4).scale(4, height - 5, 4)),\n      polygons_transform(\n        cylinder(28, 1),\n        translation(0, height / 2 - 9)\n          .rotate(90, 0, 90)\n          .scale3d(4),\n      ),\n    );\n\n  integers_map(3, (i) => {\n    // The big arcs in the level after second boat\n    meshAdd(makeBigArc(16), translation(-77, -9, i * -12 - 8 - 12).rotate(0, 90), material(0.6, 0.6, 0.6, 0.3));\n    meshAdd(makeBigArc(16), translation(i * 12 - 109, -9, -12), material(0.6, 0.6, 0.6, 0.3));\n\n    // Big arcs in the level after rotating platforms\n    meshAdd(\n      makeBigArc(24.7 - 0.7 * (i & 1)),\n      translation(6 * i - 6, 4 - (i & 1), 111 - 0.2 * (i & 1)),\n      i & 1 ? material(0.5, 0.5, 0.5, 0.3) : material(0.35, 0.35, 0.35, 0.5),\n    );\n  });\n\n  // middle base\n  meshAdd(\n    csg_polygons_subtract(\n      csg_union(\n        // arcs roof, continuation to pendulums\n        polygons_transform(cylinder(), translation(0, 16, 111).scale(3, 1, 3.8), material(0.5, 0.3, 0.3, 0.4)),\n        // base\n        polygons_transform(\n          cylinder(6, 0, 0, 0.3),\n          translation(0, -0.92, 95).scale(14, 2, 14),\n          material(0.8, 0.8, 0.8, 0.2),\n        ),\n        // arcs roof\n        polygons_transform(cylinder(), translation(0, 16, 110.5).scale(12, 1, 3), material(0.5, 0.3, 0.3, 0.4)),\n      ),\n\n      // base hole\n      polygons_transform(cylinder(5), translation(0, 0, 95).scale3d(6), material(0.3, 0.3, 0.3, 0.5)),\n      // arcs roof hole\n      polygons_transform(cylinder(5), translation(0, 16, 103.5).scale(5.5, 5, 5.5), material(0.5, 0.3, 0.3, 0.4)),\n    ),\n  );\n\n  // LEVER lever after jumping pads, before the pendulums\n  newLever(translation(0, 1.7, 82).rotate(0, 180), \"LEVER_ID_AFTER_JUMPING_PADS\");\n\n  // lever pad\n  meshAdd(\n    cylinder(5).slice(0, -1),\n    translation(0, -15.7, 82).scale(2.5, 17, 2.5).rotate(0, 35),\n    material(0.5, 0.3, 0.3, 0.4),\n  );\n\n  // pendulums supports\n\n  meshAdd(cylinder(6), translation(0, 16, 121).scale(2.5, 1, 2.1).rotate(0, 90), material(0.5, 0.6, 0.7, 0.3));\n  meshAdd(cylinder(), translation(0, 16, 127.8).scale(1.5, 1, 0.7), material(0.5, 0.6, 0.7, 0.3));\n  meshAdd(cylinder(7), translation(0, 15.1, 133).scale(5, 2, 5), material(0.4, 0.5, 0.6, 0.4));\n\n  // SOUL after first boat\n  newSoul(translation(-0.5, 2.8, -20), [0, 0, 2.5], [0, -3, 2.5]);\n\n  // SOUL after first gate\n  newSoul(\n    translation(0, 2.8),\n    [5, 10, 3],\n    [-5, 10, 3],\n    ...polygon_regular(18).map(({ x, z }): Circle => [x * 7, z * 10, 4.5 - abs(x) * 2]),\n  );\n\n  // SOUL in the last platform\n  newSoul(translation(0, 3, 95), ...polygon_regular(9).map(({ x, z }): Circle => [x * 9, z * 9, 4]));\n\n  // SOUL after the pendulums\n  newSoul(translation(0, 19, 134), [0, 0, 3.5]);\n\n  // SOUL over the grid with hex holes\n  newSoul(translation(-38.9, -8.3, -21), [-7, -2.5, 6], [6, -3, 6], [0, -5, 7]);\n\n  // SOUL after the central gate\n  newSoul(translation(-89, 0.2, 80), [0, 0, 6]);\n\n  // SOUL in the central area, after the rotating hex corridor\n  newSoul(translation(-100, 0.2, 55), [0, 0, 7.5], [-8, 0, 3.5], [-12, 0, 3.5], [-15, 0, 3.5]);\n\n  // SOUL after the second boat\n  newSoul(translation(-115, 0.2, -12), [0, 0, 3.5]);\n\n  // SOUL in the internal pad after the pushing rods\n  newSoul(translation(-93, -3, -28 - 12).rotate(4), [0, -2, 3.5], [0, 2, 3.5]);\n\n  // =========== end of the world ===========//\n\n  /// ****** TRANSLATIONS ONLY ****** ///\n\n  // moving central platform in the first level\n\n  newModel(\"MODEL_ID_LEVEL1_CENTRAL_PLATFORM\");\n\n  meshAdd(cylinder(5), translation(0, -0.2).scale(5, 1, 5), material(0.6, 0.65, 0.7, 0.3));\n\n  // LEVER over the central moving platform\n  newLever(translation(0, 1.2), \"LEVER_ID_GATE1\");\n\n  integers_map(2, (blackPlatform) => {\n    // black platforms in the second level\n    newModel(\"MODEL_ID_LEVEL2_BLACK_PLATFORM\" + blackPlatform);\n    GQuad.map(({ x, z }) => {\n      // column body\n      meshAdd(\n        cylinder(11, 1).slice(0, -2),\n        translation(x * 4, 4, z * 4).scale(0.8, 3, 0.8),\n        material(0.5, 0.3, 0.7, 0.6),\n      );\n      // column top\n      meshAdd(cylinder(), translation(x * 4, 7, z * 4).scale(1, 0.3), material(0.5, 0.5, 0.5, 0.3));\n    });\n\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(cylinder().slice(0, -1), identity.scale(5, 1, 5), material(0.8, 0.8, 0.8, 0.3)),\n        ...[-1, 1].map((i) =>\n          polygons_transform(\n            cylinder(25, 1),\n            translation(5 * i, 0.2)\n              .rotate(i * -30)\n              .scale(4, 1, 3),\n            material(0.8, 0.8, 0.8, 0.3),\n          ),\n        ),\n      ),\n    );\n    // bottom\n    meshAdd(cylinder(), translation(0, -3).scale(8, 2, 8), material(0.4, 0.4, 0.4, 0.3));\n  });\n\n  // central oscillating platform\n  newModel(\"MODEL_ID_LEVEL2_CENTRAL_PLATFORM\");\n\n  meshAdd(\n    csg_polygons_subtract(\n      csg_union(\n        polygons_transform(cylinder(), identity.scale(1.5, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n        polygons_transform(cylinder(), translation(0, -2).scale(2, 3.2, 1.9), material(0.3, 0.8, 0.5, 0.5)),\n        polygons_transform(cylinder(6), identity.scale(4, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n        polygons_transform(\n          cylinder(16, 1, 0, 4),\n          identity.scale(1, 1, 1.5).rotate(0, 90),\n          material(0.9, 0.9, 0.9, 0.2),\n        ),\n      ),\n      polygons_transform(cylinder(), identity.scale(1.3, 10, 1.3), material(0.2, 0.7, 0.4, 0.6)),\n    ),\n  );\n\n  // SOUL over the central oscillating platform in the second level\n  newSoul(translation(0, 2.8), [0, 0, 4.5]);\n\n  // triangle platform\n\n  newModel(\"MODEL_ID_TRIANGLE_PLATFORM\");\n\n  meshAdd(cylinder(3), translation(-23, -1.7, 55.8).scale(5, 0.7, 8.3), material(0.3, 0.6, 0.6, 0.2));\n  meshAdd(cylinder(8), translation(-23, -2.2, 66.5).scale(1.5, 1.2, 1.5), material(0.8, 0.8, 0.8, 0.2));\n  meshAdd(cylinder(), translation(-23, -2.2, 62).scale(3, 1, 4), material(0.5, 0.5, 0.5, 0.3));\n  meshAdd(cylinder(), translation(-23, -3, 55).scale(5.2, 1.7, 3), material(0.5, 0.5, 0.5, 0.3));\n\n  // LEVER over the triangle platform\n  newLever(translation(-23, -0.5, 66.5), \"LEVER_ID_TRIANGLE_PLATFORM\");\n\n  // vertically oscillating mini platforms\n\n  newModel(\"MODEL_ID_LEVEL2_MINI_PLATFORM_VERTICAL\");\n\n  meshAdd(cylinder(), translation(-21.1 - 1.45, -3, 55).scale(1.45, 1.4, 2.7), material(0.7, 0.7, 0.7, 0.2));\n\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(cylinder(), identity.scale(3, 1.4, 2.7)),\n      polygons_transform(cylinder(), identity.scale(1.2, 8, 1.2)),\n    ),\n    translation(-33, -3, 55),\n    material(0.7, 0.7, 0.7, 0.2),\n  );\n\n  // horizontaly oscillating mini platforms\n\n  newModel(\"MODEL_ID_LEVEL2_MINI_PLATFORM_HORIZONTAL\");\n\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(cylinder(), identity.scale(3, 1.4, 2.7)),\n      polygons_transform(cylinder(), identity.scale(1, 3)),\n    ),\n    translation(-27, -3, 55),\n    material(0.9, 0.9, 0.9, 0.2),\n  );\n\n  meshAdd(cylinder(), translation(-39, -3, 55).scale(3, 1.4, 2.7), material(0.9, 0.9, 0.9, 0.2));\n\n  // hex corridor door\n\n  newModel(\"MODEL_ID_LEVEL2_HEX_CORRIDOR_DOOR\");\n\n  meshAdd(cylinder(6), translation(-44.5, 0, 55).rotate(0, 0, 90).scale(5.9, 0.5, 5.9), material(0.7, 0.7, 0.7, 0.4));\n\n  // elevators\n\n  newModel(\"MODEL_ID_ELEVATORS0\");\n\n  const elevatorsMatrix = (x: number) =>\n    translation(x - 76.9, x / -16 - 10, 24)\n      .rotate(0, 0, -2)\n      .skewX(-2)\n      .scale(2.8, 1.4, 3);\n\n  [0, 12, 24].map((x) => meshAdd(cylinder(), elevatorsMatrix(x), material(0.2, 0.5, 0.6, 0.2)));\n\n  newModel(\"MODEL_ID_ELEVATORS1\");\n\n  [6, 18].map((x) => meshAdd(cylinder(), elevatorsMatrix(x), material(0.1, 0.4, 0.5, 0.2)));\n\n  // central sculpture/monument\n\n  newModel(\"MODEL_ID_MONUMENT\");\n\n  meshAdd(cylinder(5), translation(-38.9, -1.3, 17).scale(1.1, 3, 1.1).skewY(-20), material(0.3, 0.3, 0.5, 0.5));\n\n  meshAdd(\n    cylinder(5).slice(0, -1),\n    translation(-38.9, 2, 17).scale(0.6, 2.5, 0.6).skewY(25),\n    material(0.6, 0.3, 0.5, 0.5),\n  );\n\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(cylinder(5), translation(0, 2).scale(5, 7, 5).skewY(8)),\n      polygons_transform(cylinder(5), translation(0, 5).scale(1.5, 1.5, 8).rotate(90, 0, 35)),\n      polygons_transform(cylinder(), identity.scale(2, 8, 3)),\n    ),\n    translation(-38.9, -11.3, 17),\n    material(0.2, 0.4, 0.5, 0.5),\n  );\n\n  // SOUL over the central sculpture/monument\n  newSoul(\n    translation(-39.1, -0.6, 17).rotate(11),\n    ...polygon_regular(15).map(({ x, z }): Circle => [x * 3, z * 3, 1.2]),\n  );\n\n  pushingRodsPositions.map((x, i) => {\n    if (!(i % 2) && i < 6) {\n      newModel(\"MODEL_ID_PUSHING_ROD\" + i / 2);\n    }\n    meshAdd(pushingRod, translation(x, 1.9, -12));\n  });\n\n  // oscillating hex pads\n\n  integers_map(4, (i) => {\n    newModel(\"MODEL_ID_OSCILLATING_HEX_PAD\" + i);\n    meshAdd(\n      cylinder(6),\n      translation(-14.6 - i * 4.8 - (i > 2 ? 2 : 0), -i / 2.5 - 0.1, -21.5)\n        .rotate(0, 0, 3.5)\n        .skewX(3.5)\n        .scale(2.6, 1, 2.5),\n      material(0.5 - i / 8, i / 12 + 0.5, 0.7, 0.3),\n    );\n  });\n\n  // jumping pads after rotating platforms\n\n  [material(0.1, 0.55, 0.45, 0.2), material(0.2, 0.5, 0.5, 0.3), material(0.3, 0.45, 0.55, 0.4)].map((m, i) => {\n    newModel(\"MODEL_ID_JUMPING_PAD\" + i);\n    meshAdd(cylinder(), translation(-23.5, 0.5, 91 + 6.8 * i).scale(i === 1 ? 2 : 3.3, 1, 3.3), m);\n    if (i === 2) {\n      // in connection\n      meshAdd(cylinder(), translation(-29.1, 0.4, 91).scale(2.1, 1, 3), material(0.7, 0.7, 0.7, 0.3));\n    }\n    if (i === 1) {\n      // out connections\n      meshAdd(\n        cylinder(),\n        translation(-16.1, 0.5, 103.5).rotate(-3.5).scale(3.9, 0.8, 2).skewX(-1),\n        material(0.6, 0.6, 0.7, 0.3),\n      );\n    }\n  });\n\n  // floating elevator pad\n  newModel(\"MODEL_ID_FLOATING_ELEVATOR_PAD\");\n  meshAdd(cylinder(5), identity.scale(5, 1.1, 5), material(0.5, 0.3, 0.3, 0.4));\n  meshAdd(cylinder(5), identity.scale(5.5, 0.9, 5.5), material(0.25, 0.25, 0.25, 0.4));\n\n  // LEVER in the floating elevator before the pendulums\n  newLever(translation(0, 1.5, -1).rotate(0, 180), \"LEVER_ID_FLOATING_ELEVATOR\");\n\n  // GATES\n  integers_map(4, (gate) => {\n    newModel(\"MODEL_ID_GATE\" + gate);\n    integers_map(7, (i) =>\n      meshAdd(\n        polygons_transform(\n          cylinder(8, 1).slice(0, -1),\n          translation((gate > 2 ? 3.5 : 4) * (i / 6 - 0.5), 3).scale(0.2, gate > 2 ? 4 : 3, 0.2),\n          material(0.3, 0.3, 0.38),\n        ),\n      ),\n    );\n  });\n\n  /// **** FULL MATRIX TRANSFORMS **** ///\n\n  // rotating hex corridor\n  newModel(\"MODEL_ID_LEVEL2_ROTATING_HEX_CORRIDOR\");\n  meshAdd(hexCorridor);\n\n  // donut pad\n  newModel(\"MODEL_ID_DONUT_PAD\");\n\n  // second pad\n  meshAdd(cylinder(5).slice(0, -1), translation(-7.5, 2.7).rotate(0, 90).scale(1, 0.2), material(0.5, 0.5, 0.5, 0.5));\n  meshAdd(\n    cylinder(10).slice(0, -1),\n    translation(-7.5, 2.4).rotate(0, 90).scale(2, 0.1, 2),\n    material(0.3, 0.8, 0.7, 0.3),\n  );\n  meshAdd(cylinder(15, 1), translation(-7.5).rotate(0, 90).scale(3, 2.3, 3), material(0.4, 0.4, 0.4, 0.3));\n\n  // LEVER over the donut pad\n  newLever(translation(-7.5).rotate(0, 90).translate(0, 3.4).rotate(0, 180), \"LEVER_ID_DONUT_PAD\");\n\n  // lateral horns\n  [-1, 1].map((i) =>\n    meshAdd(\n      hornPolygons,\n      identity\n        .rotate(i * 90, 180, 90)\n        .translate(0, 5)\n        .rotate(40)\n        .scale(1.3, 10, 1.3),\n    ),\n  );\n\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(cylinder(10), identity.scale(6, 2, 6), material(0.1, 0.6, 0.5, 0.3)),\n      polygons_transform(cylinder(10), identity.scale(3.3, 6, 3.3), material(0.1, 0.6, 0.5, 0.5)),\n    ),\n  );\n\n  // SOUL after the hex pads, in the hex donut with horns\n  newSoul(translation(-5, 4), [0, -1.2, 1.7], [0, 1.2, 1.7]);\n\n  // pendulums\n  newModel(\"MODEL_ID_PENDULUMS\");\n  meshAdd(cylinder(3), translation(0, -3, 118.8).scale(0.8, 0.8, 8).rotate(90, 0, 60), material(0.5, 0.3, 0.3, 0.4));\n  [22, 30].map((z) => {\n    meshAdd(\n      cylinder(6),\n      translation(0, 16, z + 95)\n        .scale(3, 1, 2.3)\n        .rotate(0, 90),\n      material(0.7, 0.7, 0.7, 0.4),\n    );\n    meshAdd(cylinder(), translation(0, 6.2, z + 95).scale(0.5, 11, 0.5), material(0.5, 0.3, 0.3, 0.4));\n  });\n\n  // First rotating platform (with hole)\n  newModel(\"MODEL_ID_ROTATING_PLATFORM0\");\n  meshAdd(cylinder(5).slice(0, -1), translation(0, 2).scale(1, 2), material(0.3, 0.3, 0.3, 0.2));\n  meshAdd(cylinder(8).slice(0, -1), translation(0, 2).scale(3, 1.5, 3).rotate(0, 22), material(0.7, 0.7, 0.7, 0.1));\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(cylinder(28, 1), identity.scale(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)),\n      polygons_transform(cylinder(), translation(0, 0, -5.5).scale(1.5, 3, 2.7), material(0.45, 0.45, 0.45, 0.2)),\n    ),\n  );\n\n  // SOUL over the first rotating platform\n  newSoul(translation(0, 3), ...polygon_regular(14).map(({ x, z }): Circle => [x * 5.6, z * 5.6, 2]));\n\n  // Second rotating platform\n  newModel(\"MODEL_ID_ROTATING_PLATFORM1\");\n\n  // rotating platform horns\n  [-1, 1].map((x) =>\n    meshAdd(\n      hornPolygons,\n      identity\n        .rotate(0, 90)\n        .translate(x * -5, 3, -0.5)\n        .scale(1.2, 9, 1.2)\n        .rotate(0, 90 * x + 90),\n    ),\n  );\n\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(cylinder(28, 1).slice(0, -1), translation(0, 2).scale(7.5, 1, 7.5), material(0.35, 0, 0, 0.3)),\n      polygons_transform(cylinder().slice(0, -1), translation(0, 2).scale(9, 1.1, 2), material(0.3, 0, 0, 0.3)),\n    ),\n  );\n  meshAdd(cylinder(5).slice(0, -1), translation(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2));\n  meshAdd(cylinder(28, 1), identity.scale(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2));\n\n  // Third rotating platform\n  newModel(\"MODEL_ID_ROTATING_PLATFORM2\");\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(cylinder(28, 1).slice(0, -1), translation(0, 2).scale(7.5, 1, 7.5), material(0.35, 0, 0, 0.3)),\n      polygons_transform(cylinder().slice(0, -1), translation(0, 2, 7).scale(2, 1.1, 9), material(0.3, 0, 0, 0.3)),\n      polygons_transform(cylinder().slice(0, -1), translation(7, 2).scale(9, 1.1, 2), material(0.3, 0, 0, 0.3)),\n    ),\n  );\n  meshAdd(cylinder(5).slice(0, -1), translation(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2));\n  meshAdd(cylinder(28, 1), identity.scale(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2));\n\n  // Fourth rotating platform\n  newModel(\"MODEL_ID_ROTATING_PLATFORM3\");\n  meshAdd(\n    csg_polygons_subtract(\n      polygons_transform(cylinder(28, 1).slice(0, -1), translation(0, 2).scale(7.5, 1, 7.5), material(0.35, 0, 0, 0.3)),\n      polygons_transform(cylinder().slice(0, -1), translation(0, 2, -7).scale(2, 1.1, 9), material(0.3, 0, 0, 0.3)),\n      polygons_transform(cylinder().slice(0, -1), translation(7, 2).scale(9, 1.1, 2), material(0.3, 0, 0, 0.3)),\n    ),\n  );\n  meshAdd(cylinder(5).slice(0, -1), translation(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2));\n  meshAdd(cylinder(28, 1), identity.scale(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2));\n\n  // BOATS\n  integers_map(2, (i) => {\n    newModel(\"MODEL_ID_BOAT\" + i);\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(\n          cylinder(30, 1, 1.15, 1),\n          translation(0, -3).scale(3.5, 1, 3.5),\n          material(0.7, 0.4, 0.25, 0.7),\n        ),\n        polygons_transform(cylinder(), translation(4, -1.2).scale3d(2), material(0.7, 0.4, 0.25, 0.3)),\n        polygons_transform(\n          cylinder(30, 1, 1.3, 1),\n          translation(0, -2.5).scale(2.6, 1, 3),\n          material(0.7, 0.4, 0.25, 0.2),\n        ),\n      ),\n    );\n    // LEVER over the boats (two levers)\n    newLever(translation(0, -3, 4), \"LEVER_ID_BOAT\" + i);\n  });\n\n  for (let i = 0; i < LEVERS_COUNT; ++i) {\n    newModel(\"MODEL_ID_LEVER\" + i);\n    meshAdd(cylinder(9, 1), translation(0, 0.8).scale(0.2, 0.3, 0.2), material(0.7, 1, 0.2));\n    meshAdd(cylinder(6, 1).slice(0, -1), identity.scale(0.12, 1.2, 0.12), material(0.3, 0.3, 0.5, 0.1));\n    meshAdd(cylinder(3), translation(0, -1).rotate(90, 90).scale(0.3, 0.4, 0.3), material(0.2, 0.2, 0.2, 0.1));\n  }\n\n  // ------ End of game models ------\n\n  newModel(\"MODEL_ID_PLAYER_BODY\");\n  // head\n  meshAdd(sphere(20), translation(0, 1).scale3d(0.5), material(1, 0.3, 0.4));\n\n  // body\n  meshAdd(sphere(30), identity.scale(0.65, 0.8, 0.55), material(1, 0.3, 0.4));\n\n  // mouth\n  meshAdd(cylinder(), translation(0, 0.9, 0.45).scale(0.15, 0.02, 0.06), material(0.3, 0.3, 0.3));\n\n  [-1, 1].map((v) => {\n    // horns\n    meshAdd(\n      hornPolygons,\n      identity\n        .rotate(0, v > 0 ? 180 : 0)\n        .translate(0.2, 1.32)\n        .rotate(-30)\n        .scale(0.2, 0.6, 0.2),\n      material(1, 1, 0.8),\n    );\n\n    // eyes\n    meshAdd(\n      polygons_transform(\n        csg_polygons_subtract(cylinder(15, 1), polygons_transform(cylinder(), translation(0, 0, 1).scale(2, 2, 0.5))),\n        identity.rotate(-90, 0).scale(0.1, 0.05, 0.1),\n        material(0.3, 0.3, 0.3),\n      ),\n      translation(v * 0.2, 1.2, 0.4).rotate(0, 20 * v, 20 * v),\n    );\n  });\n\n  [-1, 1].map((v, i) => {\n    // legs\n    newModel(\"MODEL_ID_PLAYER_LEG\" + i);\n\n    meshAdd(cylinder(20, 1), translation(0.3 * v, -0.8).scale(0.2, 0.7, 0.24), material(1, 0.3, 0.4));\n  });\n\n  newModel(\"MODEL_ID_SOUL_COLLISION\");\n\n  meshAdd(cylinder(6, 1).slice(0, -1), identity.scale(0.77, 1, 0.77), material(1, 0.3, 0.5));\n\n  newModel(\"MODEL_ID_SOUL\");\n\n  const GHOST_SLICES = 28;\n  const GHOST_STACKS = 22;\n\n  // body\n  meshAdd(\n    sphere(GHOST_SLICES, GHOST_STACKS, (a: number, b: number, polygon: Polygon) => {\n      const bm = b / GHOST_STACKS;\n      const theta = a * (Math.PI * (2 / GHOST_SLICES));\n      const phixz = Math.sin((bm ** 0.6 * Math.PI) / 2);\n      const osc = (bm * bm * Math.sin(a * Math.PI * (14 / GHOST_SLICES))) / 4;\n      return b > GHOST_STACKS - 1\n        ? { x: (polygon.$smooth = 0), y: -0.5, z: 0 }\n        : {\n            x: Math.cos(theta) * phixz,\n            y: Math.cos(bm * Math.PI) - bm - osc,\n            z: Math.sin(theta) * phixz + Math.sin(osc * Math.PI * 2) / 4,\n          };\n    }),\n    identity.scale3d(0.7),\n    material(1, 1, 1),\n  );\n\n  // eyes\n  [-1, 1].map((x) => meshAdd(sphere(10), translation(0.16 * x, 0.4, -0.36).scale3d(0.09)));\n\n  if (DEBUG) {\n    console.timeEnd(\"build_life_the_universe_and_everything\");\n    devAllModelsPrint();\n  }\n};\n","#version 300 es\n\n/** Fixed number of souls */\n#define SOULS_COUNT 13\n\n/** Fixed number of levers */\n#define LEVERS_COUNT 16\n\n/** Fixed number of models that have a simple translation transformation */\n#define MODELS_WITH_SIMPLE_TRANSFORM 26\n\n/** Fixed number of models that have a full transformation matrix */\n#define MODELS_WITH_FULL_TRANSFORM (12 + LEVERS_COUNT)\n\nlayout(location = 0) in vec4 aPosition;\nlayout(location = 1) in vec3 aNormal;\nlayout(location = 2) in vec4 aColor;\n\nout vec4 VNormal;\nout vec4 FragPos;\nout vec4 UntransformedFragPos;\nout lowp vec4 Color;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec4 worldTransforms[4 * (MODELS_WITH_FULL_TRANSFORM + SOULS_COUNT) + MODELS_WITH_SIMPLE_TRANSFORM];\n\n#define modelId aPosition.w\n\nvoid main() {\n  mat4 worldMatrix = mat4(1);\n  lowp int idx = int(modelId);\n  Color = aColor;\n  FragPos = vec4(aPosition.xyz, 1);\n  if (modelId > 1. && modelId < float(MODELS_WITH_SIMPLE_TRANSFORM + 2)) {\n    FragPos += worldMatrix[3] = worldTransforms[idx + ((MODELS_WITH_FULL_TRANSFORM + SOULS_COUNT) * 4 - 2)];\n  } else if (modelId != 1.) {\n    idx = (idx < 1 ? gl_InstanceID - idx : idx - (MODELS_WITH_SIMPLE_TRANSFORM + 2)) * 4;\n    worldMatrix[0] = worldTransforms[idx];\n    worldMatrix[1] = worldTransforms[idx + 1];\n    worldMatrix[2] = worldTransforms[idx + 2];\n    worldMatrix[3] = worldTransforms[idx + 3];\n\n    // trick - m44 is used to store the value of the lever.\n    if (Color.w == 0.) {\n      Color = mix(vec4(1, 0.5, 0.2, 0), Color, worldMatrix[3][3]);\n    }\n    worldMatrix[3][3] = 1.;\n\n    FragPos = worldMatrix * FragPos;\n  }\n\n  gl_Position = projectionMatrix * (viewMatrix * FragPos);\n  FragPos.w = modelId;\n  VNormal = (worldMatrix * vec4(aNormal, 0));\n  UntransformedFragPos = aPosition;\n}\n","#version 300 es\nprecision highp float;\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\n\nuniform mat4 viewMatrix;\n\nout vec4 O;\n\n#define modelId FragPos.w\n\n#define orientation viewMatrix[0][0]\n#define COLLISION_TEXTURE_SIZE 128.\n#define PI 3.1415926\n\nvoid main() {\n  vec4 v = viewMatrix * vec4(vec3(0, 1.49, .3 * orientation) + FragPos.xyz, 1);\n  O = vec4(0);\n  if (gl_FragCoord.y > 36.) {\n    if (v.y > .6 && v.y < 3.) {\n      float xattenuation = abs(gl_FragCoord.x / (COLLISION_TEXTURE_SIZE / 2.) - 1.);\n      float z = clamp(v.z + .7, 0., 1.);\n      O = vec4(\n        vec2(orientation * sign(v.x) * VNormal.x < 0. ? z * (.7 - abs(v.x)) * xattenuation / .7 : 0.),\n        vec2(orientation * VNormal.z > 0. ? z * (1. - xattenuation) : 0.)\n      );\n    }\n  } else if (VNormal.y > 0.45 && v.y < 1.) {\n    float h = v.y * clamp((v.z + .4) * 50., 0., 1.) * clamp((-abs(v.x) + .2) * 10., 0., 1.);\n    O = vec4(vec2(h), vec2(h > 0. ? modelId / 255. : 0.));\n  }\n}\n","#version 300 es\n\nin vec4 aPosition;\n\nvoid main() { gl_Position = vec4(aPosition.xy, 1, 1); }\n","#version 300 es\nprecision highp float;\n\n/** The inverted view matrix */\nuniform mat4 viewMatrix;\nuniform vec3 iResolution;\n\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\n#define gameTime iResolution.z\n#define viewPos viewMatrix[3]\n\n/* 1 / Math.tan(fieldOfViewRadians / 2) */\nconst float fieldOfViewAmount = 1.73205;\n\nvoid main() {\n  vec2 fragCoord = (gl_FragCoord.xy / iResolution.xy) * 2. - 1.;\n  vec3 ray =\n    normalize(viewMatrix * vec4(fragCoord.x * -(iResolution.x / iResolution.y), -fragCoord.y, fieldOfViewAmount, 0.)).xyz;\n  float rayTracedLavalDistance = (-32. - viewPos.y) / ray.y;\n  float multiplier = (1. - clamp(abs(rayTracedLavalDistance / 9999.), 0., 1.));\n\n  O = vec4(0, 0, 0, 1);\n\n  if (multiplier > 0.01) {\n    if (rayTracedLavalDistance > 0.) {\n      // Render sky\n      float c = cos(gameTime / 30.), s = sin(gameTime / 30.);\n      ray.xz *= mat2(c, s, -s, c);\n      vec3 absRay = abs(ray);\n      O.xyz = vec3(dot(vec2(texture(groundTexture, ray.xy).z, texture(groundTexture, ray.yz * 2.).z), absRay.zx) * absRay.y);\n\n    } else {\n      // Render raytraced lava\n      ray = viewPos.xyz + ray * rayTracedLavalDistance;\n      O.x = multiplier *=\n        0.9 - texture(groundTexture, ray.xz / 150. + vec2(sin(ray.z / 35. + gameTime), cos(ray.x / 25. + gameTime)) / 80.).y;\n      O.y = multiplier * multiplier * multiplier;\n    }\n  }\n}\n","export const gl: WebGL2RenderingContext = hC.getContext(\"webgl2\", { powerPreference: \"high-performance\" })!;\n\nexport const cgl: WebGL2RenderingContext = hD.getContext(\"webgl2\", {\n  powerPreference: \"high-performance\",\n  preserveDrawingBuffer: true,\n  desynchronized: true,\n  antialias: false,\n})!;\n\nfor (const s in cgl) {\n  [gl, cgl].map(\n    (xgl) =>\n      ((xgl as any)[s[0] + [...s].reduce((p, c, i) => (p * i + c.charCodeAt(0)) % 434, 0).toString(36)] = (xgl as any)[\n        s\n      ]),\n  );\n}\n","import { matrixCopy, identity } from \"../math/matrix\";\nimport { allModels } from \"./models\";\nimport { devVerifyModelsNextUpdate } from \"../dev-tools/dev-models\";\n\nexport let modelsUpdateCounter: number;\n\nexport const modelsResetUpdateCounter = () => (modelsUpdateCounter = 1);\n\nexport const verifyModelsNextUpdate = (expectedId: number) => {\n  if (DEBUG) {\n    devVerifyModelsNextUpdate(modelsUpdateCounter + 1, expectedId);\n  }\n};\n\nexport const modelsNextUpdate = (x: number, y = 0, z = 0) => {\n  const m = matrixCopy(identity, allModels[++modelsUpdateCounter]!.$matrix);\n  m.m41 = x;\n  m.m42 = y;\n  m.m43 = z;\n  return m;\n};\n","import { constDef_COLLISION_TEXTURE_SIZE as COLLISION_TEXTURE_SIZE } from \"../shaders/collider-fragment.frag\";\nimport {\n  max,\n  clamp,\n  DEG_TO_RAD,\n  angle_lerp_degrees,\n  lerp,\n  angle_wrap_degrees,\n  min,\n  threshold,\n  hypot,\n  abs,\n} from \"../math/math\";\nimport { levers, allModels } from \"./models\";\nimport { player_last_pulled_lever, camera_rotation, firstBoatLerp, player_position_final } from \"./world-state\";\nimport { input_forward, input_strafe, player_first_person } from \"../page\";\nimport { lerpDamp, gameTimeDelta, damp, gameTime } from \"./game-time\";\nimport { matrixCopy, matrixTransformPoint } from \"../math/matrix\";\nimport { cgl, gl } from \"../gl\";\nimport { shouldRotatePlatforms } from \"./level-update\";\nimport { modelsNextUpdate, verifyModelsNextUpdate } from \"./models-next-update\";\nimport {\n  MODEL_ID_LEVEL2_ROTATING_HEX_CORRIDOR,\n  MODEL_ID_PLAYER_BODY,\n  MODEL_ID_PLAYER_LEG0,\n  MODEL_ID_ROTATING_PLATFORM0,\n  MODEL_ID_STATIC_WORLD,\n} from \"./models-ids\";\nimport { LEVER_ID_BOAT1 } from \"./levers-ids\";\n\nexport const CAMERA_PLAYER_Y_DIST = 13;\n\nexport const CAMERA_PLAYER_Z_DIST = -18;\n\nexport const PLAYER_LEGS_VELOCITY = 9.1;\n\nexport const PLAYER_RESPAWN_Z = -2.4;\n\nexport let camera_position_x: number = 0;\n\nexport let camera_position_y: number = 0;\n\nexport let camera_position_z: number = 0;\n\nexport const set_camera_position = (x: number, y: number, z: number) => {\n  camera_position_x = x;\n  camera_position_y = y;\n  camera_position_z = z;\n};\n\nconst collision_buffer = new Uint8Array(COLLISION_TEXTURE_SIZE * COLLISION_TEXTURE_SIZE * 4);\n\nexport let player_update: () => void;\n\nexport const player_init = NO_INLINE(() => {\n  let boot: 0 | 1 = 1;\n  let player_gravity = 15;\n  let player_respawned: 0 | 1 | 2 = 2;\n  let player_look_angle_target: number;\n  let player_look_angle: number;\n  let player_legs_speed: number;\n  let player_on_rotating_platforms: number;\n  let player_fly_velocity_x: number;\n  let player_fly_velocity_z: number;\n  let player_speed: number;\n  let player_speed_collision_limiter: number;\n  let player_model_y: number;\n\n  let currentModelId: number;\n  let oldModelId: number = 0;\n\n  let camera_pos_lookat_x: number;\n  let camera_pos_lookat_y: number;\n  let camera_pos_lookat_z: number;\n\n  let player_position_global_x: number;\n  let player_position_global_y: number;\n  let player_position_global_z: number;\n\n  const loadReferenceMatrix = () =>\n    matrixCopy(\n      (player_respawned\n        ? levers[player_last_pulled_lever]!\n        : allModels[oldModelId !== MODEL_ID_LEVEL2_ROTATING_HEX_CORRIDOR ? oldModelId : 0]!\n      ).$matrix,\n    );\n\n  const updatePlayerPositionFinal = (updateVelocity?: unknown) => {\n    if (player_respawned > 1) {\n      matrixCopy(levers[player_last_pulled_lever]!.$matrix).multiplySelf(levers[player_last_pulled_lever]!.$transform);\n      matrixTransformPoint(0, firstBoatLerp > 0.9 ? 15 : 1, PLAYER_RESPAWN_Z);\n    } else {\n      loadReferenceMatrix();\n      matrixTransformPoint(player_position_global_x, player_position_global_y, player_position_global_z);\n    }\n\n    if (updateVelocity) {\n      player_fly_velocity_x = (matrixTransformPoint.x - player_position_final.x) / gameTimeDelta;\n      player_fly_velocity_z = (matrixTransformPoint.z - player_position_final.z) / gameTimeDelta;\n    }\n\n    player_position_final.x = matrixTransformPoint.x;\n    player_position_final.y = matrixTransformPoint.y;\n    player_position_final.z = matrixTransformPoint.z;\n  };\n\n  const movePlayer = NO_INLINE((mx: number, my: number, mz: number) => {\n    loadReferenceMatrix().invertSelf();\n    matrixTransformPoint(mx, my, mz, 0);\n    player_position_global_x += matrixTransformPoint.x;\n    player_position_global_y += my;\n    player_position_global_z += matrixTransformPoint.z;\n    updatePlayerPositionFinal();\n  });\n\n  const doCollisions = NO_INLINE(() => {\n    const LEGS_ROWS = 36;\n    let modelACount = 0;\n    let modelB = 0;\n    let modelBCount = 0;\n    let movY = 0;\n    let lineToProcess = -1;\n\n    // vertical collisions\n\n    for (let y = 0; y < LEGS_ROWS; ++y) {\n      for (let x = 24 * 4, yindex = y * (COLLISION_TEXTURE_SIZE * 4); x < (COLLISION_TEXTURE_SIZE - 24) * 4; x += 4) {\n        for (let k = 0; k < 2; ++k) {\n          const v = collision_buffer[yindex + x + k]!;\n          const m = collision_buffer[yindex + x + k + 2]!;\n          if (v > movY) {\n            movY = v;\n          }\n          if (v + m && (lineToProcess < 0 || lineToProcess === y)) {\n            lineToProcess = y;\n            if (m === currentModelId) {\n              ++modelACount;\n            } else if (!modelB || modelB === m) {\n              modelB = m;\n              ++modelBCount;\n            }\n          }\n        }\n      }\n    }\n\n    currentModelId = lineToProcess >= 0 ? (modelBCount > modelACount * 2 ? modelB : currentModelId) : 0;\n\n    // horizontal collisions\n\n    let movX = 0;\n    let movZ = 0;\n    for (let y = LEGS_ROWS, index = COLLISION_TEXTURE_SIZE * LEGS_ROWS * 4; y < COLLISION_TEXTURE_SIZE; ++y) {\n      let left = 0;\n      let right = 0;\n      let front = 0;\n      let back = 0;\n      for (let x = 0; x < COLLISION_TEXTURE_SIZE; ++x) {\n        let v = collision_buffer[index++]!;\n        if (x < COLLISION_TEXTURE_SIZE / 2) {\n          if (v > left) {\n            left = v;\n          }\n        } else if (v > right) {\n          right = v;\n        }\n\n        v = collision_buffer[index++]!;\n        if (x > COLLISION_TEXTURE_SIZE / 2) {\n          if (v > left) {\n            left = v;\n          }\n        } else if (v > right) {\n          right = v;\n        }\n\n        v = collision_buffer[index++]!;\n        if (v > front) {\n          front = v;\n        }\n\n        v = collision_buffer[index++]!;\n        if (v > back) {\n          back = v;\n        }\n      }\n\n      right -= left;\n      if (right * right > movX * movX) {\n        movX = right;\n      }\n\n      back -= front;\n      if (back * back > movZ * movZ) {\n        movZ = back;\n      }\n    }\n\n    player_speed_collision_limiter = clamp(1 - max(abs((movX *= 0.7)), abs(movZ)) * 0.01, 0.3);\n\n    movePlayer(movX / 255, movY / 255, movZ / 255);\n  });\n\n  const interpolate_with_hysteresis = (previous: number, desired: number, hysteresis: number, speed: number) =>\n    lerp(previous, desired, boot || (clamp(abs(desired - previous) ** 0.5 - hysteresis) + 1 / 7) * damp(speed * 1.5));\n\n  player_update = () => {\n    updatePlayerPositionFinal(currentModelId);\n\n    // ------- read collision renderBuffer -------\n\n    // This is here because we want to read the collision results as late as possible, to give the GPU time to finish\n    cgl.readPixels(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE, gl.RGBA, gl.UNSIGNED_BYTE, collision_buffer);\n\n    // ------- process collision renderBuffer -------\n\n    doCollisions();\n\n    if (player_respawned || currentModelId !== oldModelId) {\n      if (DEBUG && currentModelId !== oldModelId) {\n        console.log(\"modelId: \" + oldModelId + \" -> \" + currentModelId);\n      }\n\n      oldModelId = currentModelId;\n\n      loadReferenceMatrix().invertSelf();\n      matrixTransformPoint(player_position_final.x, player_position_final.y, player_position_final.z);\n      player_position_global_x = matrixTransformPoint.x;\n      player_position_global_y = matrixTransformPoint.y;\n      player_position_global_z = matrixTransformPoint.z;\n\n      player_respawned &&= currentModelId ? 0 : 1;\n    } else if (player_position_final.y < (player_position_final.x < -20 || player_position_final.z < 109 ? -25 : -9)) {\n      player_respawned = 2; // Player fell in lava\n    }\n\n    // Special handling for the second boat LEVER_SECOND_BOAT - the boat must be on the side of the map the player is\n    if (currentModelId === MODEL_ID_STATIC_WORLD) {\n      levers[LEVER_ID_BOAT1]!.$value = player_position_final.x < -15 && player_position_final.z < 0 ? 1 : 0;\n    }\n\n    // Special handling for the rotating platforms, better camera for mobile that allows to see more\n    player_on_rotating_platforms = lerpDamp(\n      player_on_rotating_platforms,\n      shouldRotatePlatforms *\n        ((currentModelId > MODEL_ID_ROTATING_PLATFORM0 - 1 && currentModelId < MODEL_ID_ROTATING_PLATFORM0 + 4) as any),\n      2,\n    );\n\n    camera_pos_lookat_x = interpolate_with_hysteresis(camera_pos_lookat_x, player_position_final.x, 0.5, 1);\n    camera_pos_lookat_y = interpolate_with_hysteresis(\n      camera_pos_lookat_y,\n      (player_model_y = lerp(\n        lerpDamp(player_model_y, player_position_final.y, 2),\n        player_position_final.y,\n        player_respawned || abs(player_model_y - player_position_final.y) * 8,\n      )),\n      2,\n      1,\n    );\n    camera_pos_lookat_z = interpolate_with_hysteresis(camera_pos_lookat_z, player_position_final.z, 0.5, 1);\n\n    if (!DEBUG_CAMERA) {\n      if (player_first_person) {\n        const d = player_respawned + damp(18);\n        camera_position_x = lerp(camera_position_x, player_position_final.x, d);\n        camera_position_z = lerp(camera_position_z, player_position_final.z, d);\n        camera_position_y = lerp(camera_position_y, 1.6 + player_model_y, d);\n        camera_rotation.y = angle_wrap_degrees(camera_rotation.y);\n      } else {\n        camera_position_x = interpolate_with_hysteresis(\n          camera_position_x,\n          camera_pos_lookat_x,\n          1,\n          2 + player_on_rotating_platforms,\n        );\n\n        camera_position_z = interpolate_with_hysteresis(\n          camera_position_z,\n          camera_pos_lookat_z + CAMERA_PLAYER_Z_DIST + player_on_rotating_platforms * 5,\n          1,\n          2 + player_on_rotating_platforms,\n        );\n\n        camera_position_y = interpolate_with_hysteresis(\n          camera_position_y,\n          max(\n            camera_pos_lookat_y +\n              clamp((-60 - player_position_final.z) / 8, 0, 20) +\n              CAMERA_PLAYER_Y_DIST +\n              player_on_rotating_platforms * 9,\n            6,\n          ),\n          4,\n          2,\n        );\n\n        const viewDirDiffz = min(CAMERA_PLAYER_Z_DIST / 3, -abs(camera_pos_lookat_z - camera_position_z));\n        const viewDirDiffx = camera_pos_lookat_x - camera_position_x;\n\n        camera_rotation.y = angle_lerp_degrees(\n          camera_rotation.y,\n          90 - angle_wrap_degrees(Math.atan2(viewDirDiffz, viewDirDiffx) / DEG_TO_RAD),\n          boot + damp(10),\n        );\n\n        camera_rotation.x = angle_lerp_degrees(\n          camera_rotation.x,\n          90 - Math.atan2(hypot(viewDirDiffz, viewDirDiffx), camera_position_y - camera_pos_lookat_y) / DEG_TO_RAD,\n          boot + damp(10),\n        );\n      }\n\n      camera_rotation.x = clamp(camera_rotation.x, -87, 87);\n    }\n\n    boot = 0;\n\n    // ---- process user input ----\n\n    let forward = clamp(input_forward, -1);\n    let strafe = clamp(input_strafe, -1);\n\n    const movAmount = threshold(hypot(forward, strafe) ** 0.5, 0.1);\n    let movAngle = Math.atan2(forward, strafe);\n\n    if (movAmount) {\n      player_look_angle_target = 90 - movAngle / DEG_TO_RAD;\n    }\n\n    // Update player body and legs matrices\n\n    player_legs_speed = lerpDamp(player_legs_speed, movAmount, 10);\n\n    verifyModelsNextUpdate(MODEL_ID_PLAYER_BODY);\n    modelsNextUpdate(\n      player_position_final.x,\n      0.06 * player_speed_collision_limiter * player_legs_speed * Math.cos(gameTime * (PLAYER_LEGS_VELOCITY * 2)) +\n        player_model_y,\n      player_position_final.z,\n    ).rotateSelf(0, (player_look_angle = angle_lerp_degrees(player_look_angle, player_look_angle_target, damp(8))));\n\n    for (let i = 0; i < 2; ++i) {\n      const t = gameTime * PLAYER_LEGS_VELOCITY - Math.PI * i;\n      verifyModelsNextUpdate(MODEL_ID_PLAYER_LEG0 + i);\n      matrixCopy(allModels[MODEL_ID_PLAYER_BODY]!.$matrix, modelsNextUpdate(0))\n        .translateSelf(0, player_legs_speed * clamp(Math.sin(t - Math.PI / 2) * 0.45))\n        .rotateSelf(player_legs_speed * Math.sin(t) * (0.25 / DEG_TO_RAD), 0);\n    }\n\n    // Move player\n\n    player_gravity = currentModelId\n      ? 5\n      : lerpDamp(player_gravity, player_respawned ? 13 : 19 - min(0, player_position_final.y + 10) * 2, 2.2);\n\n    player_fly_velocity_x = currentModelId || player_respawned ? 0 : lerpDamp(player_fly_velocity_x, 0, 3);\n    player_fly_velocity_z = currentModelId || player_respawned ? 0 : lerpDamp(player_fly_velocity_z, 0, 3);\n    player_speed = player_respawned\n      ? 0\n      : lerpDamp(\n          player_speed,\n          currentModelId ? 7 * clamp(2 * movAmount) * player_speed_collision_limiter : 0,\n          currentModelId ? 9 : 1,\n        );\n\n    forward = player_speed * movAmount * abs(forward) * Math.sin(movAngle);\n    strafe = player_speed * movAmount * abs(strafe) * Math.cos(movAngle);\n\n    // Angle is dependant on where the player is looking in first person. Is 0 in third person\n    movAngle = player_first_person ? (180 + camera_rotation.y) * DEG_TO_RAD : 0;\n\n    movePlayer(\n      gameTimeDelta * (player_fly_velocity_x + (Math.cos(movAngle) * strafe - Math.sin(movAngle) * forward)),\n      gameTimeDelta * -player_gravity,\n      gameTimeDelta * (player_fly_velocity_z + (Math.sin(movAngle) * strafe + Math.cos(movAngle) * forward)),\n    );\n  };\n});\n","import { clamp, max, abs, min, angle_wrap_degrees, lerp } from \"../math/math\";\nimport {\n  allModels,\n  levers,\n  LEVERS_COUNT,\n  MODELS_WITH_FULL_TRANSFORM,\n  MODELS_WITH_SIMPLE_TRANSFORM,\n  souls,\n  SOULS_COUNT,\n} from \"./models\";\nimport { transformsBuffer } from \"./transforms-buffer\";\nimport { gameTime, gameTimeDelta, lerpDamp } from \"./game-time\";\nimport { player_update } from \"./player\";\nimport { modelsNextUpdate, modelsResetUpdateCounter, verifyModelsNextUpdate } from \"./models-next-update\";\nimport {\n  LEVER_ID_GATE0,\n  LEVER_ID_GATE1,\n  LEVER_ID_LEVEL1_DESCENT,\n  LEVER_ID_TRIANGLE_PLATFORM,\n  LEVER_ID_ROTATING_CORRIDOR,\n  LEVER_ID_CRYSTALS,\n  LEVER_ID_MONUMENT,\n  LEVER_ID_DETOUR,\n  LEVER_ID_BEFORE_PUSHING_RODS,\n  LEVER_ID_AFTER_PUSHING_RODS,\n  LEVER_ID_DONUT_PAD,\n  LEVER_ID_AFTER_ROTATING_PLATFORMS,\n  LEVER_ID_AFTER_JUMPING_PADS,\n  LEVER_ID_FLOATING_ELEVATOR,\n  LEVER_ID_BOAT0,\n} from \"./levers-ids\";\nimport {\n  MODEL_ID_BOAT0,\n  MODEL_ID_BOAT1,\n  MODEL_ID_DONUT_PAD,\n  MODEL_ID_ELEVATORS0,\n  MODEL_ID_ELEVATORS1,\n  MODEL_ID_FLOATING_ELEVATOR_PAD,\n  MODEL_ID_GATE0,\n  MODEL_ID_GATE1,\n  MODEL_ID_GATE2,\n  MODEL_ID_GATE3,\n  MODEL_ID_JUMPING_PAD0,\n  MODEL_ID_LEVEL1_CENTRAL_PLATFORM,\n  MODEL_ID_LEVEL2_BLACK_PLATFORM0,\n  MODEL_ID_LEVEL2_BLACK_PLATFORM1,\n  MODEL_ID_LEVEL2_CENTRAL_PLATFORM,\n  MODEL_ID_LEVEL2_HEX_CORRIDOR_DOOR,\n  MODEL_ID_LEVEL2_MINI_PLATFORM_HORIZONTAL,\n  MODEL_ID_LEVEL2_MINI_PLATFORM_VERTICAL,\n  MODEL_ID_LEVEL2_ROTATING_HEX_CORRIDOR,\n  MODEL_ID_MONUMENT,\n  MODEL_ID_OSCILLATING_HEX_PAD0,\n  MODEL_ID_PENDULUMS,\n  MODEL_ID_PUSHING_ROD0,\n  MODEL_ID_PUSHING_ROD1,\n  MODEL_ID_PUSHING_ROD2,\n  MODEL_ID_ROTATING_PLATFORM0,\n  MODEL_ID_ROTATING_PLATFORM1,\n  MODEL_ID_ROTATING_PLATFORM2,\n  MODEL_ID_ROTATING_PLATFORM3,\n  MODEL_ID_TRIANGLE_PLATFORM,\n} from \"./models-ids\";\nimport { matrixCopy, matrixToArray } from \"../math/matrix\";\nimport { interact_pressed } from \"../page\";\nimport { distanceToPlayer } from \"./distance-to-player\";\nimport { firstBoatLerp, onFirstBoatLeverPulled, onPlayerPullLever, secondBoatLerp } from \"./world-state\";\n\nexport let shouldRotatePlatforms: number;\n\nexport let eppur_si_muove = () => {\n  let rotatingPlatform1Rotation: number;\n\n  let rotatingPlatform2Rotation: number;\n\n  let rotatingHexCorridorRotation: number;\n\n  const LEVER_SENSITIVITY_RADIUS = 3;\n\n  const lerpneg = (v: number, t: number) => {\n    v = clamp(v);\n    return lerp(v, 1 - v, t);\n  };\n\n  eppur_si_muove = () => {\n    modelsResetUpdateCounter();\n\n    rotatingHexCorridorRotation = lerp(\n      lerpDamp(rotatingHexCorridorRotation, 0, 1),\n      angle_wrap_degrees(rotatingHexCorridorRotation + gameTimeDelta * 60),\n      levers[LEVER_ID_ROTATING_CORRIDOR]!.$lerpValue - levers[LEVER_ID_CRYSTALS]!.$lerpValue2,\n    );\n\n    shouldRotatePlatforms = lerpneg(\n      levers[LEVER_ID_DONUT_PAD]!.$lerpValue,\n      levers[LEVER_ID_AFTER_ROTATING_PLATFORMS]!.$lerpValue,\n    );\n\n    rotatingPlatform1Rotation = lerp(\n      lerpDamp(rotatingPlatform1Rotation, 0, 5),\n      angle_wrap_degrees(rotatingPlatform1Rotation + gameTimeDelta * 56),\n      shouldRotatePlatforms,\n    );\n\n    rotatingPlatform2Rotation = lerp(\n      lerpDamp(rotatingPlatform2Rotation, 0, 4),\n      angle_wrap_degrees(rotatingPlatform2Rotation + gameTimeDelta * 48),\n      shouldRotatePlatforms,\n    );\n\n    /// ****** TRANSLATIONS ONLY ****** ///\n\n    // moving central platform in the first level\n\n    verifyModelsNextUpdate(MODEL_ID_LEVEL1_CENTRAL_PLATFORM);\n    modelsNextUpdate(\n      0,\n      270 * (levers[LEVER_ID_LEVEL1_DESCENT]!.$lerpValue - 1) +\n        (2 + 5 * Math.cos(gameTime * 1.5)) * (1 - levers[LEVER_ID_GATE1]!.$lerpValue),\n    );\n\n    // blackPlatforms in the second level\n\n    let oscillation = min(1 - levers[LEVER_ID_TRIANGLE_PLATFORM]!.$lerpValue2, levers[LEVER_ID_GATE1]!.$lerpValue2);\n\n    verifyModelsNextUpdate(MODEL_ID_LEVEL2_BLACK_PLATFORM0);\n    modelsNextUpdate(oscillation * Math.sin(gameTime * 0.6 + 1.2) * 12, 0, 35);\n\n    verifyModelsNextUpdate(MODEL_ID_LEVEL2_BLACK_PLATFORM1);\n    modelsNextUpdate(oscillation * Math.sin(gameTime * 0.6 - 1.2) * 8.2, 0, 55);\n\n    // central oscillating platform\n\n    verifyModelsNextUpdate(MODEL_ID_LEVEL2_CENTRAL_PLATFORM);\n    modelsNextUpdate(oscillation * Math.sin(gameTime * 0.6) * 12, 0, 45);\n\n    // triangle platform\n\n    verifyModelsNextUpdate(MODEL_ID_TRIANGLE_PLATFORM);\n    modelsNextUpdate(9.8 * (1 - oscillation));\n\n    // vertically oscillating mini platforms\n\n    oscillation =\n      clamp(1 - 5 * oscillation) *\n      lerpneg(levers[LEVER_ID_TRIANGLE_PLATFORM]!.$lerpValue, levers[LEVER_ID_ROTATING_CORRIDOR]!.$lerpValue);\n\n    verifyModelsNextUpdate(MODEL_ID_LEVEL2_MINI_PLATFORM_VERTICAL);\n    modelsNextUpdate(0, oscillation * Math.sin(gameTime * 1.35) * 4);\n\n    // horizontaly oscillating mini platforms\n\n    verifyModelsNextUpdate(MODEL_ID_LEVEL2_MINI_PLATFORM_HORIZONTAL);\n    modelsNextUpdate(0, 0, oscillation * Math.sin(gameTime * 0.9) * 8);\n\n    // hex corridor door\n\n    verifyModelsNextUpdate(MODEL_ID_LEVEL2_HEX_CORRIDOR_DOOR);\n    modelsNextUpdate(0, -6.5 * levers[LEVER_ID_TRIANGLE_PLATFORM]!.$lerpValue2);\n\n    // elevators\n\n    oscillation = lerpneg(levers[LEVER_ID_MONUMENT]!.$lerpValue2, levers[LEVER_ID_CRYSTALS]!.$lerpValue2);\n\n    verifyModelsNextUpdate(MODEL_ID_ELEVATORS0);\n    modelsNextUpdate(\n      0,\n      oscillation * Math.sin(gameTime) * 5 +\n        3.5 * (1 - max(levers[LEVER_ID_CRYSTALS]!.$lerpValue, levers[LEVER_ID_MONUMENT]!.$lerpValue)),\n    );\n\n    verifyModelsNextUpdate(MODEL_ID_ELEVATORS1);\n    modelsNextUpdate(0, oscillation * Math.sin(gameTime + 3) * 6, oscillation * Math.sin(gameTime * 0.6 + 1) * 6);\n\n    // central sculpture/monument\n\n    verifyModelsNextUpdate(MODEL_ID_MONUMENT);\n    modelsNextUpdate(0, -7.3 * levers[LEVER_ID_MONUMENT]!.$lerpValue2);\n\n    // pushing rods\n\n    oscillation = lerpneg(\n      levers[LEVER_ID_BEFORE_PUSHING_RODS]!.$lerpValue,\n      levers[LEVER_ID_AFTER_PUSHING_RODS]!.$lerpValue,\n    );\n\n    verifyModelsNextUpdate(MODEL_ID_PUSHING_ROD0);\n    modelsNextUpdate(0, -2, 10 - 8.5 * oscillation * abs(Math.sin(gameTime * 1.1)));\n\n    verifyModelsNextUpdate(MODEL_ID_PUSHING_ROD1);\n    modelsNextUpdate(0, -2, 10 - 8.5 * oscillation * abs(Math.sin(gameTime * 2.1)));\n\n    verifyModelsNextUpdate(MODEL_ID_PUSHING_ROD2);\n    modelsNextUpdate(\n      0,\n      -2,\n      10 -\n        8.5 *\n          max(\n            // push rods\n            oscillation * abs(Math.sin(gameTime * 1.5)),\n            // block rods\n            (1 - levers[LEVER_ID_BEFORE_PUSHING_RODS]!.$lerpValue) * (1 - oscillation),\n          ),\n    );\n\n    // oscillating hex pads\n\n    const hexPadsOscillation = lerpneg(levers[LEVER_ID_DETOUR]!.$lerpValue2, levers[LEVER_ID_DONUT_PAD]!.$lerpValue2);\n\n    for (let i = 0; i < 4; i++) {\n      verifyModelsNextUpdate(MODEL_ID_OSCILLATING_HEX_PAD0 + i);\n      modelsNextUpdate(\n        (i > 2 ? 2 * (1 - hexPadsOscillation) + hexPadsOscillation : 0) - 100,\n        hexPadsOscillation * Math.sin(gameTime * 1.3 + i * 1.7) * (3 + i / 3) + 0.7,\n        115 -\n          7 *\n            (1 - levers[LEVER_ID_DETOUR]!.$lerpValue2) *\n            (1 - levers[LEVER_ID_DONUT_PAD]!.$lerpValue2) *\n            (i & 1 ? -1 : 1) +\n          max(0.05, hexPadsOscillation) * Math.cos(gameTime * 1.3 + i * 7) * (4 - 2 * (1 - i / 3)),\n      );\n    }\n\n    // jumping pads\n\n    oscillation = lerpneg(\n      levers[LEVER_ID_AFTER_ROTATING_PLATFORMS]!.$lerpValue2,\n      levers[LEVER_ID_AFTER_JUMPING_PADS]!.$lerpValue2,\n    );\n\n    for (let i = 0; i < 3; ++i) {\n      verifyModelsNextUpdate(MODEL_ID_JUMPING_PAD0 + i);\n      modelsNextUpdate(\n        0,\n        oscillation * Math.sin(gameTime * 1.5 + i * 1.5) * 4 +\n          (i\n            ? 0\n            : 3 *\n              (1 - levers[LEVER_ID_AFTER_ROTATING_PLATFORMS]!.$lerpValue2) *\n              (1 - levers[LEVER_ID_AFTER_JUMPING_PADS]!.$lerpValue2)),\n      );\n    }\n\n    // floating elevator pad\n\n    oscillation = lerpneg(\n      lerpneg(\n        (levers[LEVER_ID_AFTER_JUMPING_PADS]!.$lerpValue + levers[LEVER_ID_AFTER_JUMPING_PADS]!.$lerpValue2) / 2,\n        levers[LEVER_ID_AFTER_ROTATING_PLATFORMS]!.$lerpValue2,\n      ),\n      (levers[LEVER_ID_FLOATING_ELEVATOR]!.$lerpValue + levers[LEVER_ID_FLOATING_ELEVATOR]!.$lerpValue2) / 2,\n    );\n\n    verifyModelsNextUpdate(MODEL_ID_FLOATING_ELEVATOR_PAD);\n    modelsNextUpdate(0, 16 * oscillation, 95 + 8.5 * clamp(oscillation * 2 - 1));\n\n    // in gate bars in first level\n    verifyModelsNextUpdate(MODEL_ID_GATE0);\n    modelsNextUpdate(0, -4.7 * levers[LEVER_ID_GATE0]!.$lerpValue, -15);\n\n    // out gate bars in first level\n    verifyModelsNextUpdate(MODEL_ID_GATE1);\n    modelsNextUpdate(0, -4.7 * levers[LEVER_ID_GATE1]!.$lerpValue, 15);\n\n    // central gate bars\n    verifyModelsNextUpdate(MODEL_ID_GATE2);\n    modelsNextUpdate(-99.7, -1.9 - 5.5 * levers[LEVER_ID_CRYSTALS]!.$lerpValue, 63.5);\n\n    // far arc gate bars\n    verifyModelsNextUpdate(MODEL_ID_GATE3);\n    modelsNextUpdate(-100, 0.6 - 5.8 * levers[LEVER_ID_DONUT_PAD]!.$lerpValue, 96.5);\n\n    /// **** FULL MATRIX TRANSFORMS **** ///\n\n    // rotating hex corridor\n\n    verifyModelsNextUpdate(MODEL_ID_LEVEL2_ROTATING_HEX_CORRIDOR);\n    modelsNextUpdate(\n      -75,\n      3 * (1 - levers[LEVER_ID_ROTATING_CORRIDOR]!.$lerpValue2) * (1 - levers[LEVER_ID_CRYSTALS]!.$lerpValue),\n      55,\n    ).rotateSelf(180 * (1 - levers[LEVER_ID_ROTATING_CORRIDOR]!.$lerpValue2) + rotatingHexCorridorRotation, 0);\n\n    // donut pad\n\n    verifyModelsNextUpdate(MODEL_ID_DONUT_PAD);\n    modelsNextUpdate(\n      2.5 * (1 - hexPadsOscillation) - 139.7,\n      -3 * (1 - levers[LEVER_ID_DETOUR]!.$lerpValue) - hexPadsOscillation * Math.sin(gameTime * 0.8) - 1.8,\n      93.5,\n    ).rotateSelf(Math.cos(gameTime * 1.3) * (3 + 3 * hexPadsOscillation), 0);\n\n    // pendulums\n\n    verifyModelsNextUpdate(MODEL_ID_PENDULUMS);\n    modelsNextUpdate(-2 * Math.sin(gameTime)).rotateSelf(25 * Math.sin(gameTime));\n\n    // First rotating platform (with hole)\n\n    verifyModelsNextUpdate(MODEL_ID_ROTATING_PLATFORM0);\n    modelsNextUpdate(-81, 0.6, 106).rotateSelf(0, 40 + rotatingPlatform1Rotation);\n\n    // Second rotating platform\n    verifyModelsNextUpdate(MODEL_ID_ROTATING_PLATFORM1);\n    modelsNextUpdate(-65.8, 0.8, 106).rotateSelf(0, rotatingPlatform2Rotation);\n\n    // Third rotating platform\n\n    verifyModelsNextUpdate(MODEL_ID_ROTATING_PLATFORM2);\n    modelsNextUpdate(-50.7, 0.8, 106).rotateSelf(0, 180 - rotatingPlatform2Rotation);\n\n    // Fourth rotating platform\n\n    verifyModelsNextUpdate(MODEL_ID_ROTATING_PLATFORM3);\n    modelsNextUpdate(-50.7, 0.8, 91).rotateSelf(0, 270 + rotatingPlatform2Rotation);\n\n    const boatUpdate = (x: number, y: number, z: number) =>\n      modelsNextUpdate(x + Math.sin(gameTime + 2) / 5, y + Math.sin(gameTime * 0.8) / 5, z).rotateSelf(\n        2 * Math.sin(gameTime),\n        Math.sin(gameTime * 0.7),\n        Math.sin(gameTime * 0.9),\n      );\n\n    // first boad\n    verifyModelsNextUpdate(MODEL_ID_BOAT0);\n    boatUpdate(-12, 4.2, -66 + 40 * firstBoatLerp);\n\n    // second boat\n    verifyModelsNextUpdate(MODEL_ID_BOAT1);\n    boatUpdate(-123, 1.4, 55 - 65 * secondBoatLerp);\n\n    /// **** OBJECTS **** ///\n\n    // Update souls and levers\n\n    for (let i = 0; i < LEVERS_COUNT; ++i) {\n      const lever = levers[i]!;\n      const lerpValue = (lever.$lerpValue = lerpDamp(lever.$lerpValue, lever.$value, 4));\n      lever.$lerpValue2 = lerpDamp(lever.$lerpValue2, lever.$value, 1);\n\n      // Prepare the matrix to be written to the uniform buffer for the lever stick.\n      // and encode lerp value in matrix m44 so fragmemt shader can change the lever handle color\n      matrixCopy(matrixCopy(lever.$matrix).multiplySelf(lever.$transform), modelsNextUpdate(0))\n        .rotateSelf(50 * lerpValue - 25, 0)\n        .translateSelf(0, 1).m44 = lerpValue;\n\n      if (interact_pressed && distanceToPlayer() < LEVER_SENSITIVITY_RADIUS) {\n        if (lever.$value) {\n          if (lerpValue > 0.7) {\n            lever.$value = 0;\n            onPlayerPullLever(i);\n          }\n        } else if (lerpValue < 0.3) {\n          lever.$value = 1;\n          onPlayerPullLever(i);\n        }\n      }\n\n      if (i === LEVER_ID_BOAT0 && lever.$value && lerpValue > 0.8) {\n        lever.$value = 0;\n        onFirstBoatLeverPulled();\n      }\n\n      if (i < SOULS_COUNT) {\n        souls[i]!();\n      }\n    }\n\n    // Update player\n\n    player_update();\n\n    // Copy all models full matrices to the world uniform buffer\n\n    for (let i = 0; i < MODELS_WITH_FULL_TRANSFORM; ++i) {\n      matrixToArray(allModels[2 + MODELS_WITH_SIMPLE_TRANSFORM + i]!.$matrix, transformsBuffer, i);\n    }\n\n    // Copy all models simple translation transform to the world uniform buffer\n    for (\n      let i = 0, j = (MODELS_WITH_FULL_TRANSFORM + SOULS_COUNT) * 16, m: DOMMatrix;\n      i < MODELS_WITH_SIMPLE_TRANSFORM;\n      ++i, ++j\n    ) {\n      m = allModels[2 + i]!.$matrix;\n      transformsBuffer[j++] = m.m41;\n      transformsBuffer[j++] = m.m42;\n      transformsBuffer[j++] = m.m43;\n    }\n  };\n\n  eppur_si_muove();\n};\n","// shaders\nimport main_vsSource, {\n  uniformName_projectionMatrix,\n  uniformName_viewMatrix,\n  uniformName_worldTransforms,\n} from \"./shaders/main-vertex.vert\";\nimport main_fsSource, {\n  uniformName_viewPos,\n  uniformName_csm_matrices,\n  uniformName_csm_texture0,\n  uniformName_csm_texture1,\n  uniformName_groundTexture,\n  constDef_CSM_TEXTURE_SIZE as CSM_TEXTURE_SIZE,\n  constDef_CSM_PLANE_DISTANCE as CSM_PLANE_DISTANCE,\n} from \"./shaders/main-fragment.frag\";\nimport collider_fsSource, {\n  constDef_COLLISION_TEXTURE_SIZE as COLLISION_TEXTURE_SIZE,\n} from \"./shaders/collider-fragment.frag\";\nimport sky_vsSource from \"./shaders/sky-vertex.vert\";\nimport sky_fsSource, { uniformName_iResolution } from \"./shaders/sky-fragment.frag\";\n\nimport { gameTimeUpdate, gameTimeDelta, mainMenuVisible, absoluteTime } from \"./game/game-time\";\nimport { camera_rotation, player_position_final, worldStateUpdate } from \"./game/world-state\";\nimport { integers_map } from \"./math/integers-map\";\nimport { identity, matrixCopy, matrixToArray, matrixTransformPoint, tempMatrix } from \"./math/matrix\";\nimport { eppur_si_muove } from \"./game/level-update\";\nimport { max, min } from \"./math/math\";\nimport { player_init, camera_position_x, camera_position_y, camera_position_z } from \"./game/player\";\nimport {\n  MODEL_ID_PLAYER_BODY,\n  MODEL_ID_PLAYER_LEG0,\n  MODEL_ID_PLAYER_LEG1,\n  MODEL_ID_SOUL,\n  MODEL_ID_SOUL_COLLISION,\n} from \"./game/models-ids\";\nimport { transformsBuffer } from \"./game/transforms-buffer\";\nimport { allModels, MODELS_WITH_SIMPLE_TRANSFORM, souls } from \"./game/models\";\nimport { mat_perspective, zFar, zNear } from \"./math/matrix-perspective\";\nimport { page_update, csm_projections, player_first_person, projection, resetInteractPressed } from \"./page\";\nimport { cgl, gl } from \"./gl\";\n\nconst LIGHT_ROT_X = 298;\nconst LIGHT_ROT_Y = 139;\n\nexport const startMainLoop = (groundTextureImage: HTMLImageElement) => {\n  const csm_tempMatrix = new DOMMatrix();\n  const camera_view = new DOMMatrix();\n\n  const csm_lightSpaceMatrices = new Float32Array(2 * 16);\n  const csm_tempFrustumCorners: number[] = [];\n  const csm_framebuffer = gl.createFramebuffer();\n\n  interface WebglProgramAbstraction {\n    (name: string): WebGLUniformLocation;\n    (): void;\n  }\n\n  const renderModels = (\n    xgl: WebGL2RenderingContext,\n    soulModelId: number,\n    doNotRenderPlayer: boolean | 0 | 1 | undefined,\n  ) => {\n    if (mainMenuVisible) {\n      if (hC.width > 1100) {\n        // Render player in main menu\n        xgl.drawElements(\n          xgl.TRIANGLES,\n          allModels[MODEL_ID_PLAYER_LEG1]!.$vertexEnd! - allModels[MODEL_ID_PLAYER_BODY]!.$vertexBegin!,\n          xgl.UNSIGNED_SHORT,\n          allModels[MODEL_ID_PLAYER_BODY]!.$vertexBegin! * 2,\n        );\n      }\n    } else {\n      // Render souls\n      xgl.drawElementsInstanced(\n        xgl.TRIANGLES,\n        allModels[soulModelId]!.$vertexEnd! - allModels[soulModelId]!.$vertexBegin!,\n        xgl.UNSIGNED_SHORT,\n        allModels[soulModelId]!.$vertexBegin! * 2,\n        souls.length,\n      );\n\n      // Render world\n      xgl.drawElements(\n        xgl.TRIANGLES,\n        allModels[doNotRenderPlayer ? MODEL_ID_PLAYER_BODY : MODEL_ID_PLAYER_LEG1 + 1]!.$vertexBegin! - 3,\n        xgl.UNSIGNED_SHORT,\n        3 * 2,\n      );\n    }\n  };\n\n  const initShaderProgram = (\n    xgl: WebGL2RenderingContext,\n    sfsSource: string,\n    vfsSource: string = main_vsSource,\n  ): WebglProgramAbstraction => {\n    const loadShader = (source: string, type: number): WebGLShader => {\n      const shader = xgl.createShader(type)!;\n      xgl.shaderSource(shader, source);\n      xgl.compileShader(shader);\n\n      if (DEBUG && !xgl.getShaderParameter(shader, xgl.COMPILE_STATUS)) {\n        throw new Error(\"An error occurred compiling the shaders: \" + xgl.getShaderInfoLog(shader));\n      }\n\n      return shader;\n    };\n\n    const uniforms: Record<string, WebGLUniformLocation> = {};\n    const program = xgl.createProgram()!;\n    xgl.attachShader(program, loadShader(vfsSource, xgl.VERTEX_SHADER));\n    xgl.attachShader(program, loadShader(sfsSource, xgl.FRAGMENT_SHADER));\n    xgl.linkProgram(program);\n\n    if (DEBUG && !xgl.getProgramParameter(program, xgl.LINK_STATUS)) {\n      throw new Error(\"Unable to initialize the shader program: \" + xgl.getProgramInfoLog(program));\n    }\n\n    return (name?: string): any =>\n      name ? uniforms[name] || (uniforms[name] = xgl.getUniformLocation(program, name)!) : xgl.useProgram(program);\n  };\n\n  const mainShader = initShaderProgram(gl, main_fsSource);\n  const collisionShader = initShaderProgram(cgl, collider_fsSource);\n  const skyShader = initShaderProgram(gl, sky_fsSource, sky_vsSource);\n\n  const [csm0, csm1] = integers_map(2, (split: number) => {\n    const texture = gl.createTexture()!;\n    gl.activeTexture(gl.TEXTURE0 + split);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.DEPTH_COMPONENT24,\n      CSM_TEXTURE_SIZE,\n      CSM_TEXTURE_SIZE,\n      0,\n      gl.DEPTH_COMPONENT,\n      gl.UNSIGNED_INT,\n      null,\n    );\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL); // Can be LESS or LEQUAL\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\n    return (roundingRadius: number) => {\n      let tx = 0;\n      let ty = 0;\n      let tz = 0;\n\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture, 0);\n      gl.clear(gl.DEPTH_BUFFER_BIT);\n\n      matrixCopy()\n        .scale3dSelf((roundingRadius *= 1.1))\n        .multiplySelf(matrixCopy(csm_projections[split], csm_tempMatrix).multiplySelf(camera_view).invertSelf());\n\n      for (let i = 0, j = 0; i < 8; ++i) {\n        matrixTransformPoint(4 & i ? 1 : -1, 2 & i ? 1 : -1, 1 & i ? 1 : -1);\n        // Round to reduce shimmering\n        tx -= csm_tempFrustumCorners[j++] = (matrixTransformPoint.x | 0) / (roundingRadius * matrixTransformPoint.w);\n        ty -= csm_tempFrustumCorners[j++] = (matrixTransformPoint.y | 0) / (roundingRadius * matrixTransformPoint.w);\n        tz -= csm_tempFrustumCorners[j++] = (matrixTransformPoint.z | 0) / (roundingRadius * matrixTransformPoint.w);\n      }\n\n      matrixCopy()\n        .rotateSelf(LIGHT_ROT_X, LIGHT_ROT_Y)\n        .translateSelf(tx / 8, ty / 8, tz / 8);\n\n      let right = -Infinity;\n      let top = -Infinity;\n      let far = -Infinity;\n      let left = Infinity;\n      let bottom = Infinity;\n      let near = Infinity;\n\n      // Compute the frustum bouding box\n      for (let i = 0, j = 0; i < 8; ++i) {\n        matrixTransformPoint(csm_tempFrustumCorners[j++], csm_tempFrustumCorners[j++], csm_tempFrustumCorners[j++]);\n        right = max(right, matrixTransformPoint.x);\n        top = max(top, matrixTransformPoint.y);\n        far = max(far, matrixTransformPoint.z);\n        left = min(left, matrixTransformPoint.x);\n        bottom = min(bottom, matrixTransformPoint.y);\n        near = min(near, matrixTransformPoint.z);\n      }\n\n      tz = 10 + split;\n      near *= near < 0 ? tz : 1 / tz;\n      far *= far > 0 ? tz : 1 / tz;\n\n      // Build the ortographic matrix, multiply it with the light space view matrix.\n\n      gl.uniformMatrix4fv(\n        mainShader(uniformName_viewMatrix),\n        false,\n        matrixToArray(\n          matrixCopy(identity, csm_tempMatrix)\n            .scaleSelf(2 / (right - left), 2 / (top - bottom), 2 / (near - far))\n            .translateSelf((right + left) / -2, (top + bottom) / -2, (near + far) / 2)\n            .multiplySelf(tempMatrix),\n          csm_lightSpaceMatrices,\n          split,\n        ),\n        16 * split,\n        16,\n      );\n    };\n  });\n\n  const mainLoop = (globalTime: number) => {\n    gameTimeUpdate(globalTime);\n\n    requestAnimationFrame(mainLoop);\n\n    if (gameTimeDelta > 0) {\n      page_update();\n\n      worldStateUpdate();\n\n      eppur_si_muove();\n\n      // *** COLLISION RENDERER ***\n\n      cgl.uniform4fv(collisionShader(uniformName_worldTransforms), transformsBuffer);\n\n      cgl.colorMask(true, true, true, true);\n      cgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      cgl.colorMask(true, false, true, false);\n\n      // first collision render\n\n      cgl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        matrixToArray(\n          matrixCopy()\n            .rotateSelf(0, 180)\n            .invertSelf()\n            .translateSelf(-player_position_final.x, -player_position_final.y, -player_position_final.z + 0.3),\n        ),\n      );\n\n      renderModels(cgl, MODEL_ID_SOUL_COLLISION, 1);\n\n      // second collision render\n\n      cgl.clear(gl.DEPTH_BUFFER_BIT);\n      cgl.colorMask(false, true, false, true);\n\n      cgl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        matrixToArray(\n          matrixCopy().translateSelf(\n            -player_position_final.x,\n            -player_position_final.y,\n            -player_position_final.z - 0.3,\n          ),\n        ),\n      );\n\n      renderModels(cgl, MODEL_ID_SOUL_COLLISION, 1);\n\n      cgl.flush();\n\n      // Reset interact button\n      resetInteractPressed();\n    }\n\n    mainShader();\n\n    // Send the transformations to the shader\n\n    gl.uniform4fv(mainShader(uniformName_worldTransforms), transformsBuffer);\n\n    // *** CASCADED SHADOWMAPS ***\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, csm_framebuffer);\n    gl.viewport(0, 0, CSM_TEXTURE_SIZE, CSM_TEXTURE_SIZE);\n\n    gl.uniform1i(mainShader(uniformName_csm_texture0), 4);\n    gl.uniform1i(mainShader(uniformName_csm_texture1), 4);\n    gl.uniformMatrix4fv(mainShader(uniformName_projectionMatrix), false, matrixToArray(identity));\n\n    // view camera\n\n    let cameraX = camera_position_x;\n    let cameraY = camera_position_y;\n    let cameraZ = camera_position_z;\n\n    if (mainMenuVisible) {\n      matrixCopy().rotateSelf(0, 40 * Math.sin(absoluteTime) - 80, -8);\n      matrixToArray(tempMatrix, transformsBuffer, MODEL_ID_PLAYER_BODY - MODELS_WITH_SIMPLE_TRANSFORM - 2);\n      matrixToArray(tempMatrix, transformsBuffer, MODEL_ID_PLAYER_LEG0 - MODELS_WITH_SIMPLE_TRANSFORM - 2);\n      matrixToArray(tempMatrix, transformsBuffer, MODEL_ID_PLAYER_LEG1 - MODELS_WITH_SIMPLE_TRANSFORM - 2);\n\n      matrixCopy(projection).invertSelf();\n      matrixTransformPoint(3.6, 3.5);\n      cameraX = matrixTransformPoint.x;\n      cameraY = matrixTransformPoint.y;\n      cameraZ = 5;\n      matrixCopy(identity, camera_view).rotateSelf(20, 0).translateSelf(-cameraX, -cameraY, -cameraZ).rotateSelf(0, 99);\n    } else {\n      matrixCopy(identity, camera_view)\n        .rotateSelf(-camera_rotation.x, -camera_rotation.y)\n        .invertSelf()\n        .translateSelf(-cameraX, -cameraY, -cameraZ);\n    }\n\n    csm0!(CSM_PLANE_DISTANCE - zNear);\n    renderModels(gl, MODEL_ID_SOUL, player_first_person);\n\n    csm1!(zFar - CSM_PLANE_DISTANCE);\n    renderModels(gl, MODEL_ID_SOUL, player_first_person);\n\n    // *** MAIN RENDER ***\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.uniform1i(mainShader(uniformName_csm_texture0), 0);\n    gl.uniform1i(mainShader(uniformName_csm_texture1), 1);\n    gl.uniform3f(mainShader(uniformName_viewPos), cameraX, cameraY, cameraZ);\n    gl.uniformMatrix4fv(mainShader(uniformName_projectionMatrix), false, matrixToArray(projection));\n    gl.uniformMatrix4fv(mainShader(uniformName_viewMatrix), false, matrixToArray(camera_view));\n    gl.uniformMatrix4fv(mainShader(uniformName_csm_matrices), false, csm_lightSpaceMatrices);\n\n    renderModels(gl, MODEL_ID_SOUL, player_first_person);\n\n    // *** SKY RENDER ***\n\n    skyShader();\n\n    gl.uniformMatrix4fv(skyShader(uniformName_viewMatrix), false, matrixToArray(camera_view.invertSelf()));\n    gl.uniform3f(skyShader(uniformName_iResolution), gl.drawingBufferWidth, gl.drawingBufferHeight, absoluteTime);\n\n    gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0);\n  };\n\n  // Ground texture\n\n  gl.activeTexture(gl.TEXTURE2);\n\n  gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1024, 1024, 0, gl.RGBA, gl.UNSIGNED_BYTE, groundTextureImage);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n  gl.generateMipmap(gl.TEXTURE_2D);\n\n  // Shadows framebuffer\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, csm_framebuffer);\n  // Disable rendering to the csm color buffer, we just need the depth buffer\n  gl.drawBuffers([gl.NONE]);\n  gl.readBuffer(gl.NONE);\n\n  mainShader();\n  gl.uniform1i(mainShader(uniformName_groundTexture), 2);\n\n  skyShader();\n  gl.uniform1i(skyShader(uniformName_groundTexture), 2);\n\n  // Setup rendering context\n\n  gl.clearColor(0, 0, 0, 1);\n  gl.depthFunc(gl.LEQUAL); // LEQUAL to make sky works. Default is LESS\n  gl.enable(gl.DEPTH_TEST); // Enable depth testing\n  gl.enable(gl.CULL_FACE); // Don't render triangle backs\n\n  // Setup collision context\n\n  cgl.enable(cgl.DEPTH_TEST); // Enable depth testing\n  cgl.enable(cgl.CULL_FACE); // Don't render triangle backs\n  cgl.viewport(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n\n  collisionShader();\n  cgl.uniformMatrix4fv(\n    collisionShader(uniformName_projectionMatrix),\n    false,\n    matrixToArray(mat_perspective(0.0001, 2, 1.2, 0.4)),\n  );\n\n  player_init();\n  page_update();\n\n  requestAnimationFrame(mainLoop);\n};\n","import { allModels, MODELS_WITH_FULL_TRANSFORM, souls, SOULS_COUNT } from \"./models\";\nimport { cgl, gl } from \"../gl\";\nimport { plane_fromPolygon } from \"../math/vectors\";\nimport type { Polygon } from \"../geometry/polygon\";\nimport { MODEL_ID_SOUL_COLLISION } from \"./models-ids\";\n\nexport const initTriangleBuffers = () => {\n  const _triangleIndices: number[] = [];\n  const _vertexPositions: number[] = [];\n  const _vertexColors: number[] = [];\n  const _vertexNormals: number[] = [];\n\n  const _vertexMap = new Map<string, number>();\n  const _vertexInts = new Int32Array(8);\n  const _vertexIntsSmooth = new Int32Array(_vertexInts.buffer, 0, 5);\n  const _vertexFloats = new Float32Array(_vertexInts.buffer);\n\n  let meshFirstIndex: number = 0;\n\n  if (DEBUG) {\n    console.time(\"initTriangleBuffers\");\n  }\n\n  allModels.map((model, index) => {\n    let polygon: Polygon | undefined;\n\n    const getVertex = (i: number): number => {\n      let { x, y, z } = polygon![i]!;\n      _vertexFloats[0] = x;\n      _vertexFloats[1] = y;\n      _vertexFloats[2] = z;\n      const key = \"\" + (polygon!.$smooth ? _vertexIntsSmooth : _vertexInts);\n      let vertexIndex = _vertexMap.get(key);\n      if (vertexIndex !== undefined) {\n        x = vertexIndex * 3;\n        _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[5]!) / 2;\n        _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[6]!) / 2;\n        _vertexNormals[x] = (_vertexNormals[x]! + _vertexInts[7]!) / 2;\n      } else {\n        _vertexMap.set(key, (vertexIndex = _vertexMap.size));\n        _vertexPositions.push(x, y, z, _vertexFloats[3]!);\n        _vertexColors.push(_vertexInts[4]!);\n        _vertexNormals.push(_vertexInts[5]!, _vertexInts[6]!, _vertexInts[7]!);\n      }\n      return vertexIndex;\n    };\n\n    _vertexFloats[3] = index > MODEL_ID_SOUL_COLLISION - 1 ? -MODELS_WITH_FULL_TRANSFORM : index;\n\n    for (const grp of model.$polygon!) {\n      for (polygon of grp) {\n        const { x, y, z } = plane_fromPolygon(polygon);\n        _vertexInts[4] = polygon.$color! | 0;\n        _vertexInts[5] = x * 32767;\n        _vertexInts[6] = y * 32767;\n        _vertexInts[7] = z * 32767;\n        for (let i = 2, a = getVertex(0), b = getVertex(1); i < polygon.length; ++i) {\n          _triangleIndices.push(a, b, (b = getVertex(i)));\n        }\n      }\n    }\n\n    // free memory\n    model.$polygon = 0 as any;\n\n    // write the indices offset and count\n    model.$vertexBegin = meshFirstIndex;\n    model.$vertexEnd = meshFirstIndex = _triangleIndices.length;\n  });\n\n  [gl, cgl].map((xgl) => {\n    xgl.bindBuffer(xgl.ELEMENT_ARRAY_BUFFER, xgl.createBuffer());\n    xgl.bufferData(xgl.ELEMENT_ARRAY_BUFFER, new Uint16Array(_triangleIndices), xgl.STATIC_DRAW);\n\n    xgl.bindBuffer(xgl.ARRAY_BUFFER, xgl.createBuffer());\n    xgl.bufferData(xgl.ARRAY_BUFFER, new Float32Array(_vertexPositions), xgl.STATIC_DRAW);\n    xgl.vertexAttribPointer(0, 4, xgl.FLOAT, false, 0, 0);\n\n    xgl.bindBuffer(xgl.ARRAY_BUFFER, xgl.createBuffer());\n    xgl.bufferData(xgl.ARRAY_BUFFER, new Int16Array(_vertexNormals), xgl.STATIC_DRAW);\n    xgl.vertexAttribPointer(1, 3, xgl.SHORT, true, 0, 0);\n\n    xgl.bindBuffer(xgl.ARRAY_BUFFER, xgl.createBuffer());\n    xgl.bufferData(xgl.ARRAY_BUFFER, new Uint32Array(_vertexColors), xgl.STATIC_DRAW);\n    xgl.vertexAttribPointer(2, 4, xgl.UNSIGNED_BYTE, true, 0, 0);\n\n    xgl.enableVertexAttribArray(0);\n    xgl.enableVertexAttribArray(1);\n    xgl.enableVertexAttribArray(2);\n  });\n\n  if (DEBUG) {\n    console.timeEnd(\"initTriangleBuffers\");\n    console.table({\n      \"all models\": allModels.length,\n      \"vertices\": _vertexMap.size,\n      \"triangles\": _triangleIndices.length / 3,\n      \"indices\": _triangleIndices.length,\n    });\n\n    if (souls.length !== SOULS_COUNT) {\n      throw new Error(\"Souls must be \" + SOULS_COUNT + \" but is \" + souls.length);\n    }\n  }\n};\n","import \"./index.css\";\n\nimport \"./dev-tools/dev-main\";\n\nif (DEBUG) {\n  console.time(\"boot\");\n}\n\nimport groundTextureSvg from \"./groundTexture.svg\";\nimport { build_life_the_universe_and_everything } from \"./game/level\";\nimport { startMainLoop } from \"./main-loop\";\nimport { loadGame } from \"./game/world-state\";\nimport { loadStep } from \"./load-step\";\nimport { loadSong } from \"./music/music-player\";\nimport { initTriangleBuffers } from \"./game/triangle-buffers\";\n\nloadStep(() => {\n  const image = new Image();\n\n  if (DEBUG) {\n    console.time(\"load\");\n  }\n\n  let loadStatus = 0;\n\n  const end = () => {\n    if (++loadStatus === 2) {\n      if (DEBUG) {\n        console.timeEnd(\"load\");\n      }\n\n      if (DEBUG) {\n        console.time(\"startMainLoop\");\n      }\n\n      startMainLoop(image);\n\n      if (DEBUG) {\n        console.timeEnd(\"startMainLoop\");\n      }\n    }\n  };\n\n  image.onload = end;\n  image.src = groundTextureSvg;\n\n  loadSong(() => {\n    loadStep(() => {\n      initTriangleBuffers();\n      loadGame();\n      loadStep(end);\n    });\n    build_life_the_universe_and_everything();\n  });\n\n  if (DEBUG) {\n    console.timeEnd(\"boot\");\n  }\n});\n"],"names":["code","CSM_PLANE_DISTANCE","COLLISION_TEXTURE_SIZE","main_vsSource","CSM_TEXTURE_SIZE","main_fsSource","collider_fsSource","sky_fsSource","sky_vsSource"],"mappings":"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"}